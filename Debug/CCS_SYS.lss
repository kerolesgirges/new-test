
CCS_SYS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019a  00800060  000034e4  00003578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  008001fa  008001fa  00003712  2**0
                  ALLOC
  3 .stab         000056f4  00000000  00000000  00003714  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002256  00000000  00000000  00008e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000b05e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000b21e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000b432  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000da44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000ef12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00010220  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00010707  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_5>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_11>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 ee       	ldi	r30, 0xE4	; 228
     162:	f4 e3       	ldi	r31, 0x34	; 52
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	aa 3f       	cpi	r26, 0xFA	; 250
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	12 e0       	ldi	r17, 0x02	; 2
     172:	aa ef       	ldi	r26, 0xFA	; 250
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ac 34       	cpi	r26, 0x4C	; 76
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 d6 13 	call	0x27ac	; 0x27ac <main>
     184:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	ae ed       	ldi	r26, 0xDE	; 222
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8e ed       	ldi	r24, 0xDE	; 222
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6e ed       	ldi	r22, 0xDE	; 222
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__+0x18>

000009a4 <__floatsisf>:
     9a4:	a8 e0       	ldi	r26, 0x08	; 8
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__prologue_saves__+0x12>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 27       	eor	r24, r24
     9be:	b7 fd       	sbrc	r27, 7
     9c0:	83 95       	inc	r24
     9c2:	99 27       	eor	r25, r25
     9c4:	aa 27       	eor	r26, r26
     9c6:	bb 27       	eor	r27, r27
     9c8:	b8 2e       	mov	r11, r24
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__floatsisf+0x36>
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <__floatsisf+0xaa>
     9da:	88 23       	and	r24, r24
     9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x64>
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	38 07       	cpc	r19, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	48 07       	cpc	r20, r24
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	58 07       	cpc	r21, r24
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__floatsisf+0x54>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	9f ec       	ldi	r25, 0xCF	; 207
     9f6:	30 c0       	rjmp	.+96     	; 0xa58 <__floatsisf+0xb4>
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	87 01       	movw	r16, r14
     9fe:	e2 1a       	sub	r14, r18
     a00:	f3 0a       	sbc	r15, r19
     a02:	04 0b       	sbc	r16, r20
     a04:	15 0b       	sbc	r17, r21
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__floatsisf+0x68>
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	c8 2e       	mov	r12, r24
     a10:	d1 2c       	mov	r13, r1
     a12:	dc 82       	std	Y+4, r13	; 0x04
     a14:	cb 82       	std	Y+3, r12	; 0x03
     a16:	ed 82       	std	Y+5, r14	; 0x05
     a18:	fe 82       	std	Y+6, r15	; 0x06
     a1a:	0f 83       	std	Y+7, r16	; 0x07
     a1c:	18 87       	std	Y+8, r17	; 0x08
     a1e:	c8 01       	movw	r24, r16
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	84 f4       	brge	.+32     	; 0xa4e <__floatsisf+0xaa>
     a2e:	08 2e       	mov	r0, r24
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__floatsisf+0x96>
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	00 1f       	adc	r16, r16
     a38:	11 1f       	adc	r17, r17
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__floatsisf+0x8e>
     a3e:	ed 82       	std	Y+5, r14	; 0x05
     a40:	fe 82       	std	Y+6, r15	; 0x06
     a42:	0f 83       	std	Y+7, r16	; 0x07
     a44:	18 87       	std	Y+8, r17	; 0x08
     a46:	c8 1a       	sub	r12, r24
     a48:	d9 0a       	sbc	r13, r25
     a4a:	dc 82       	std	Y+4, r13	; 0x04
     a4c:	cb 82       	std	Y+3, r12	; 0x03
     a4e:	ba 82       	std	Y+2, r11	; 0x02
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	e9 e0       	ldi	r30, 0x09	; 9
     a5c:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__epilogue_restores__+0x12>

00000a60 <__fixsfsi>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__prologue_saves__+0x20>
     a6c:	69 83       	std	Y+1, r22	; 0x01
     a6e:	7a 83       	std	Y+2, r23	; 0x02
     a70:	8b 83       	std	Y+3, r24	; 0x03
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6b 5f       	subi	r22, 0xFB	; 251
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	61 f1       	breq	.+88     	; 0xae0 <__fixsfsi+0x80>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	50 f1       	brcs	.+84     	; 0xae0 <__fixsfsi+0x80>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f4       	brne	.+8      	; 0xa98 <__fixsfsi+0x38>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	88 23       	and	r24, r24
     a94:	51 f1       	breq	.+84     	; 0xaea <__fixsfsi+0x8a>
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <__fixsfsi+0x94>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	37 fd       	sbrc	r19, 7
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__fixsfsi+0x80>
     aa0:	6e 81       	ldd	r22, Y+6	; 0x06
     aa2:	2f 31       	cpi	r18, 0x1F	; 31
     aa4:	31 05       	cpc	r19, r1
     aa6:	1c f0       	brlt	.+6      	; 0xaae <__fixsfsi+0x4e>
     aa8:	66 23       	and	r22, r22
     aaa:	f9 f0       	breq	.+62     	; 0xaea <__fixsfsi+0x8a>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__fixsfsi+0x94>
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	82 1b       	sub	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	4b 85       	ldd	r20, Y+11	; 0x0b
     abc:	5c 85       	ldd	r21, Y+12	; 0x0c
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fixsfsi+0x68>
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	37 95       	ror	r19
     ac6:	27 95       	ror	r18
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fixsfsi+0x60>
     acc:	66 23       	and	r22, r22
     ace:	b1 f0       	breq	.+44     	; 0xafc <__fixsfsi+0x9c>
     ad0:	50 95       	com	r21
     ad2:	40 95       	com	r20
     ad4:	30 95       	com	r19
     ad6:	21 95       	neg	r18
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__fixsfsi+0x9c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__fixsfsi+0x9c>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	5f e7       	ldi	r21, 0x7F	; 127
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__fixsfsi+0x9c>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e8       	ldi	r21, 0x80	; 128
     afc:	b9 01       	movw	r22, r18
     afe:	ca 01       	movw	r24, r20
     b00:	2c 96       	adiw	r28, 0x0c	; 12
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__epilogue_restores__+0x20>

00000b08 <__floatunsisf>:
     b08:	a8 e0       	ldi	r26, 0x08	; 8
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	ea e8       	ldi	r30, 0x8A	; 138
     b0e:	f5 e0       	ldi	r31, 0x05	; 5
     b10:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__prologue_saves__+0x10>
     b14:	7b 01       	movw	r14, r22
     b16:	8c 01       	movw	r16, r24
     b18:	61 15       	cp	r22, r1
     b1a:	71 05       	cpc	r23, r1
     b1c:	81 05       	cpc	r24, r1
     b1e:	91 05       	cpc	r25, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__floatunsisf+0x20>
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	60 c0       	rjmp	.+192    	; 0xbe8 <__floatunsisf+0xe0>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	8e e1       	ldi	r24, 0x1E	; 30
     b2e:	c8 2e       	mov	r12, r24
     b30:	d1 2c       	mov	r13, r1
     b32:	dc 82       	std	Y+4, r13	; 0x04
     b34:	cb 82       	std	Y+3, r12	; 0x03
     b36:	ed 82       	std	Y+5, r14	; 0x05
     b38:	fe 82       	std	Y+6, r15	; 0x06
     b3a:	0f 83       	std	Y+7, r16	; 0x07
     b3c:	18 87       	std	Y+8, r17	; 0x08
     b3e:	c8 01       	movw	r24, r16
     b40:	b7 01       	movw	r22, r14
     b42:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     b46:	fc 01       	movw	r30, r24
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	f7 ff       	sbrs	r31, 7
     b4c:	3b c0       	rjmp	.+118    	; 0xbc4 <__floatunsisf+0xbc>
     b4e:	22 27       	eor	r18, r18
     b50:	33 27       	eor	r19, r19
     b52:	2e 1b       	sub	r18, r30
     b54:	3f 0b       	sbc	r19, r31
     b56:	57 01       	movw	r10, r14
     b58:	68 01       	movw	r12, r16
     b5a:	02 2e       	mov	r0, r18
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__floatunsisf+0x5e>
     b5e:	d6 94       	lsr	r13
     b60:	c7 94       	ror	r12
     b62:	b7 94       	ror	r11
     b64:	a7 94       	ror	r10
     b66:	0a 94       	dec	r0
     b68:	d2 f7       	brpl	.-12     	; 0xb5e <__floatunsisf+0x56>
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__floatunsisf+0x7c>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	aa 1f       	adc	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	2a 95       	dec	r18
     b86:	d2 f7       	brpl	.-12     	; 0xb7c <__floatunsisf+0x74>
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	a1 09       	sbc	r26, r1
     b8c:	b1 09       	sbc	r27, r1
     b8e:	8e 21       	and	r24, r14
     b90:	9f 21       	and	r25, r15
     b92:	a0 23       	and	r26, r16
     b94:	b1 23       	and	r27, r17
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	a1 05       	cpc	r26, r1
     b9a:	b1 05       	cpc	r27, r1
     b9c:	21 f0       	breq	.+8      	; 0xba6 <__floatunsisf+0x9e>
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	4a 29       	or	r20, r10
     ba8:	5b 29       	or	r21, r11
     baa:	6c 29       	or	r22, r12
     bac:	7d 29       	or	r23, r13
     bae:	4d 83       	std	Y+5, r20	; 0x05
     bb0:	5e 83       	std	Y+6, r21	; 0x06
     bb2:	6f 83       	std	Y+7, r22	; 0x07
     bb4:	78 87       	std	Y+8, r23	; 0x08
     bb6:	8e e1       	ldi	r24, 0x1E	; 30
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	8e 1b       	sub	r24, r30
     bbc:	9f 0b       	sbc	r25, r31
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03
     bc2:	12 c0       	rjmp	.+36     	; 0xbe8 <__floatunsisf+0xe0>
     bc4:	30 97       	sbiw	r30, 0x00	; 0
     bc6:	81 f0       	breq	.+32     	; 0xbe8 <__floatunsisf+0xe0>
     bc8:	0e 2e       	mov	r0, r30
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__floatunsisf+0xcc>
     bcc:	ee 0c       	add	r14, r14
     bce:	ff 1c       	adc	r15, r15
     bd0:	00 1f       	adc	r16, r16
     bd2:	11 1f       	adc	r17, r17
     bd4:	0a 94       	dec	r0
     bd6:	d2 f7       	brpl	.-12     	; 0xbcc <__floatunsisf+0xc4>
     bd8:	ed 82       	std	Y+5, r14	; 0x05
     bda:	fe 82       	std	Y+6, r15	; 0x06
     bdc:	0f 83       	std	Y+7, r16	; 0x07
     bde:	18 87       	std	Y+8, r17	; 0x08
     be0:	ce 1a       	sub	r12, r30
     be2:	df 0a       	sbc	r13, r31
     be4:	dc 82       	std	Y+4, r13	; 0x04
     be6:	cb 82       	std	Y+3, r12	; 0x03
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     bf2:	28 96       	adiw	r28, 0x08	; 8
     bf4:	ea e0       	ldi	r30, 0x0A	; 10
     bf6:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__epilogue_restores__+0x10>

00000bfa <__clzsi2>:
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	7b 01       	movw	r14, r22
     c04:	8c 01       	movw	r16, r24
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	e8 16       	cp	r14, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	f8 06       	cpc	r15, r24
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	08 07       	cpc	r16, r24
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	18 07       	cpc	r17, r24
     c16:	88 f4       	brcc	.+34     	; 0xc3a <__clzsi2+0x40>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	e8 16       	cp	r14, r24
     c1c:	f1 04       	cpc	r15, r1
     c1e:	01 05       	cpc	r16, r1
     c20:	11 05       	cpc	r17, r1
     c22:	31 f0       	breq	.+12     	; 0xc30 <__clzsi2+0x36>
     c24:	28 f0       	brcs	.+10     	; 0xc30 <__clzsi2+0x36>
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	17 c0       	rjmp	.+46     	; 0xc5e <__clzsi2+0x64>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	12 c0       	rjmp	.+36     	; 0xc5e <__clzsi2+0x64>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	e8 16       	cp	r14, r24
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	f8 06       	cpc	r15, r24
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 07       	cpc	r16, r24
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	18 07       	cpc	r17, r24
     c4a:	28 f0       	brcs	.+10     	; 0xc56 <__clzsi2+0x5c>
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__clzsi2+0x64>
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	20 e2       	ldi	r18, 0x20	; 32
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	28 1b       	sub	r18, r24
     c68:	39 0b       	sbc	r19, r25
     c6a:	4a 0b       	sbc	r20, r26
     c6c:	5b 0b       	sbc	r21, r27
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__clzsi2+0x7e>
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__clzsi2+0x76>
     c7c:	f7 01       	movw	r30, r14
     c7e:	ea 51       	subi	r30, 0x1A	; 26
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	80 81       	ld	r24, Z
     c84:	28 1b       	sub	r18, r24
     c86:	31 09       	sbc	r19, r1
     c88:	41 09       	sbc	r20, r1
     c8a:	51 09       	sbc	r21, r1
     c8c:	c9 01       	movw	r24, r18
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	08 95       	ret

00000c98 <__pack_f>:
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	fc 01       	movw	r30, r24
     ca4:	e4 80       	ldd	r14, Z+4	; 0x04
     ca6:	f5 80       	ldd	r15, Z+5	; 0x05
     ca8:	06 81       	ldd	r16, Z+6	; 0x06
     caa:	17 81       	ldd	r17, Z+7	; 0x07
     cac:	d1 80       	ldd	r13, Z+1	; 0x01
     cae:	80 81       	ld	r24, Z
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	48 f4       	brcc	.+18     	; 0xcc6 <__pack_f+0x2e>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e1       	ldi	r26, 0x10	; 16
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 2a       	or	r14, r24
     cbe:	f9 2a       	or	r15, r25
     cc0:	0a 2b       	or	r16, r26
     cc2:	1b 2b       	or	r17, r27
     cc4:	a5 c0       	rjmp	.+330    	; 0xe10 <__pack_f+0x178>
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	09 f4       	brne	.+2      	; 0xccc <__pack_f+0x34>
     cca:	9f c0       	rjmp	.+318    	; 0xe0a <__pack_f+0x172>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	21 f4       	brne	.+8      	; 0xcd8 <__pack_f+0x40>
     cd0:	ee 24       	eor	r14, r14
     cd2:	ff 24       	eor	r15, r15
     cd4:	87 01       	movw	r16, r14
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <__pack_f+0x4a>
     cd8:	e1 14       	cp	r14, r1
     cda:	f1 04       	cpc	r15, r1
     cdc:	01 05       	cpc	r16, r1
     cde:	11 05       	cpc	r17, r1
     ce0:	19 f4       	brne	.+6      	; 0xce8 <__pack_f+0x50>
     ce2:	e0 e0       	ldi	r30, 0x00	; 0
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	96 c0       	rjmp	.+300    	; 0xe14 <__pack_f+0x17c>
     ce8:	62 81       	ldd	r22, Z+2	; 0x02
     cea:	73 81       	ldd	r23, Z+3	; 0x03
     cec:	9f ef       	ldi	r25, 0xFF	; 255
     cee:	62 38       	cpi	r22, 0x82	; 130
     cf0:	79 07       	cpc	r23, r25
     cf2:	0c f0       	brlt	.+2      	; 0xcf6 <__pack_f+0x5e>
     cf4:	5b c0       	rjmp	.+182    	; 0xdac <__pack_f+0x114>
     cf6:	22 e8       	ldi	r18, 0x82	; 130
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	26 1b       	sub	r18, r22
     cfc:	37 0b       	sbc	r19, r23
     cfe:	2a 31       	cpi	r18, 0x1A	; 26
     d00:	31 05       	cpc	r19, r1
     d02:	2c f0       	brlt	.+10     	; 0xd0e <__pack_f+0x76>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	2a c0       	rjmp	.+84     	; 0xd62 <__pack_f+0xca>
     d0e:	b8 01       	movw	r22, r16
     d10:	a7 01       	movw	r20, r14
     d12:	02 2e       	mov	r0, r18
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <__pack_f+0x86>
     d16:	76 95       	lsr	r23
     d18:	67 95       	ror	r22
     d1a:	57 95       	ror	r21
     d1c:	47 95       	ror	r20
     d1e:	0a 94       	dec	r0
     d20:	d2 f7       	brpl	.-12     	; 0xd16 <__pack_f+0x7e>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <__pack_f+0x9c>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	aa 1f       	adc	r26, r26
     d32:	bb 1f       	adc	r27, r27
     d34:	2a 95       	dec	r18
     d36:	d2 f7       	brpl	.-12     	; 0xd2c <__pack_f+0x94>
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	a1 09       	sbc	r26, r1
     d3c:	b1 09       	sbc	r27, r1
     d3e:	8e 21       	and	r24, r14
     d40:	9f 21       	and	r25, r15
     d42:	a0 23       	and	r26, r16
     d44:	b1 23       	and	r27, r17
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	a1 05       	cpc	r26, r1
     d4a:	b1 05       	cpc	r27, r1
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__pack_f+0xbe>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	9a 01       	movw	r18, r20
     d58:	ab 01       	movw	r20, r22
     d5a:	28 2b       	or	r18, r24
     d5c:	39 2b       	or	r19, r25
     d5e:	4a 2b       	or	r20, r26
     d60:	5b 2b       	or	r21, r27
     d62:	da 01       	movw	r26, r20
     d64:	c9 01       	movw	r24, r18
     d66:	8f 77       	andi	r24, 0x7F	; 127
     d68:	90 70       	andi	r25, 0x00	; 0
     d6a:	a0 70       	andi	r26, 0x00	; 0
     d6c:	b0 70       	andi	r27, 0x00	; 0
     d6e:	80 34       	cpi	r24, 0x40	; 64
     d70:	91 05       	cpc	r25, r1
     d72:	a1 05       	cpc	r26, r1
     d74:	b1 05       	cpc	r27, r1
     d76:	39 f4       	brne	.+14     	; 0xd86 <__pack_f+0xee>
     d78:	27 ff       	sbrs	r18, 7
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <__pack_f+0xf6>
     d7c:	20 5c       	subi	r18, 0xC0	; 192
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	4f 4f       	sbci	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <__pack_f+0xf6>
     d86:	21 5c       	subi	r18, 0xC1	; 193
     d88:	3f 4f       	sbci	r19, 0xFF	; 255
     d8a:	4f 4f       	sbci	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	e0 e0       	ldi	r30, 0x00	; 0
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	20 30       	cpi	r18, 0x00	; 0
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	3a 07       	cpc	r19, r26
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	4a 07       	cpc	r20, r26
     d9c:	a0 e4       	ldi	r26, 0x40	; 64
     d9e:	5a 07       	cpc	r21, r26
     da0:	10 f0       	brcs	.+4      	; 0xda6 <__pack_f+0x10e>
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	79 01       	movw	r14, r18
     da8:	8a 01       	movw	r16, r20
     daa:	27 c0       	rjmp	.+78     	; 0xdfa <__pack_f+0x162>
     dac:	60 38       	cpi	r22, 0x80	; 128
     dae:	71 05       	cpc	r23, r1
     db0:	64 f5       	brge	.+88     	; 0xe0a <__pack_f+0x172>
     db2:	fb 01       	movw	r30, r22
     db4:	e1 58       	subi	r30, 0x81	; 129
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	d8 01       	movw	r26, r16
     dba:	c7 01       	movw	r24, r14
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	90 70       	andi	r25, 0x00	; 0
     dc0:	a0 70       	andi	r26, 0x00	; 0
     dc2:	b0 70       	andi	r27, 0x00	; 0
     dc4:	80 34       	cpi	r24, 0x40	; 64
     dc6:	91 05       	cpc	r25, r1
     dc8:	a1 05       	cpc	r26, r1
     dca:	b1 05       	cpc	r27, r1
     dcc:	39 f4       	brne	.+14     	; 0xddc <__pack_f+0x144>
     dce:	e7 fe       	sbrs	r14, 7
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <__pack_f+0x154>
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e0       	ldi	r26, 0x00	; 0
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__pack_f+0x14c>
     ddc:	8f e3       	ldi	r24, 0x3F	; 63
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 0e       	add	r14, r24
     de6:	f9 1e       	adc	r15, r25
     de8:	0a 1f       	adc	r16, r26
     dea:	1b 1f       	adc	r17, r27
     dec:	17 ff       	sbrs	r17, 7
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <__pack_f+0x162>
     df0:	16 95       	lsr	r17
     df2:	07 95       	ror	r16
     df4:	f7 94       	ror	r15
     df6:	e7 94       	ror	r14
     df8:	31 96       	adiw	r30, 0x01	; 1
     dfa:	87 e0       	ldi	r24, 0x07	; 7
     dfc:	16 95       	lsr	r17
     dfe:	07 95       	ror	r16
     e00:	f7 94       	ror	r15
     e02:	e7 94       	ror	r14
     e04:	8a 95       	dec	r24
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__pack_f+0x164>
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <__pack_f+0x17c>
     e0a:	ee 24       	eor	r14, r14
     e0c:	ff 24       	eor	r15, r15
     e0e:	87 01       	movw	r16, r14
     e10:	ef ef       	ldi	r30, 0xFF	; 255
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	6e 2f       	mov	r22, r30
     e16:	67 95       	ror	r22
     e18:	66 27       	eor	r22, r22
     e1a:	67 95       	ror	r22
     e1c:	90 2f       	mov	r25, r16
     e1e:	9f 77       	andi	r25, 0x7F	; 127
     e20:	d7 94       	ror	r13
     e22:	dd 24       	eor	r13, r13
     e24:	d7 94       	ror	r13
     e26:	8e 2f       	mov	r24, r30
     e28:	86 95       	lsr	r24
     e2a:	49 2f       	mov	r20, r25
     e2c:	46 2b       	or	r20, r22
     e2e:	58 2f       	mov	r21, r24
     e30:	5d 29       	or	r21, r13
     e32:	b7 01       	movw	r22, r14
     e34:	ca 01       	movw	r24, r20
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	08 95       	ret

00000e42 <__unpack_f>:
     e42:	fc 01       	movw	r30, r24
     e44:	db 01       	movw	r26, r22
     e46:	40 81       	ld	r20, Z
     e48:	51 81       	ldd	r21, Z+1	; 0x01
     e4a:	22 81       	ldd	r18, Z+2	; 0x02
     e4c:	62 2f       	mov	r22, r18
     e4e:	6f 77       	andi	r22, 0x7F	; 127
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	22 1f       	adc	r18, r18
     e54:	22 27       	eor	r18, r18
     e56:	22 1f       	adc	r18, r18
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	89 2f       	mov	r24, r25
     e5c:	88 0f       	add	r24, r24
     e5e:	82 2b       	or	r24, r18
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	99 1f       	adc	r25, r25
     e66:	99 27       	eor	r25, r25
     e68:	99 1f       	adc	r25, r25
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	9c 93       	st	X, r25
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	21 15       	cp	r18, r1
     e72:	31 05       	cpc	r19, r1
     e74:	a9 f5       	brne	.+106    	; 0xee0 <__unpack_f+0x9e>
     e76:	41 15       	cp	r20, r1
     e78:	51 05       	cpc	r21, r1
     e7a:	61 05       	cpc	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	11 f4       	brne	.+4      	; 0xe84 <__unpack_f+0x42>
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	37 c0       	rjmp	.+110    	; 0xef2 <__unpack_f+0xb0>
     e84:	82 e8       	ldi	r24, 0x82	; 130
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	13 96       	adiw	r26, 0x03	; 3
     e8a:	9c 93       	st	X, r25
     e8c:	8e 93       	st	-X, r24
     e8e:	12 97       	sbiw	r26, 0x02	; 2
     e90:	9a 01       	movw	r18, r20
     e92:	ab 01       	movw	r20, r22
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	44 1f       	adc	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	6a 95       	dec	r22
     ea0:	d1 f7       	brne	.-12     	; 0xe96 <__unpack_f+0x54>
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	8c 93       	st	X, r24
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <__unpack_f+0x80>
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	44 1f       	adc	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	12 96       	adiw	r26, 0x02	; 2
     eb2:	8d 91       	ld	r24, X+
     eb4:	9c 91       	ld	r25, X
     eb6:	13 97       	sbiw	r26, 0x03	; 3
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	9c 93       	st	X, r25
     ebe:	8e 93       	st	-X, r24
     ec0:	12 97       	sbiw	r26, 0x02	; 2
     ec2:	20 30       	cpi	r18, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	38 07       	cpc	r19, r24
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	48 07       	cpc	r20, r24
     ecc:	80 e4       	ldi	r24, 0x40	; 64
     ece:	58 07       	cpc	r21, r24
     ed0:	58 f3       	brcs	.-42     	; 0xea8 <__unpack_f+0x66>
     ed2:	14 96       	adiw	r26, 0x04	; 4
     ed4:	2d 93       	st	X+, r18
     ed6:	3d 93       	st	X+, r19
     ed8:	4d 93       	st	X+, r20
     eda:	5c 93       	st	X, r21
     edc:	17 97       	sbiw	r26, 0x07	; 7
     ede:	08 95       	ret
     ee0:	2f 3f       	cpi	r18, 0xFF	; 255
     ee2:	31 05       	cpc	r19, r1
     ee4:	79 f4       	brne	.+30     	; 0xf04 <__unpack_f+0xc2>
     ee6:	41 15       	cp	r20, r1
     ee8:	51 05       	cpc	r21, r1
     eea:	61 05       	cpc	r22, r1
     eec:	71 05       	cpc	r23, r1
     eee:	19 f4       	brne	.+6      	; 0xef6 <__unpack_f+0xb4>
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	8c 93       	st	X, r24
     ef4:	08 95       	ret
     ef6:	64 ff       	sbrs	r22, 4
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <__unpack_f+0xbe>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <__unpack_f+0xe2>
     f00:	1c 92       	st	X, r1
     f02:	10 c0       	rjmp	.+32     	; 0xf24 <__unpack_f+0xe2>
     f04:	2f 57       	subi	r18, 0x7F	; 127
     f06:	30 40       	sbci	r19, 0x00	; 0
     f08:	13 96       	adiw	r26, 0x03	; 3
     f0a:	3c 93       	st	X, r19
     f0c:	2e 93       	st	-X, r18
     f0e:	12 97       	sbiw	r26, 0x02	; 2
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	8c 93       	st	X, r24
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	44 0f       	add	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	66 1f       	adc	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	8a 95       	dec	r24
     f20:	d1 f7       	brne	.-12     	; 0xf16 <__unpack_f+0xd4>
     f22:	70 64       	ori	r23, 0x40	; 64
     f24:	14 96       	adiw	r26, 0x04	; 4
     f26:	4d 93       	st	X+, r20
     f28:	5d 93       	st	X+, r21
     f2a:	6d 93       	st	X+, r22
     f2c:	7c 93       	st	X, r23
     f2e:	17 97       	sbiw	r26, 0x07	; 7
     f30:	08 95       	ret

00000f32 <__fpcmp_parts_f>:
     f32:	1f 93       	push	r17
     f34:	dc 01       	movw	r26, r24
     f36:	fb 01       	movw	r30, r22
     f38:	9c 91       	ld	r25, X
     f3a:	92 30       	cpi	r25, 0x02	; 2
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <__fpcmp_parts_f+0xe>
     f3e:	47 c0       	rjmp	.+142    	; 0xfce <__fpcmp_parts_f+0x9c>
     f40:	80 81       	ld	r24, Z
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	08 f4       	brcc	.+2      	; 0xf48 <__fpcmp_parts_f+0x16>
     f46:	43 c0       	rjmp	.+134    	; 0xfce <__fpcmp_parts_f+0x9c>
     f48:	94 30       	cpi	r25, 0x04	; 4
     f4a:	51 f4       	brne	.+20     	; 0xf60 <__fpcmp_parts_f+0x2e>
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	1c 91       	ld	r17, X
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	99 f5       	brne	.+102    	; 0xfba <__fpcmp_parts_f+0x88>
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	68 2f       	mov	r22, r24
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	61 1b       	sub	r22, r17
     f5c:	71 09       	sbc	r23, r1
     f5e:	3f c0       	rjmp	.+126    	; 0xfde <__fpcmp_parts_f+0xac>
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	21 f0       	breq	.+8      	; 0xf6c <__fpcmp_parts_f+0x3a>
     f64:	92 30       	cpi	r25, 0x02	; 2
     f66:	31 f4       	brne	.+12     	; 0xf74 <__fpcmp_parts_f+0x42>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	b9 f1       	breq	.+110    	; 0xfda <__fpcmp_parts_f+0xa8>
     f6c:	81 81       	ldd	r24, Z+1	; 0x01
     f6e:	88 23       	and	r24, r24
     f70:	89 f1       	breq	.+98     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     f72:	2d c0       	rjmp	.+90     	; 0xfce <__fpcmp_parts_f+0x9c>
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	1c 91       	ld	r17, X
     f78:	11 97       	sbiw	r26, 0x01	; 1
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	f1 f0       	breq	.+60     	; 0xfba <__fpcmp_parts_f+0x88>
     f7e:	81 81       	ldd	r24, Z+1	; 0x01
     f80:	18 17       	cp	r17, r24
     f82:	d9 f4       	brne	.+54     	; 0xfba <__fpcmp_parts_f+0x88>
     f84:	12 96       	adiw	r26, 0x02	; 2
     f86:	2d 91       	ld	r18, X+
     f88:	3c 91       	ld	r19, X
     f8a:	13 97       	sbiw	r26, 0x03	; 3
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	82 17       	cp	r24, r18
     f92:	93 07       	cpc	r25, r19
     f94:	94 f0       	brlt	.+36     	; 0xfba <__fpcmp_parts_f+0x88>
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	bc f0       	brlt	.+46     	; 0xfca <__fpcmp_parts_f+0x98>
     f9c:	14 96       	adiw	r26, 0x04	; 4
     f9e:	8d 91       	ld	r24, X+
     fa0:	9d 91       	ld	r25, X+
     fa2:	0d 90       	ld	r0, X+
     fa4:	bc 91       	ld	r27, X
     fa6:	a0 2d       	mov	r26, r0
     fa8:	24 81       	ldd	r18, Z+4	; 0x04
     faa:	35 81       	ldd	r19, Z+5	; 0x05
     fac:	46 81       	ldd	r20, Z+6	; 0x06
     fae:	57 81       	ldd	r21, Z+7	; 0x07
     fb0:	28 17       	cp	r18, r24
     fb2:	39 07       	cpc	r19, r25
     fb4:	4a 07       	cpc	r20, r26
     fb6:	5b 07       	cpc	r21, r27
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <__fpcmp_parts_f+0x8e>
     fba:	11 23       	and	r17, r17
     fbc:	41 f0       	breq	.+16     	; 0xfce <__fpcmp_parts_f+0x9c>
     fbe:	0a c0       	rjmp	.+20     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fc0:	82 17       	cp	r24, r18
     fc2:	93 07       	cpc	r25, r19
     fc4:	a4 07       	cpc	r26, r20
     fc6:	b5 07       	cpc	r27, r21
     fc8:	40 f4       	brcc	.+16     	; 0xfda <__fpcmp_parts_f+0xa8>
     fca:	11 23       	and	r17, r17
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <__fpcmp_parts_f+0xac>
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
     fd6:	7f ef       	ldi	r23, 0xFF	; 255
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <__fpcmp_parts_f+0xac>
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	cb 01       	movw	r24, r22
     fe0:	1f 91       	pop	r17
     fe2:	08 95       	ret

00000fe4 <M_UART_Void_UARTWriteCharacter>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_UART_Void_UARTWriteCharacter(u8 Copy_U8_Data)
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
     fe4:	8c b9       	out	0x0c, r24	; 12
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
	while(Local_U32_Counter < UART_POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(UCSRA_REG,TXC_BIT) == UART_FINISHED_TRANSMITTING)
     fee:	eb e2       	ldi	r30, 0x2B	; 43
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	86 fd       	sbrc	r24, 6
     ff6:	0c c0       	rjmp	.+24     	; 0x1010 <M_UART_Void_UARTWriteCharacter+0x2c>
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
	while(Local_U32_Counter < UART_POLLING_TIME)
	{
		Local_U32_Counter++;
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	4f 4f       	sbci	r20, 0xFF	; 255
     ffe:	5f 4f       	sbci	r21, 0xFF	; 255
/*--------------------------------------------------------------------------------------------*/
void M_UART_Void_UARTWriteCharacter(u8 Copy_U8_Data)
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
	while(Local_U32_Counter < UART_POLLING_TIME)
    1000:	20 38       	cpi	r18, 0x80	; 128
    1002:	84 e8       	ldi	r24, 0x84	; 132
    1004:	38 07       	cpc	r19, r24
    1006:	8e e1       	ldi	r24, 0x1E	; 30
    1008:	48 07       	cpc	r20, r24
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	58 07       	cpc	r21, r24
    100e:	89 f7       	brne	.-30     	; 0xff2 <M_UART_Void_UARTWriteCharacter+0xe>
    1010:	08 95       	ret

00001012 <M_UART_U8_UARTReadCharacter>:
/*------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_UART_U8_UARTReadCharacter(void)
{
	while(GET_BIT(UCSRA_REG,RXC_BIT) == 0);
    1012:	eb e2       	ldi	r30, 0x2B	; 43
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	88 23       	and	r24, r24
    101a:	ec f7       	brge	.-6      	; 0x1016 <M_UART_U8_UARTReadCharacter+0x4>
	return UDR_REG;
    101c:	8c b1       	in	r24, 0x0c	; 12
}
    101e:	08 95       	ret

00001020 <M_UART_Void_UARTInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_UART_Void_UARTInit(void)
{
	M_DIO_Void_SetPinDirection(PD0_PIN,INPUT);
    1020:	88 e2       	ldi	r24, 0x28	; 40
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PD1_PIN,OUTPUT);
    1028:	89 e2       	ldi	r24, 0x29	; 41
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	/*   TO SELECT BAUD RATE   */
	UBRRL_REG = ((F_OSC * 1000000) / ((u32)16 * UART_BAUD_RATE)) - 1 ;
    1030:	87 e0       	ldi	r24, 0x07	; 7
    1032:	89 b9       	out	0x09, r24	; 9
#if   UART_PARITY_MODE   ==   PARITY_DISABLE
	CLR_BIT(UCSRC_REG,UPM0_BIT);
    1034:	e0 e4       	ldi	r30, 0x40	; 64
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8f 7e       	andi	r24, 0xEF	; 239
    103c:	80 83       	st	Z, r24
	CLR_BIT(UCSRC_REG,UPM1_BIT);
    103e:	80 81       	ld	r24, Z
    1040:	8f 7d       	andi	r24, 0xDF	; 223
    1042:	80 83       	st	Z, r24
#elif UART_PARITY_MODE   ==   PARITY_ODD
	SET_BIT(UCSRC_REG,UPM0_BIT);
	SET_BIT(UCSRC_REG,UPM1_BIT);
#endif
#if   UART_STOP_BIT   ==   1
	CLR_BIT(UCSRC_REG,USBS_BIT);
    1044:	80 81       	ld	r24, Z
    1046:	87 7f       	andi	r24, 0xF7	; 247
    1048:	80 83       	st	Z, r24
#elif UART_STOP_BIT   ==   2
	SET_BIT(UCSRC_REG,USBS_BIT);
#endif
	/* TO SELECT CHARACTER SIZE -> 8 BITS */
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
    104a:	aa e2       	ldi	r26, 0x2A	; 42
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	8c 91       	ld	r24, X
    1050:	8b 7f       	andi	r24, 0xFB	; 251
    1052:	8c 93       	st	X, r24
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
    1054:	80 81       	ld	r24, Z
    1056:	84 60       	ori	r24, 0x04	; 4
    1058:	80 83       	st	Z, r24
	SET_BIT(UCSRC_REG,UCSZ0_BIT);
    105a:	80 81       	ld	r24, Z
    105c:	82 60       	ori	r24, 0x02	; 2
    105e:	80 83       	st	Z, r24

	/* TO ENABLE RX CIRCUIT */
	SET_BIT(UCSRB_REG,RXEN_BIT);
    1060:	8c 91       	ld	r24, X
    1062:	80 61       	ori	r24, 0x10	; 16
    1064:	8c 93       	st	X, r24
	/* TO ENABLE TX CIRCUIT */
	SET_BIT(UCSRB_REG,TXEN_BIT);
    1066:	8c 91       	ld	r24, X
    1068:	88 60       	ori	r24, 0x08	; 8
    106a:	8c 93       	st	X, r24
}
    106c:	08 95       	ret

0000106e <M_Timer_Void_TimerInit>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerInit(void)
{
#if   TIMER0_MODE   ==   NORMAL_MODE
	CLR_BIT(TCCR0_REG,WGM00_BIT);
    106e:	e3 e5       	ldi	r30, 0x53	; 83
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8f 7b       	andi	r24, 0xBF	; 191
    1076:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_REG,WGM01_BIT);
    1078:	80 81       	ld	r24, Z
    107a:	87 7f       	andi	r24, 0xF7	; 247
    107c:	80 83       	st	Z, r24
	/* TO ENABLE TIMER0 OV INTERRUPT */
	SET_BIT(TIMSK_REG,TOIE0_BIT);
    107e:	e9 e5       	ldi	r30, 0x59	; 89
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	81 60       	ori	r24, 0x01	; 1
    1086:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_REG,WGM00_BIT);
	SET_BIT(TCCR0_REG,WGM01_BIT);
	/* TO ENABLE TIMER0 CM INTERRUPT */
	SET_BIT(TIMSK_REG,OCIE0_BIT);
#endif
}
    1088:	08 95       	ret

0000108a <M_Timer_Void_Timer2_Init>:
//////////////////////////////////////////////////////////////////////////////////////////////////
void M_Timer_Void_Timer2_Init(void)
{
#if   TIMER2_MODE   ==   NORMAL_MODE
	CLR_BIT(TCCR2_REG,WGM20_BIT);
    108a:	e5 e4       	ldi	r30, 0x45	; 69
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8f 7b       	andi	r24, 0xBF	; 191
    1092:	80 83       	st	Z, r24
	CLR_BIT(TCCR2_REG,WGM21_BIT);
    1094:	80 81       	ld	r24, Z
    1096:	87 7f       	andi	r24, 0xF7	; 247
    1098:	80 83       	st	Z, r24
	/* TO ENABLE TIMER0 OV INTERRUPT */
	SET_BIT(TIMSK_REG,TOIE2_BIT);
    109a:	e9 e5       	ldi	r30, 0x59	; 89
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	80 64       	ori	r24, 0x40	; 64
    10a2:	80 83       	st	Z, r24
	CLR_BIT(TCCR2_REG,WGM20_BIT);
	SET_BIT(TCCR2_REG,WGM21_BIT);
	/* TO ENABLE TIMER0 CM INTERRUPT */
	SET_BIT(TIMSK_REG,OCIE2_BIT);
#endif
}
    10a4:	08 95       	ret

000010a6 <M_Timer_Void_Timer2_SetTime>:

void M_Timer_Void_Timer2_SetTime(u32 Copy_U32_DesiredTime)
{
	u32 Local_U32_TickTime2   = TIMER2_PRESCALER_DF / F_OSC; /* RESULT WILL BE IN MICRO SECONDS */
	u32 Local_U32_TotalTicks2 = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime2;
    10a6:	28 ee       	ldi	r18, 0xE8	; 232
    10a8:	33 e0       	ldi	r19, 0x03	; 3
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	0e 94 76 17 	call	0x2eec	; 0x2eec <__mulsi3>
    10b2:	68 94       	set
    10b4:	15 f8       	bld	r1, 5
    10b6:	96 95       	lsr	r25
    10b8:	87 95       	ror	r24
    10ba:	77 95       	ror	r23
    10bc:	67 95       	ror	r22
    10be:	16 94       	lsr	r1
    10c0:	d1 f7       	brne	.-12     	; 0x10b6 <M_Timer_Void_Timer2_SetTime+0x10>

#if   TIMER2_MODE   ==   NORMAL_MODE
	Timer_U32_NumOfOV2        = Local_U32_TotalTicks2 / 256;
    10c2:	27 2f       	mov	r18, r23
    10c4:	38 2f       	mov	r19, r24
    10c6:	49 2f       	mov	r20, r25
    10c8:	55 27       	eor	r21, r21
    10ca:	20 93 03 02 	sts	0x0203, r18
    10ce:	30 93 04 02 	sts	0x0204, r19
    10d2:	40 93 05 02 	sts	0x0205, r20
    10d6:	50 93 06 02 	sts	0x0206, r21
	Timer_U8_RemTicks2        = Local_U32_TotalTicks2 % 256;
    10da:	86 2f       	mov	r24, r22
    10dc:	60 93 0b 02 	sts	0x020B, r22
	if(Timer_U8_RemTicks2 != 0)
    10e0:	66 23       	and	r22, r22
    10e2:	79 f0       	breq	.+30     	; 0x1102 <M_Timer_Void_Timer2_SetTime+0x5c>
	{
		TCNT2_REG = 256 - Timer_U8_RemTicks2;
    10e4:	81 95       	neg	r24
    10e6:	84 bd       	out	0x24, r24	; 36
		Timer_U32_NumOfOV2++;
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	a1 1d       	adc	r26, r1
    10f0:	b1 1d       	adc	r27, r1
    10f2:	80 93 03 02 	sts	0x0203, r24
    10f6:	90 93 04 02 	sts	0x0204, r25
    10fa:	a0 93 05 02 	sts	0x0205, r26
    10fe:	b0 93 06 02 	sts	0x0206, r27
    1102:	08 95       	ret

00001104 <M_Timer_Void_TimerStart2>:
}

void M_Timer_Void_TimerStart2(void)
{
#if   TIMER2_PRESCALER_DF   ==   1024
	SET_BIT(TCCR2_REG,CS20_BIT);
    1104:	e5 e4       	ldi	r30, 0x45	; 69
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	81 60       	ori	r24, 0x01	; 1
    110c:	80 83       	st	Z, r24
	SET_BIT(TCCR2_REG,CS21_BIT);
    110e:	80 81       	ld	r24, Z
    1110:	82 60       	ori	r24, 0x02	; 2
    1112:	80 83       	st	Z, r24
	SET_BIT(TCCR2_REG,CS22_BIT);
    1114:	80 81       	ld	r24, Z
    1116:	84 60       	ori	r24, 0x04	; 4
    1118:	80 83       	st	Z, r24
#elif TIMER0_PRESCALER_DF   ==   256
	CLR_BIT(TCCR2_REG,CS20_BIT);
	CLR_BIT(TCCR2_REG,CS21_BIT);
	SET_BIT(TCCR2_REG,CS22_BIT);
#endif
}
    111a:	08 95       	ret

0000111c <M_Timer_Void_TimerStop2>:

void M_Timer_Void_TimerStop2(void)
{
		CLR_BIT(TCCR2_REG,CS20_BIT);
    111c:	e5 e4       	ldi	r30, 0x45	; 69
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8e 7f       	andi	r24, 0xFE	; 254
    1124:	80 83       	st	Z, r24
		CLR_BIT(TCCR2_REG,CS21_BIT);
    1126:	80 81       	ld	r24, Z
    1128:	8d 7f       	andi	r24, 0xFD	; 253
    112a:	80 83       	st	Z, r24
		CLR_BIT(TCCR2_REG,CS22_BIT);
    112c:	80 81       	ld	r24, Z
    112e:	8b 7f       	andi	r24, 0xFB	; 251
    1130:	80 83       	st	Z, r24
}
    1132:	08 95       	ret

00001134 <M_Timer_Void_TimerSetTime>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerSetTime(u32 Copy_U32_DesiredTime)
{
	u32 Local_U32_TickTime   = TIMER0_PRESCALER_DF / F_OSC; /* RESULT WILL BE IN MICRO SECONDS */
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
    1134:	28 ee       	ldi	r18, 0xE8	; 232
    1136:	33 e0       	ldi	r19, 0x03	; 3
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	0e 94 76 17 	call	0x2eec	; 0x2eec <__mulsi3>
    1140:	68 94       	set
    1142:	15 f8       	bld	r1, 5
    1144:	96 95       	lsr	r25
    1146:	87 95       	ror	r24
    1148:	77 95       	ror	r23
    114a:	67 95       	ror	r22
    114c:	16 94       	lsr	r1
    114e:	d1 f7       	brne	.-12     	; 0x1144 <M_Timer_Void_TimerSetTime+0x10>

#if   TIMER0_MODE   ==   NORMAL_MODE
	Timer_U32_NumOfOV        = Local_U32_TotalTicks / 256;
    1150:	27 2f       	mov	r18, r23
    1152:	38 2f       	mov	r19, r24
    1154:	49 2f       	mov	r20, r25
    1156:	55 27       	eor	r21, r21
    1158:	20 93 fa 01 	sts	0x01FA, r18
    115c:	30 93 fb 01 	sts	0x01FB, r19
    1160:	40 93 fc 01 	sts	0x01FC, r20
    1164:	50 93 fd 01 	sts	0x01FD, r21
	Timer_U8_RemTicks        = Local_U32_TotalTicks % 256;
    1168:	86 2f       	mov	r24, r22
    116a:	60 93 02 02 	sts	0x0202, r22
	if(Timer_U8_RemTicks != 0)
    116e:	66 23       	and	r22, r22
    1170:	79 f0       	breq	.+30     	; 0x1190 <M_Timer_Void_TimerSetTime+0x5c>
	{
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    1172:	81 95       	neg	r24
    1174:	82 bf       	out	0x32, r24	; 50
		Timer_U32_NumOfOV++;
    1176:	da 01       	movw	r26, r20
    1178:	c9 01       	movw	r24, r18
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	a1 1d       	adc	r26, r1
    117e:	b1 1d       	adc	r27, r1
    1180:	80 93 fa 01 	sts	0x01FA, r24
    1184:	90 93 fb 01 	sts	0x01FB, r25
    1188:	a0 93 fc 01 	sts	0x01FC, r26
    118c:	b0 93 fd 01 	sts	0x01FD, r27
    1190:	08 95       	ret

00001192 <M_Timer_Void_TimerStart>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
    1192:	88 23       	and	r24, r24
    1194:	19 f0       	breq	.+6      	; 0x119c <M_Timer_Void_TimerStart+0xa>
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	c1 f4       	brne	.+48     	; 0x11ca <M_Timer_Void_TimerStart+0x38>
    119a:	0c c0       	rjmp	.+24     	; 0x11b4 <M_Timer_Void_TimerStart+0x22>
	{
	case TIMER0_CHANNEL:
#if   TIMER0_PRESCALER_DF   ==   1024
	SET_BIT(TCCR0_REG,CS00_BIT);
    119c:	e3 e5       	ldi	r30, 0x53	; 83
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	81 60       	ori	r24, 0x01	; 1
    11a4:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_REG,CS01_BIT);
    11a6:	80 81       	ld	r24, Z
    11a8:	8d 7f       	andi	r24, 0xFD	; 253
    11aa:	80 83       	st	Z, r24
	SET_BIT(TCCR0_REG,CS02_BIT);
    11ac:	80 81       	ld	r24, Z
    11ae:	84 60       	ori	r24, 0x04	; 4
    11b0:	80 83       	st	Z, r24
    11b2:	08 95       	ret
	SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
#if   TIMER1_PRESCALER_DF   ==   1024
		SET_BIT(TCCR1B_REG,CS10_BIT);
    11b4:	ee e4       	ldi	r30, 0x4E	; 78
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	81 60       	ori	r24, 0x01	; 1
    11bc:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    11be:	80 81       	ld	r24, Z
    11c0:	8d 7f       	andi	r24, 0xFD	; 253
    11c2:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
    11c4:	80 81       	ld	r24, Z
    11c6:	84 60       	ori	r24, 0x04	; 4
    11c8:	80 83       	st	Z, r24
    11ca:	08 95       	ret

000011cc <M_Timer_Void_TimerStop>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
    11cc:	88 23       	and	r24, r24
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <M_Timer_Void_TimerStop+0xa>
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	c1 f4       	brne	.+48     	; 0x1204 <M_Timer_Void_TimerStop+0x38>
    11d4:	0c c0       	rjmp	.+24     	; 0x11ee <M_Timer_Void_TimerStop+0x22>
	{
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG,CS00_BIT);
    11d6:	e3 e5       	ldi	r30, 0x53	; 83
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	8e 7f       	andi	r24, 0xFE	; 254
    11de:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
    11e0:	80 81       	ld	r24, Z
    11e2:	8d 7f       	andi	r24, 0xFD	; 253
    11e4:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
    11e6:	80 81       	ld	r24, Z
    11e8:	8b 7f       	andi	r24, 0xFB	; 251
    11ea:	80 83       	st	Z, r24
    11ec:	08 95       	ret

		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    11ee:	ee e4       	ldi	r30, 0x4E	; 78
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	8e 7f       	andi	r24, 0xFE	; 254
    11f6:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    11f8:	80 81       	ld	r24, Z
    11fa:	8d 7f       	andi	r24, 0xFD	; 253
    11fc:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
    11fe:	80 81       	ld	r24, Z
    1200:	8b 7f       	andi	r24, 0xFB	; 251
    1202:	80 83       	st	Z, r24
    1204:	08 95       	ret

00001206 <M_Timer_Void_PWMSetDutyCycle>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	7a 01       	movw	r14, r20
    1210:	8b 01       	movw	r16, r22
	switch(Copy_U8_TimerChannel)
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	d1 f4       	brne	.+52     	; 0x124a <M_Timer_Void_PWMSetDutyCycle+0x44>
	OCR0_REG = ((Copy_F32_DutyCycle * 255 ) / 100);
#endif

		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG ) / 100) - 1;
    1216:	66 b5       	in	r22, 0x26	; 38
    1218:	77 b5       	in	r23, 0x27	; 39
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    1222:	a8 01       	movw	r20, r16
    1224:	97 01       	movw	r18, r14
    1226:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	48 ec       	ldi	r20, 0xC8	; 200
    1230:	52 e4       	ldi	r21, 0x42	; 66
    1232:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5f e3       	ldi	r21, 0x3F	; 63
    123e:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    1242:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1246:	7b bd       	out	0x2b, r23	; 43
    1248:	6a bd       	out	0x2a, r22	; 42
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	08 95       	ret

00001254 <M_Timer_Void_PWMStart>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
    1254:	0e 94 c9 08 	call	0x1192	; 0x1192 <M_Timer_Void_TimerStart>
}
    1258:	08 95       	ret

0000125a <M_Timer_Void_PWMStop>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
    125a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <M_Timer_Void_TimerStop>
}
    125e:	08 95       	ret

00001260 <M_Timer_Void_SetCallBack>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_SetCallBack(void(*Copy_Ptr)(void))
{
	Timer_CallBack = Copy_Ptr;
    1260:	90 93 2c 02 	sts	0x022C, r25
    1264:	80 93 2b 02 	sts	0x022B, r24
}
    1268:	08 95       	ret

0000126a <M_Timer_Void_SetCallBack2>:

void M_Timer_Void_SetCallBack2(void(*Copy_Ptr)(void))
{
	Timer_CallBackk = Copy_Ptr;
    126a:	90 93 2e 02 	sts	0x022E, r25
    126e:	80 93 2d 02 	sts	0x022D, r24
}
    1272:	08 95       	ret

00001274 <__vector_11>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
#if   TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    1296:	80 91 10 02 	lds	r24, 0x0210
    129a:	90 91 11 02 	lds	r25, 0x0211
    129e:	a0 91 12 02 	lds	r26, 0x0212
    12a2:	b0 91 13 02 	lds	r27, 0x0213
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	a1 1d       	adc	r26, r1
    12aa:	b1 1d       	adc	r27, r1
    12ac:	80 93 10 02 	sts	0x0210, r24
    12b0:	90 93 11 02 	sts	0x0211, r25
    12b4:	a0 93 12 02 	sts	0x0212, r26
    12b8:	b0 93 13 02 	sts	0x0213, r27
	if(Local_U32_Counter == Timer_U32_NumOfOV)
    12bc:	20 91 fa 01 	lds	r18, 0x01FA
    12c0:	30 91 fb 01 	lds	r19, 0x01FB
    12c4:	40 91 fc 01 	lds	r20, 0x01FC
    12c8:	50 91 fd 01 	lds	r21, 0x01FD
    12cc:	82 17       	cp	r24, r18
    12ce:	93 07       	cpc	r25, r19
    12d0:	a4 07       	cpc	r26, r20
    12d2:	b5 07       	cpc	r27, r21
    12d4:	89 f4       	brne	.+34     	; 0x12f8 <__vector_11+0x84>
	{
		Timer_CallBack();
    12d6:	e0 91 2b 02 	lds	r30, 0x022B
    12da:	f0 91 2c 02 	lds	r31, 0x022C
    12de:	09 95       	icall
		Local_U32_Counter = 0;
    12e0:	10 92 10 02 	sts	0x0210, r1
    12e4:	10 92 11 02 	sts	0x0211, r1
    12e8:	10 92 12 02 	sts	0x0212, r1
    12ec:	10 92 13 02 	sts	0x0213, r1
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    12f0:	80 91 02 02 	lds	r24, 0x0202
    12f4:	81 95       	neg	r24
    12f6:	82 bf       	out	0x32, r24	; 50
	}
}
    12f8:	ff 91       	pop	r31
    12fa:	ef 91       	pop	r30
    12fc:	bf 91       	pop	r27
    12fe:	af 91       	pop	r26
    1300:	9f 91       	pop	r25
    1302:	8f 91       	pop	r24
    1304:	7f 91       	pop	r23
    1306:	6f 91       	pop	r22
    1308:	5f 91       	pop	r21
    130a:	4f 91       	pop	r20
    130c:	3f 91       	pop	r19
    130e:	2f 91       	pop	r18
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_5>:



#if   TIMER2_MODE   ==   NORMAL_MODE
ISR(TIMER2_OVF_vect)
{
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 93       	push	r18
    1326:	3f 93       	push	r19
    1328:	4f 93       	push	r20
    132a:	5f 93       	push	r21
    132c:	6f 93       	push	r22
    132e:	7f 93       	push	r23
    1330:	8f 93       	push	r24
    1332:	9f 93       	push	r25
    1334:	af 93       	push	r26
    1336:	bf 93       	push	r27
    1338:	ef 93       	push	r30
    133a:	ff 93       	push	r31
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    133c:	80 91 0c 02 	lds	r24, 0x020C
    1340:	90 91 0d 02 	lds	r25, 0x020D
    1344:	a0 91 0e 02 	lds	r26, 0x020E
    1348:	b0 91 0f 02 	lds	r27, 0x020F
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	a1 1d       	adc	r26, r1
    1350:	b1 1d       	adc	r27, r1
    1352:	80 93 0c 02 	sts	0x020C, r24
    1356:	90 93 0d 02 	sts	0x020D, r25
    135a:	a0 93 0e 02 	sts	0x020E, r26
    135e:	b0 93 0f 02 	sts	0x020F, r27
	if(Local_U32_Counter == Timer_U32_NumOfOV2)
    1362:	20 91 03 02 	lds	r18, 0x0203
    1366:	30 91 04 02 	lds	r19, 0x0204
    136a:	40 91 05 02 	lds	r20, 0x0205
    136e:	50 91 06 02 	lds	r21, 0x0206
    1372:	82 17       	cp	r24, r18
    1374:	93 07       	cpc	r25, r19
    1376:	a4 07       	cpc	r26, r20
    1378:	b5 07       	cpc	r27, r21
    137a:	89 f4       	brne	.+34     	; 0x139e <__vector_5+0x84>
	{
		Timer_CallBackk();
    137c:	e0 91 2d 02 	lds	r30, 0x022D
    1380:	f0 91 2e 02 	lds	r31, 0x022E
    1384:	09 95       	icall
		Local_U32_Counter = 0;
    1386:	10 92 0c 02 	sts	0x020C, r1
    138a:	10 92 0d 02 	sts	0x020D, r1
    138e:	10 92 0e 02 	sts	0x020E, r1
    1392:	10 92 0f 02 	sts	0x020F, r1
		TCNT2_REG = 256 - Timer_U8_RemTicks2;
    1396:	80 91 0b 02 	lds	r24, 0x020B
    139a:	81 95       	neg	r24
    139c:	84 bd       	out	0x24, r24	; 36
	}
}
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	0f 90       	pop	r0
    13bc:	1f 90       	pop	r1
    13be:	18 95       	reti

000013c0 <M_Timer_Void_PWMInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
    13c0:	88 23       	and	r24, r24
    13c2:	19 f0       	breq	.+6      	; 0x13ca <M_Timer_Void_PWMInit+0xa>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	61 f5       	brne	.+88     	; 0x1420 <M_Timer_Void_PWMInit+0x60>
    13c8:	0d c0       	rjmp	.+26     	; 0x13e4 <M_Timer_Void_PWMInit+0x24>
	{
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
    13ca:	87 e1       	ldi	r24, 0x17	; 23
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	#elif TIMER0_MODE   ==   PHASE_CORRECT_PWM_MODE
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
	#endif
	#if   TIMER0_FAST_PWM_MODE   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
    13d2:	e3 e5       	ldi	r30, 0x53	; 83
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8f 7e       	andi	r24, 0xEF	; 239
    13da:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
    13dc:	80 81       	ld	r24, Z
    13de:	80 62       	ori	r24, 0x20	; 32
    13e0:	80 83       	st	Z, r24
    13e2:	08 95       	ret
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
	#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
    13e4:	8d e2       	ldi	r24, 0x2D	; 45
    13e6:	61 e0       	ldi	r22, 0x01	; 1
    13e8:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NO. 14 IN TABLE 47 */
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
    13ec:	af e4       	ldi	r26, 0x4F	; 79
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	8c 91       	ld	r24, X
    13f2:	8e 7f       	andi	r24, 0xFE	; 254
    13f4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    13f6:	8c 91       	ld	r24, X
    13f8:	82 60       	ori	r24, 0x02	; 2
    13fa:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    13fc:	ee e4       	ldi	r30, 0x4E	; 78
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	88 60       	ori	r24, 0x08	; 8
    1404:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    1406:	80 81       	ld	r24, Z
    1408:	80 61       	ori	r24, 0x10	; 16
    140a:	80 83       	st	Z, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
    140c:	8c 91       	ld	r24, X
    140e:	8f 7b       	andi	r24, 0xBF	; 191
    1410:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    1412:	8c 91       	ld	r24, X
    1414:	80 68       	ori	r24, 0x80	; 128
    1416:	8c 93       	st	X, r24
		ICR1_REG = ((F_OSC * 1000000) / TIMER1_PRESCALER_DF) / F_PWM1;
    1418:	84 e0       	ldi	r24, 0x04	; 4
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	97 bd       	out	0x27, r25	; 39
    141e:	86 bd       	out	0x26, r24	; 38
    1420:	08 95       	ret

00001422 <UtralSonic_RISING_edge>:
	M_DIO_Void_SetPinValue(PA1_PIN, HIGH);
	_delay_us(10);
	M_DIO_Void_SetPinValue(PA1_PIN, LOW);

}
void UtralSonic_RISING_edge(u32 *flag_count_rising){
    1422:	9c 01       	movw	r18, r24

	TCNT1_REG = 0x00;
    1424:	1c bc       	out	0x2c, r1	; 44
	TCCR1B_REG = 0x41;
    1426:	81 e4       	ldi	r24, 0x41	; 65
    1428:	8e bd       	out	0x2e, r24	; 46
	TIFR_REG = 1 << 5;
    142a:	e8 e5       	ldi	r30, 0x58	; 88
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 e2       	ldi	r24, 0x20	; 32
    1430:	80 83       	st	Z, r24
	TIFR_REG = 1 << 2;
    1432:	84 e0       	ldi	r24, 0x04	; 4
    1434:	80 83       	st	Z, r24
	//SET_BIT(TIFR_REG,5);
	//SET_BIT(TIFR_REG,2);
	while ((GET_BIT(TIFR_REG,5) == 0)&&(flag_count_rising<=200000000)){
    1436:	80 81       	ld	r24, Z
    1438:	82 95       	swap	r24
    143a:	86 95       	lsr	r24
    143c:	87 70       	andi	r24, 0x07	; 7
    143e:	80 fd       	sbrc	r24, 0
    1440:	0d c0       	rjmp	.+26     	; 0x145c <UtralSonic_RISING_edge+0x3a>
    1442:	82 ec       	ldi	r24, 0xC2	; 194
    1444:	21 30       	cpi	r18, 0x01	; 1
    1446:	38 07       	cpc	r19, r24
    1448:	48 f4       	brcc	.+18     	; 0x145c <UtralSonic_RISING_edge+0x3a>
    144a:	80 81       	ld	r24, Z
    144c:	85 fd       	sbrc	r24, 5
    144e:	06 c0       	rjmp	.+12     	; 0x145c <UtralSonic_RISING_edge+0x3a>
		flag_count_rising++;
    1450:	2c 5f       	subi	r18, 0xFC	; 252
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
	TCCR1B_REG = 0x41;
	TIFR_REG = 1 << 5;
	TIFR_REG = 1 << 2;
	//SET_BIT(TIFR_REG,5);
	//SET_BIT(TIFR_REG,2);
	while ((GET_BIT(TIFR_REG,5) == 0)&&(flag_count_rising<=200000000)){
    1454:	82 ec       	ldi	r24, 0xC2	; 194
    1456:	21 30       	cpi	r18, 0x01	; 1
    1458:	38 07       	cpc	r19, r24
    145a:	b8 f3       	brcs	.-18     	; 0x144a <UtralSonic_RISING_edge+0x28>
    145c:	08 95       	ret

0000145e <UtralSonic_FAILING_edge>:
		flag_count_rising++;
	}

}
void UtralSonic_FAILING_edge(u32 *flag_count_falling){
    145e:	9c 01       	movw	r18, r24

	TCNT1 = 0; /* Clear Timer counter */
    1460:	1d bc       	out	0x2d, r1	; 45
    1462:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x01; /* Capture on falling edge, No prescaler */
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
    1468:	e8 e5       	ldi	r30, 0x58	; 88
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 e2       	ldi	r24, 0x20	; 32
    146e:	80 83       	st	Z, r24
	TIFR = 1 << TOV1; /* Clear Timer Overflow flag */
    1470:	84 e0       	ldi	r24, 0x04	; 4
    1472:	80 83       	st	Z, r24

	while ( ( (TIFR & (1 << ICF1) ) == 0)&& (flag_count_falling<=200000000)){
    1474:	80 81       	ld	r24, Z
    1476:	85 fd       	sbrc	r24, 5
    1478:	0d c0       	rjmp	.+26     	; 0x1494 <UtralSonic_FAILING_edge+0x36>
    147a:	82 ec       	ldi	r24, 0xC2	; 194
    147c:	21 30       	cpi	r18, 0x01	; 1
    147e:	38 07       	cpc	r19, r24
    1480:	48 f4       	brcc	.+18     	; 0x1494 <UtralSonic_FAILING_edge+0x36>
    1482:	80 81       	ld	r24, Z
    1484:	85 fd       	sbrc	r24, 5
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <UtralSonic_FAILING_edge+0x36>
		flag_count_falling++;
    1488:	2c 5f       	subi	r18, 0xFC	; 252
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0; /* Clear Timer counter */
	TCCR1B = 0x01; /* Capture on falling edge, No prescaler */
	TIFR = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
	TIFR = 1 << TOV1; /* Clear Timer Overflow flag */

	while ( ( (TIFR & (1 << ICF1) ) == 0)&& (flag_count_falling<=200000000)){
    148c:	82 ec       	ldi	r24, 0xC2	; 194
    148e:	21 30       	cpi	r18, 0x01	; 1
    1490:	38 07       	cpc	r19, r24
    1492:	b8 f3       	brcs	.-18     	; 0x1482 <UtralSonic_FAILING_edge+0x24>
    1494:	08 95       	ret

00001496 <Ultra_get_dis>:


}*/


double Ultra_get_dis(u32 over){
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
long local_count;
double local_dis;
local_count = ICR1_REG + (65535 * over);
    149e:	e6 b4       	in	r14, 0x26	; 38
    14a0:	f7 b4       	in	r15, 0x27	; 39
    14a2:	2f ef       	ldi	r18, 0xFF	; 255
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	0e 94 76 17 	call	0x2eec	; 0x2eec <__mulsi3>
    14ae:	00 e0       	ldi	r16, 0x00	; 0
    14b0:	10 e0       	ldi	r17, 0x00	; 0
    14b2:	6e 0d       	add	r22, r14
    14b4:	7f 1d       	adc	r23, r15
    14b6:	80 1f       	adc	r24, r16
    14b8:	91 1f       	adc	r25, r17
    14ba:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e4       	ldi	r19, 0x40	; 64
    14c2:	49 e6       	ldi	r20, 0x69	; 105
    14c4:	54 e4       	ldi	r21, 0x44	; 68
    14c6:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
local_dis = (((double) local_count) / 933.0);
return local_dis;
}
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	ff 90       	pop	r15
    14d0:	ef 90       	pop	r14
    14d2:	08 95       	ret

000014d4 <UtralSonic_trig>:

/*
 * Description: Function to set the Call Back function address.
 */
void UtralSonic_trig(void){
	M_DIO_Void_SetPinValue(PA1_PIN, HIGH);
    14d4:	8b e0       	ldi	r24, 0x0B	; 11
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	8a 95       	dec	r24
    14e0:	f1 f7       	brne	.-4      	; 0x14de <UtralSonic_trig+0xa>
	_delay_us(10);
	M_DIO_Void_SetPinValue(PA1_PIN, LOW);
    14e2:	8b e0       	ldi	r24, 0x0B	; 11
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>

}
    14ea:	08 95       	ret

000014ec <Icu_init>:
#include "ICU_Private.h"
#include <avr/io.h>

void Icu_init(void ){

	M_GIE_Void_GlobalInterruptEnable();
    14ec:	0e 94 01 0b 	call	0x1602	; 0x1602 <M_GIE_Void_GlobalInterruptEnable>
	TIMSK_REG = (1 << 2); /* Enable Timer1 overflow interrupts */
    14f0:	84 e0       	ldi	r24, 0x04	; 4
    14f2:	89 bf       	out	0x39, r24	; 57
	/* Set all bit to zero Normal operation */
	M_DIO_Void_SetPinDirection(PA1_PIN, OUTPUT);
    14f4:	8b e0       	ldi	r24, 0x0B	; 11
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PD6_PIN, INPUT);
    14fc:	8e e2       	ldi	r24, 0x2E	; 46
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	TCCR1A_REG = 0;
    1504:	1f bc       	out	0x2f, r1	; 47
	PORTD_REG = 0xFF;
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	82 bb       	out	0x12, r24	; 18

}
    150a:	08 95       	ret

0000150c <M_I2C_Void_I2CInit>:
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_I2CInit(void)
{

	TWBR_REG = (((I2C_F_CPU * 1000000) / ((u32)I2C_F_SCL * 1000)) - 16) / 2;
    150c:	8c e0       	ldi	r24, 0x0C	; 12
    150e:	80 b9       	out	0x00, r24	; 0

	//TWAR_REG = (I2C_SLAVE_ADDRESS << 1) | I2C_GENERAL_CALL;

	/* TO ENABLE 12C CIRCUIT */
	SET_BIT(TWCR_REG,TWEN_BIT);
    1510:	e6 e5       	ldi	r30, 0x56	; 86
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	84 60       	ori	r24, 0x04	; 4
    1518:	80 83       	st	Z, r24
}
    151a:	08 95       	ret

0000151c <M_I2C_Void_StartCondition>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_StartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA_BIT);
    151c:	e6 e5       	ldi	r30, 0x56	; 86
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 62       	ori	r24, 0x20	; 32
    1524:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    1526:	80 81       	ld	r24, Z
    1528:	80 68       	ori	r24, 0x80	; 128
    152a:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    152c:	80 81       	ld	r24, Z
    152e:	88 23       	and	r24, r24
    1530:	ec f7       	brge	.-6      	; 0x152c <M_I2C_Void_StartCondition+0x10>
	while((TWSR_REG & 0xF8) != I2C_START_CONDITION_HAS_BEEN_TRANSMITTED);
    1532:	e1 e2       	ldi	r30, 0x21	; 33
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	88 7f       	andi	r24, 0xF8	; 248
    153a:	88 30       	cpi	r24, 0x08	; 8
    153c:	e1 f7       	brne	.-8      	; 0x1536 <M_I2C_Void_StartCondition+0x1a>
}
    153e:	08 95       	ret

00001540 <M_I2C_Void_StopCondition>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_StopCondition(void)
{
	SET_BIT(TWCR_REG,TWSTO_BIT);
    1540:	e6 e5       	ldi	r30, 0x56	; 86
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 61       	ori	r24, 0x10	; 16
    1548:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    154a:	80 81       	ld	r24, Z
    154c:	80 68       	ori	r24, 0x80	; 128
    154e:	80 83       	st	Z, r24
}
    1550:	08 95       	ret

00001552 <M_I2C_Void_RepeatedStart>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_RepeatedStart(void)
{
	SET_BIT(TWCR_REG,TWSTA_BIT);
    1552:	e6 e5       	ldi	r30, 0x56	; 86
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	80 62       	ori	r24, 0x20	; 32
    155a:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    155c:	80 81       	ld	r24, Z
    155e:	80 68       	ori	r24, 0x80	; 128
    1560:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1562:	80 81       	ld	r24, Z
    1564:	88 23       	and	r24, r24
    1566:	ec f7       	brge	.-6      	; 0x1562 <M_I2C_Void_RepeatedStart+0x10>
	while((TWSR_REG & 0xF8) != I2C_REPEATED_START_COND);
    1568:	e1 e2       	ldi	r30, 0x21	; 33
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	88 7f       	andi	r24, 0xF8	; 248
    1570:	80 31       	cpi	r24, 0x10	; 16
    1572:	e1 f7       	brne	.-8      	; 0x156c <M_I2C_Void_RepeatedStart+0x1a>
}
    1574:	08 95       	ret

00001576 <M_I2C_Void_SendSlaveAddressWrite>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_SendSlaveAddressWrite(u8 Copy_U8_SlaveAddress)
{
	TWDR_REG = (Copy_U8_SlaveAddress << 1);
    1576:	88 0f       	add	r24, r24
    1578:	83 b9       	out	0x03, r24	; 3
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    157a:	e6 e5       	ldi	r30, 0x56	; 86
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 68       	ori	r24, 0x80	; 128
    1582:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1584:	80 81       	ld	r24, Z
    1586:	88 23       	and	r24, r24
    1588:	ec f7       	brge	.-6      	; 0x1584 <M_I2C_Void_SendSlaveAddressWrite+0xe>
	while((TWSR_REG & 0xF8) != I2C_SEND_SLAVE_ADD_WRITE_ACK_REC);
    158a:	e1 e2       	ldi	r30, 0x21	; 33
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	88 7f       	andi	r24, 0xF8	; 248
    1592:	88 31       	cpi	r24, 0x18	; 24
    1594:	e1 f7       	brne	.-8      	; 0x158e <M_I2C_Void_SendSlaveAddressWrite+0x18>
}
    1596:	08 95       	ret

00001598 <M_I2C_Void_SendSlaveAddressRead>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_SendSlaveAddressRead(u8 Copy_U8_SlaveAddress)
{
	TWDR_REG = (Copy_U8_SlaveAddress << 1) | 0x01;
    1598:	88 0f       	add	r24, r24
    159a:	81 60       	ori	r24, 0x01	; 1
    159c:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG,TWSTA_BIT);
    159e:	e6 e5       	ldi	r30, 0x56	; 86
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 7d       	andi	r24, 0xDF	; 223
    15a6:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    15a8:	80 81       	ld	r24, Z
    15aa:	80 68       	ori	r24, 0x80	; 128
    15ac:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    15ae:	80 81       	ld	r24, Z
    15b0:	88 23       	and	r24, r24
    15b2:	ec f7       	brge	.-6      	; 0x15ae <M_I2C_Void_SendSlaveAddressRead+0x16>
	while((TWSR_REG & 0xF8) != I2C_SEND_SLAVE_ADD_READ_ACK_REC);
    15b4:	e1 e2       	ldi	r30, 0x21	; 33
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	88 7f       	andi	r24, 0xF8	; 248
    15bc:	80 34       	cpi	r24, 0x40	; 64
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <M_I2C_Void_SendSlaveAddressRead+0x20>
}
    15c0:	08 95       	ret

000015c2 <M_I2C_Void_SendByte>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_SendByte(u8 Copy_U8_Data)
{
	TWDR_REG = Copy_U8_Data;
    15c2:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG,TWSTA_BIT);
    15c4:	e6 e5       	ldi	r30, 0x56	; 86
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 7d       	andi	r24, 0xDF	; 223
    15cc:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    15ce:	80 81       	ld	r24, Z
    15d0:	80 68       	ori	r24, 0x80	; 128
    15d2:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    15d4:	80 81       	ld	r24, Z
    15d6:	88 23       	and	r24, r24
    15d8:	ec f7       	brge	.-6      	; 0x15d4 <M_I2C_Void_SendByte+0x12>
	while((TWSR_REG & 0xF8) != I2C_DATA_BYTE_TRANSMITTED_ACK_REC);
    15da:	e1 e2       	ldi	r30, 0x21	; 33
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	88 7f       	andi	r24, 0xF8	; 248
    15e2:	88 32       	cpi	r24, 0x28	; 40
    15e4:	e1 f7       	brne	.-8      	; 0x15de <M_I2C_Void_SendByte+0x1c>
}
    15e6:	08 95       	ret

000015e8 <M_I2C_U8_ReadByte>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   M_I2C_U8_ReadByte(void)
{
	CLR_BIT(TWCR_REG,TWSTA_BIT);
    15e8:	e6 e5       	ldi	r30, 0x56	; 86
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 7d       	andi	r24, 0xDF	; 223
    15f0:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    15f2:	80 81       	ld	r24, Z
    15f4:	80 68       	ori	r24, 0x80	; 128
    15f6:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    15f8:	80 81       	ld	r24, Z
    15fa:	88 23       	and	r24, r24
    15fc:	ec f7       	brge	.-6      	; 0x15f8 <M_I2C_U8_ReadByte+0x10>
	//while((TWSR_REG & 0xF8) != I2C_READ_BYTE);
	return TWDR_REG;
    15fe:	83 b1       	in	r24, 0x03	; 3
}
    1600:	08 95       	ret

00001602 <M_GIE_Void_GlobalInterruptEnable>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_GIE_Void_GlobalInterruptEnable(void)
{
	SET_BIT(SREG_REG,7);
    1602:	ef e5       	ldi	r30, 0x5F	; 95
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	80 68       	ori	r24, 0x80	; 128
    160a:	80 83       	st	Z, r24
}
    160c:	08 95       	ret

0000160e <M_GIE_Void_GlobalInterruptDisable>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_GIE_Void_GlobalInterruptDisable(void)
{
	CLR_BIT(SREG_REG,7);
    160e:	ef e5       	ldi	r30, 0x5F	; 95
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8f 77       	andi	r24, 0x7F	; 127
    1616:	80 83       	st	Z, r24
}
    1618:	08 95       	ret

0000161a <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    161a:	28 2f       	mov	r18, r24
    161c:	36 2f       	mov	r19, r22

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    161e:	6a e0       	ldi	r22, 0x0A	; 10
    1620:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodqi4>
    1624:	49 2f       	mov	r20, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1626:	82 2f       	mov	r24, r18
    1628:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodqi4>
	switch(Copy_U8_State)
    162c:	33 23       	and	r19, r19
    162e:	21 f0       	breq	.+8      	; 0x1638 <M_DIO_Void_SetPinDirection+0x1e>
    1630:	31 30       	cpi	r19, 0x01	; 1
    1632:	09 f0       	breq	.+2      	; 0x1636 <M_DIO_Void_SetPinDirection+0x1c>
    1634:	86 c0       	rjmp	.+268    	; 0x1742 <M_DIO_Void_SetPinDirection+0x128>
    1636:	46 c0       	rjmp	.+140    	; 0x16c4 <M_DIO_Void_SetPinDirection+0xaa>
	{
	case INPUT:
		switch(Local_U8_Group)
    1638:	82 30       	cpi	r24, 0x02	; 2
    163a:	d1 f0       	breq	.+52     	; 0x1670 <M_DIO_Void_SetPinDirection+0x56>
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	20 f4       	brcc	.+8      	; 0x1648 <M_DIO_Void_SetPinDirection+0x2e>
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	09 f0       	breq	.+2      	; 0x1646 <M_DIO_Void_SetPinDirection+0x2c>
    1644:	7e c0       	rjmp	.+252    	; 0x1742 <M_DIO_Void_SetPinDirection+0x128>
    1646:	06 c0       	rjmp	.+12     	; 0x1654 <M_DIO_Void_SetPinDirection+0x3a>
    1648:	83 30       	cpi	r24, 0x03	; 3
    164a:	01 f1       	breq	.+64     	; 0x168c <M_DIO_Void_SetPinDirection+0x72>
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	09 f0       	breq	.+2      	; 0x1652 <M_DIO_Void_SetPinDirection+0x38>
    1650:	78 c0       	rjmp	.+240    	; 0x1742 <M_DIO_Void_SetPinDirection+0x128>
    1652:	2a c0       	rjmp	.+84     	; 0x16a8 <M_DIO_Void_SetPinDirection+0x8e>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    1654:	ea e3       	ldi	r30, 0x3A	; 58
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	20 81       	ld	r18, Z
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <M_DIO_Void_SetPinDirection+0x4a>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	4a 95       	dec	r20
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <M_DIO_Void_SetPinDirection+0x46>
    1668:	80 95       	com	r24
    166a:	82 23       	and	r24, r18
    166c:	80 83       	st	Z, r24
    166e:	08 95       	ret
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    1670:	e7 e3       	ldi	r30, 0x37	; 55
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	20 81       	ld	r18, Z
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <M_DIO_Void_SetPinDirection+0x66>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	4a 95       	dec	r20
    1682:	e2 f7       	brpl	.-8      	; 0x167c <M_DIO_Void_SetPinDirection+0x62>
    1684:	80 95       	com	r24
    1686:	82 23       	and	r24, r18
    1688:	80 83       	st	Z, r24
    168a:	08 95       	ret
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    168c:	e4 e3       	ldi	r30, 0x34	; 52
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	20 81       	ld	r18, Z
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 c0       	rjmp	.+4      	; 0x169c <M_DIO_Void_SetPinDirection+0x82>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	4a 95       	dec	r20
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <M_DIO_Void_SetPinDirection+0x7e>
    16a0:	80 95       	com	r24
    16a2:	82 23       	and	r24, r18
    16a4:	80 83       	st	Z, r24
    16a6:	08 95       	ret
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    16a8:	e1 e3       	ldi	r30, 0x31	; 49
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	20 81       	ld	r18, Z
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <M_DIO_Void_SetPinDirection+0x9e>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	4a 95       	dec	r20
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <M_DIO_Void_SetPinDirection+0x9a>
    16bc:	80 95       	com	r24
    16be:	82 23       	and	r24, r18
    16c0:	80 83       	st	Z, r24
    16c2:	08 95       	ret
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    16c4:	82 30       	cpi	r24, 0x02	; 2
    16c6:	b9 f0       	breq	.+46     	; 0x16f6 <M_DIO_Void_SetPinDirection+0xdc>
    16c8:	83 30       	cpi	r24, 0x03	; 3
    16ca:	18 f4       	brcc	.+6      	; 0x16d2 <M_DIO_Void_SetPinDirection+0xb8>
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	c9 f5       	brne	.+114    	; 0x1742 <M_DIO_Void_SetPinDirection+0x128>
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <M_DIO_Void_SetPinDirection+0xc2>
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	e9 f0       	breq	.+58     	; 0x1710 <M_DIO_Void_SetPinDirection+0xf6>
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	a1 f5       	brne	.+104    	; 0x1742 <M_DIO_Void_SetPinDirection+0x128>
    16da:	27 c0       	rjmp	.+78     	; 0x172a <M_DIO_Void_SetPinDirection+0x110>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    16dc:	ea e3       	ldi	r30, 0x3A	; 58
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	20 81       	ld	r18, Z
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <M_DIO_Void_SetPinDirection+0xd2>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	4a 95       	dec	r20
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <M_DIO_Void_SetPinDirection+0xce>
    16f0:	28 2b       	or	r18, r24
    16f2:	20 83       	st	Z, r18
    16f4:	08 95       	ret
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    16f6:	e7 e3       	ldi	r30, 0x37	; 55
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	20 81       	ld	r18, Z
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <M_DIO_Void_SetPinDirection+0xec>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	4a 95       	dec	r20
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <M_DIO_Void_SetPinDirection+0xe8>
    170a:	28 2b       	or	r18, r24
    170c:	20 83       	st	Z, r18
    170e:	08 95       	ret
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    1710:	e4 e3       	ldi	r30, 0x34	; 52
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	20 81       	ld	r18, Z
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <M_DIO_Void_SetPinDirection+0x106>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	4a 95       	dec	r20
    1722:	e2 f7       	brpl	.-8      	; 0x171c <M_DIO_Void_SetPinDirection+0x102>
    1724:	28 2b       	or	r18, r24
    1726:	20 83       	st	Z, r18
    1728:	08 95       	ret
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    172a:	e1 e3       	ldi	r30, 0x31	; 49
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	20 81       	ld	r18, Z
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <M_DIO_Void_SetPinDirection+0x120>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	4a 95       	dec	r20
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <M_DIO_Void_SetPinDirection+0x11c>
    173e:	28 2b       	or	r18, r24
    1740:	20 83       	st	Z, r18
    1742:	08 95       	ret

00001744 <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1744:	28 2f       	mov	r18, r24
    1746:	36 2f       	mov	r19, r22
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1748:	6a e0       	ldi	r22, 0x0A	; 10
    174a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodqi4>
    174e:	49 2f       	mov	r20, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1750:	82 2f       	mov	r24, r18
    1752:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodqi4>
	switch(Copy_U8_State)
    1756:	33 23       	and	r19, r19
    1758:	21 f0       	breq	.+8      	; 0x1762 <M_DIO_Void_SetPinValue+0x1e>
    175a:	31 30       	cpi	r19, 0x01	; 1
    175c:	09 f0       	breq	.+2      	; 0x1760 <M_DIO_Void_SetPinValue+0x1c>
    175e:	86 c0       	rjmp	.+268    	; 0x186c <M_DIO_Void_SetPinValue+0x128>
    1760:	46 c0       	rjmp	.+140    	; 0x17ee <M_DIO_Void_SetPinValue+0xaa>
	{
	case LOW:
		switch(Local_U8_Group)
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	d1 f0       	breq	.+52     	; 0x179a <M_DIO_Void_SetPinValue+0x56>
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	20 f4       	brcc	.+8      	; 0x1772 <M_DIO_Void_SetPinValue+0x2e>
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	09 f0       	breq	.+2      	; 0x1770 <M_DIO_Void_SetPinValue+0x2c>
    176e:	7e c0       	rjmp	.+252    	; 0x186c <M_DIO_Void_SetPinValue+0x128>
    1770:	06 c0       	rjmp	.+12     	; 0x177e <M_DIO_Void_SetPinValue+0x3a>
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	01 f1       	breq	.+64     	; 0x17b6 <M_DIO_Void_SetPinValue+0x72>
    1776:	84 30       	cpi	r24, 0x04	; 4
    1778:	09 f0       	breq	.+2      	; 0x177c <M_DIO_Void_SetPinValue+0x38>
    177a:	78 c0       	rjmp	.+240    	; 0x186c <M_DIO_Void_SetPinValue+0x128>
    177c:	2a c0       	rjmp	.+84     	; 0x17d2 <M_DIO_Void_SetPinValue+0x8e>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    177e:	eb e3       	ldi	r30, 0x3B	; 59
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	20 81       	ld	r18, Z
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 c0       	rjmp	.+4      	; 0x178e <M_DIO_Void_SetPinValue+0x4a>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	4a 95       	dec	r20
    1790:	e2 f7       	brpl	.-8      	; 0x178a <M_DIO_Void_SetPinValue+0x46>
    1792:	80 95       	com	r24
    1794:	82 23       	and	r24, r18
    1796:	80 83       	st	Z, r24
    1798:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    179a:	e8 e3       	ldi	r30, 0x38	; 56
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	20 81       	ld	r18, Z
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <M_DIO_Void_SetPinValue+0x66>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	4a 95       	dec	r20
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <M_DIO_Void_SetPinValue+0x62>
    17ae:	80 95       	com	r24
    17b0:	82 23       	and	r24, r18
    17b2:	80 83       	st	Z, r24
    17b4:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    17b6:	e5 e3       	ldi	r30, 0x35	; 53
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	20 81       	ld	r18, Z
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <M_DIO_Void_SetPinValue+0x82>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	4a 95       	dec	r20
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <M_DIO_Void_SetPinValue+0x7e>
    17ca:	80 95       	com	r24
    17cc:	82 23       	and	r24, r18
    17ce:	80 83       	st	Z, r24
    17d0:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    17d2:	e2 e3       	ldi	r30, 0x32	; 50
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	20 81       	ld	r18, Z
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <M_DIO_Void_SetPinValue+0x9e>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	4a 95       	dec	r20
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <M_DIO_Void_SetPinValue+0x9a>
    17e6:	80 95       	com	r24
    17e8:	82 23       	and	r24, r18
    17ea:	80 83       	st	Z, r24
    17ec:	08 95       	ret
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    17ee:	82 30       	cpi	r24, 0x02	; 2
    17f0:	b9 f0       	breq	.+46     	; 0x1820 <M_DIO_Void_SetPinValue+0xdc>
    17f2:	83 30       	cpi	r24, 0x03	; 3
    17f4:	18 f4       	brcc	.+6      	; 0x17fc <M_DIO_Void_SetPinValue+0xb8>
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	c9 f5       	brne	.+114    	; 0x186c <M_DIO_Void_SetPinValue+0x128>
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <M_DIO_Void_SetPinValue+0xc2>
    17fc:	83 30       	cpi	r24, 0x03	; 3
    17fe:	e9 f0       	breq	.+58     	; 0x183a <M_DIO_Void_SetPinValue+0xf6>
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	a1 f5       	brne	.+104    	; 0x186c <M_DIO_Void_SetPinValue+0x128>
    1804:	27 c0       	rjmp	.+78     	; 0x1854 <M_DIO_Void_SetPinValue+0x110>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1806:	eb e3       	ldi	r30, 0x3B	; 59
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	20 81       	ld	r18, Z
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <M_DIO_Void_SetPinValue+0xd2>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	4a 95       	dec	r20
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <M_DIO_Void_SetPinValue+0xce>
    181a:	28 2b       	or	r18, r24
    181c:	20 83       	st	Z, r18
    181e:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1820:	e8 e3       	ldi	r30, 0x38	; 56
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	20 81       	ld	r18, Z
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <M_DIO_Void_SetPinValue+0xec>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	4a 95       	dec	r20
    1832:	e2 f7       	brpl	.-8      	; 0x182c <M_DIO_Void_SetPinValue+0xe8>
    1834:	28 2b       	or	r18, r24
    1836:	20 83       	st	Z, r18
    1838:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    183a:	e5 e3       	ldi	r30, 0x35	; 53
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	20 81       	ld	r18, Z
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 c0       	rjmp	.+4      	; 0x184a <M_DIO_Void_SetPinValue+0x106>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	4a 95       	dec	r20
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <M_DIO_Void_SetPinValue+0x102>
    184e:	28 2b       	or	r18, r24
    1850:	20 83       	st	Z, r18
    1852:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1854:	e2 e3       	ldi	r30, 0x32	; 50
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	20 81       	ld	r18, Z
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <M_DIO_Void_SetPinValue+0x120>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	4a 95       	dec	r20
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <M_DIO_Void_SetPinValue+0x11c>
    1868:	28 2b       	or	r18, r24
    186a:	20 83       	st	Z, r18
    186c:	08 95       	ret

0000186e <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    186e:	28 2f       	mov	r18, r24
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1870:	6a e0       	ldi	r22, 0x0A	; 10
    1872:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodqi4>
    1876:	39 2f       	mov	r19, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Group)
    1878:	82 2f       	mov	r24, r18
    187a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodqi4>
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	a1 f0       	breq	.+40     	; 0x18aa <M_DIO_Void_GetPinValue+0x3c>
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	18 f4       	brcc	.+6      	; 0x188c <M_DIO_Void_GetPinValue+0x1e>
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	29 f4       	brne	.+10     	; 0x1894 <M_DIO_Void_GetPinValue+0x26>
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <M_DIO_Void_GetPinValue+0x2a>
    188c:	83 30       	cpi	r24, 0x03	; 3
    188e:	b1 f0       	breq	.+44     	; 0x18bc <M_DIO_Void_GetPinValue+0x4e>
    1890:	84 30       	cpi	r24, 0x04	; 4
    1892:	e9 f0       	breq	.+58     	; 0x18ce <M_DIO_Void_GetPinValue+0x60>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	08 95       	ret
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    1898:	89 b3       	in	r24, 0x19	; 25
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <M_DIO_Void_GetPinValue+0x34>
    189e:	95 95       	asr	r25
    18a0:	87 95       	ror	r24
    18a2:	3a 95       	dec	r19
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <M_DIO_Void_GetPinValue+0x30>
    18a6:	81 70       	andi	r24, 0x01	; 1
    18a8:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    18aa:	86 b3       	in	r24, 0x16	; 22
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <M_DIO_Void_GetPinValue+0x46>
    18b0:	95 95       	asr	r25
    18b2:	87 95       	ror	r24
    18b4:	3a 95       	dec	r19
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <M_DIO_Void_GetPinValue+0x42>
    18b8:	81 70       	andi	r24, 0x01	; 1
    18ba:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    18bc:	83 b3       	in	r24, 0x13	; 19
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <M_DIO_Void_GetPinValue+0x58>
    18c2:	95 95       	asr	r25
    18c4:	87 95       	ror	r24
    18c6:	3a 95       	dec	r19
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <M_DIO_Void_GetPinValue+0x54>
    18ca:	81 70       	andi	r24, 0x01	; 1
    18cc:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    18ce:	80 b3       	in	r24, 0x10	; 16
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <M_DIO_Void_GetPinValue+0x6a>
    18d4:	95 95       	asr	r25
    18d6:	87 95       	ror	r24
    18d8:	3a 95       	dec	r19
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <M_DIO_Void_GetPinValue+0x66>
    18dc:	81 70       	andi	r24, 0x01	; 1
	default:                                                   break;
	}
	return Local_U8_Reading ;
}
    18de:	08 95       	ret

000018e0 <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    18e0:	28 2f       	mov	r18, r24
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    18e2:	6a e0       	ldi	r22, 0x0A	; 10
    18e4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodqi4>
    18e8:	39 2f       	mov	r19, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
	switch(Local_U8_Group)
    18ea:	82 2f       	mov	r24, r18
    18ec:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodqi4>
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	b9 f0       	breq	.+46     	; 0x1922 <M_DIO_Void_TogPin+0x42>
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	18 f4       	brcc	.+6      	; 0x18fe <M_DIO_Void_TogPin+0x1e>
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	c9 f5       	brne	.+114    	; 0x196e <M_DIO_Void_TogPin+0x8e>
    18fc:	05 c0       	rjmp	.+10     	; 0x1908 <M_DIO_Void_TogPin+0x28>
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	e9 f0       	breq	.+58     	; 0x193c <M_DIO_Void_TogPin+0x5c>
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	a1 f5       	brne	.+104    	; 0x196e <M_DIO_Void_TogPin+0x8e>
    1906:	27 c0       	rjmp	.+78     	; 0x1956 <M_DIO_Void_TogPin+0x76>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1908:	eb e3       	ldi	r30, 0x3B	; 59
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	20 81       	ld	r18, Z
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <M_DIO_Void_TogPin+0x38>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	3a 95       	dec	r19
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <M_DIO_Void_TogPin+0x34>
    191c:	28 27       	eor	r18, r24
    191e:	20 83       	st	Z, r18
    1920:	08 95       	ret
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    1922:	e8 e3       	ldi	r30, 0x38	; 56
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	20 81       	ld	r18, Z
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <M_DIO_Void_TogPin+0x52>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	3a 95       	dec	r19
    1934:	e2 f7       	brpl	.-8      	; 0x192e <M_DIO_Void_TogPin+0x4e>
    1936:	28 27       	eor	r18, r24
    1938:	20 83       	st	Z, r18
    193a:	08 95       	ret
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    193c:	e5 e3       	ldi	r30, 0x35	; 53
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	20 81       	ld	r18, Z
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 c0       	rjmp	.+4      	; 0x194c <M_DIO_Void_TogPin+0x6c>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	3a 95       	dec	r19
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <M_DIO_Void_TogPin+0x68>
    1950:	28 27       	eor	r18, r24
    1952:	20 83       	st	Z, r18
    1954:	08 95       	ret
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    1956:	e2 e3       	ldi	r30, 0x32	; 50
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	20 81       	ld	r18, Z
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <M_DIO_Void_TogPin+0x86>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	3a 95       	dec	r19
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <M_DIO_Void_TogPin+0x82>
    196a:	28 27       	eor	r18, r24
    196c:	20 83       	st	Z, r18
    196e:	08 95       	ret

00001970 <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    1970:	28 2f       	mov	r18, r24
    1972:	36 2f       	mov	r19, r22
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1974:	6a e0       	ldi	r22, 0x0A	; 10
    1976:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodqi4>
    197a:	49 2f       	mov	r20, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    197c:	82 2f       	mov	r24, r18
    197e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodqi4>
	switch(Copy_U8_State)
    1982:	33 23       	and	r19, r19
    1984:	21 f0       	breq	.+8      	; 0x198e <M_DIO_Void_SetPinPullUpRes+0x1e>
    1986:	31 30       	cpi	r19, 0x01	; 1
    1988:	09 f0       	breq	.+2      	; 0x198c <M_DIO_Void_SetPinPullUpRes+0x1c>
    198a:	86 c0       	rjmp	.+268    	; 0x1a98 <M_DIO_Void_SetPinPullUpRes+0x128>
    198c:	46 c0       	rjmp	.+140    	; 0x1a1a <M_DIO_Void_SetPinPullUpRes+0xaa>
	{
	case DISABLE:
		switch(Local_U8_Group)
    198e:	82 30       	cpi	r24, 0x02	; 2
    1990:	d1 f0       	breq	.+52     	; 0x19c6 <M_DIO_Void_SetPinPullUpRes+0x56>
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	20 f4       	brcc	.+8      	; 0x199e <M_DIO_Void_SetPinPullUpRes+0x2e>
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	09 f0       	breq	.+2      	; 0x199c <M_DIO_Void_SetPinPullUpRes+0x2c>
    199a:	7e c0       	rjmp	.+252    	; 0x1a98 <M_DIO_Void_SetPinPullUpRes+0x128>
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <M_DIO_Void_SetPinPullUpRes+0x3a>
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	01 f1       	breq	.+64     	; 0x19e2 <M_DIO_Void_SetPinPullUpRes+0x72>
    19a2:	84 30       	cpi	r24, 0x04	; 4
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <M_DIO_Void_SetPinPullUpRes+0x38>
    19a6:	78 c0       	rjmp	.+240    	; 0x1a98 <M_DIO_Void_SetPinPullUpRes+0x128>
    19a8:	2a c0       	rjmp	.+84     	; 0x19fe <M_DIO_Void_SetPinPullUpRes+0x8e>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    19aa:	eb e3       	ldi	r30, 0x3B	; 59
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	20 81       	ld	r18, Z
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <M_DIO_Void_SetPinPullUpRes+0x4a>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	4a 95       	dec	r20
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <M_DIO_Void_SetPinPullUpRes+0x46>
    19be:	80 95       	com	r24
    19c0:	82 23       	and	r24, r18
    19c2:	80 83       	st	Z, r24
    19c4:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    19c6:	e8 e3       	ldi	r30, 0x38	; 56
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	20 81       	ld	r18, Z
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <M_DIO_Void_SetPinPullUpRes+0x66>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	4a 95       	dec	r20
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <M_DIO_Void_SetPinPullUpRes+0x62>
    19da:	80 95       	com	r24
    19dc:	82 23       	and	r24, r18
    19de:	80 83       	st	Z, r24
    19e0:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    19e2:	e5 e3       	ldi	r30, 0x35	; 53
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	20 81       	ld	r18, Z
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <M_DIO_Void_SetPinPullUpRes+0x82>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	4a 95       	dec	r20
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <M_DIO_Void_SetPinPullUpRes+0x7e>
    19f6:	80 95       	com	r24
    19f8:	82 23       	and	r24, r18
    19fa:	80 83       	st	Z, r24
    19fc:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    19fe:	e2 e3       	ldi	r30, 0x32	; 50
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	20 81       	ld	r18, Z
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <M_DIO_Void_SetPinPullUpRes+0x9e>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	4a 95       	dec	r20
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <M_DIO_Void_SetPinPullUpRes+0x9a>
    1a12:	80 95       	com	r24
    1a14:	82 23       	and	r24, r18
    1a16:	80 83       	st	Z, r24
    1a18:	08 95       	ret
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    1a1a:	82 30       	cpi	r24, 0x02	; 2
    1a1c:	b9 f0       	breq	.+46     	; 0x1a4c <M_DIO_Void_SetPinPullUpRes+0xdc>
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	18 f4       	brcc	.+6      	; 0x1a28 <M_DIO_Void_SetPinPullUpRes+0xb8>
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	c9 f5       	brne	.+114    	; 0x1a98 <M_DIO_Void_SetPinPullUpRes+0x128>
    1a26:	05 c0       	rjmp	.+10     	; 0x1a32 <M_DIO_Void_SetPinPullUpRes+0xc2>
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	e9 f0       	breq	.+58     	; 0x1a66 <M_DIO_Void_SetPinPullUpRes+0xf6>
    1a2c:	84 30       	cpi	r24, 0x04	; 4
    1a2e:	a1 f5       	brne	.+104    	; 0x1a98 <M_DIO_Void_SetPinPullUpRes+0x128>
    1a30:	27 c0       	rjmp	.+78     	; 0x1a80 <M_DIO_Void_SetPinPullUpRes+0x110>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1a32:	eb e3       	ldi	r30, 0x3B	; 59
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	20 81       	ld	r18, Z
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <M_DIO_Void_SetPinPullUpRes+0xd2>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	4a 95       	dec	r20
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <M_DIO_Void_SetPinPullUpRes+0xce>
    1a46:	28 2b       	or	r18, r24
    1a48:	20 83       	st	Z, r18
    1a4a:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1a4c:	e8 e3       	ldi	r30, 0x38	; 56
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	20 81       	ld	r18, Z
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <M_DIO_Void_SetPinPullUpRes+0xec>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	4a 95       	dec	r20
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <M_DIO_Void_SetPinPullUpRes+0xe8>
    1a60:	28 2b       	or	r18, r24
    1a62:	20 83       	st	Z, r18
    1a64:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1a66:	e5 e3       	ldi	r30, 0x35	; 53
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	20 81       	ld	r18, Z
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <M_DIO_Void_SetPinPullUpRes+0x106>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	4a 95       	dec	r20
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <M_DIO_Void_SetPinPullUpRes+0x102>
    1a7a:	28 2b       	or	r18, r24
    1a7c:	20 83       	st	Z, r18
    1a7e:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1a80:	e2 e3       	ldi	r30, 0x32	; 50
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	20 81       	ld	r18, Z
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <M_DIO_Void_SetPinPullUpRes+0x120>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	4a 95       	dec	r20
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <M_DIO_Void_SetPinPullUpRes+0x11c>
    1a94:	28 2b       	or	r18, r24
    1a96:	20 83       	st	Z, r18
    1a98:	08 95       	ret

00001a9a <ADC_NEW_init>:

#include "ADC_NEW_interface.h"

void ADC_NEW_init(void) {
#if (Vol_Ref==AREF)
CLR_BIT	(ADMUX_NEW,ADMUX_REFS0);
    1a9a:	a7 e2       	ldi	r26, 0x27	; 39
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	8c 91       	ld	r24, X
    1aa0:	8f 7b       	andi	r24, 0xBF	; 191
    1aa2:	8c 93       	st	X, r24
CLR_BIT	(ADMUX_NEW,ADMUX_REFS1);
    1aa4:	8c 91       	ld	r24, X
    1aa6:	8f 77       	andi	r24, 0x7F	; 127
    1aa8:	8c 93       	st	X, r24
#elif(ADC_Prescaler==ADC_PRE_32)
SET_BIT	(ADCSRA_NEW,ADCSRA_ADPS0);
CLR_BIT(ADCSRA_NEW,ADCSRA_ADPS1);
SET_BIT	(ADCSRA_NEW,ADCSRA_ADPS2);
#elif(ADC_Prescaler==ADC_PRE_64)
CLR_BIT	(ADCSRA_NEW,ADCSRA_ADPS0);
    1aaa:	e6 e2       	ldi	r30, 0x26	; 38
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8e 7f       	andi	r24, 0xFE	; 254
    1ab2:	80 83       	st	Z, r24
SET_BIT(ADCSRA_NEW,ADCSRA_ADPS1);
    1ab4:	80 81       	ld	r24, Z
    1ab6:	82 60       	ori	r24, 0x02	; 2
    1ab8:	80 83       	st	Z, r24
SET_BIT	(ADCSRA_NEW,ADCSRA_ADPS2);
    1aba:	80 81       	ld	r24, Z
    1abc:	84 60       	ori	r24, 0x04	; 4
    1abe:	80 83       	st	Z, r24
#endif

#if (ADC_adjust == left_addjustment )
SET_BIT	(ADMUX_NEW,ADMUX_ADLAR);
#elif (ADC_adjust == right_addjustment )
CLR_BIT	(ADMUX_NEW,ADMUX_ADLAR);
    1ac0:	8c 91       	ld	r24, X
    1ac2:	8f 7d       	andi	r24, 0xDF	; 223
    1ac4:	8c 93       	st	X, r24

#endif
SET_BIT(ADCSRA_NEW,ADCSRA_ADEN);
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 68       	ori	r24, 0x80	; 128
    1aca:	80 83       	st	Z, r24
}
    1acc:	08 95       	ret

00001ace <ADC_NEW_read>:
u8   ADC_NEW_read(u8 ADC_chanel_num){
	u16 ADC_res =0;

	ADC_chanel_num &=0x07;       //chancel from 0 to 7
	ADMUX_NEW &=0xE0;
    1ace:	e7 e2       	ldi	r30, 0x27	; 39
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	90 81       	ld	r25, Z
    1ad4:	90 7e       	andi	r25, 0xE0	; 224
    1ad6:	90 83       	st	Z, r25
	ADMUX_NEW |=ADC_chanel_num;
    1ad8:	90 81       	ld	r25, Z
    1ada:	87 70       	andi	r24, 0x07	; 7
    1adc:	89 2b       	or	r24, r25
    1ade:	80 83       	st	Z, r24

	SET_BIT(ADCSRA_NEW,ADCSRA_ADSC); // start convertion
    1ae0:	e6 e2       	ldi	r30, 0x26	; 38
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	80 64       	ori	r24, 0x40	; 64
    1ae8:	80 83       	st	Z, r24
	while ( GET_BIT(ADCSRA_NEW,ADCSRA_ADIF) );
    1aea:	80 81       	ld	r24, Z
    1aec:	84 fd       	sbrc	r24, 4
    1aee:	fd cf       	rjmp	.-6      	; 0x1aea <ADC_NEW_read+0x1c>
	SET_BIT(ADCSRA_NEW,ADCSRA_ADIF);
    1af0:	e6 e2       	ldi	r30, 0x26	; 38
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	80 61       	ori	r24, 0x10	; 16
    1af8:	80 83       	st	Z, r24
#if (ADC_adjust==left_addjustment)
	ADC_res =	(ADC_NEW>>6);
#elif(ADC_adjust==right_addjustment)
	ADC_res = ADC_NEW;
    1afa:	84 b1       	in	r24, 0x04	; 4
    1afc:	95 b1       	in	r25, 0x05	; 5
#endif

return ADC_res;

}
    1afe:	08 95       	ret

00001b00 <M_ADC_Void_ADCInit>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_ADC_Void_ADCInit(void)
{
#if   ADC_VREF   ==   AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
    1b00:	e7 e2       	ldi	r30, 0x27	; 39
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	80 64       	ori	r24, 0x40	; 64
    1b08:	80 83       	st	Z, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    1b0a:	80 81       	ld	r24, Z
    1b0c:	8f 77       	andi	r24, 0x7F	; 127
    1b0e:	80 83       	st	Z, r24
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    1b10:	80 81       	ld	r24, Z
    1b12:	8f 7d       	andi	r24, 0xDF	; 223
    1b14:	80 83       	st	Z, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    1b16:	e6 e2       	ldi	r30, 0x26	; 38
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	81 60       	ori	r24, 0x01	; 1
    1b1e:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    1b20:	80 81       	ld	r24, Z
    1b22:	82 60       	ori	r24, 0x02	; 2
    1b24:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    1b26:	80 81       	ld	r24, Z
    1b28:	84 60       	ori	r24, 0x04	; 4
    1b2a:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#endif

	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 62       	ori	r24, 0x20	; 32
    1b30:	80 83       	st	Z, r24
	/* TO ENABLE ADC CIRCUIT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    1b32:	80 81       	ld	r24, Z
    1b34:	80 68       	ori	r24, 0x80	; 128
    1b36:	80 83       	st	Z, r24
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 64       	ori	r24, 0x40	; 64
    1b3c:	80 83       	st	Z, r24
}
    1b3e:	08 95       	ret

00001b40 <M_ADC_Void_ADCRead>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u16  M_ADC_Void_ADCRead(u8 Copy_U8_ADCChannel)
{
	ADMUX_REG = (ADMUX_REG & ADMUX_MASK) | Copy_U8_ADCChannel;
    1b40:	e7 e2       	ldi	r30, 0x27	; 39
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	90 81       	ld	r25, Z
    1b46:	90 7e       	andi	r25, 0xE0	; 224
    1b48:	89 2b       	or	r24, r25
    1b4a:	80 83       	st	Z, r24
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	50 e0       	ldi	r21, 0x00	; 0
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < ADC_POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_FINISH_CONVERTING)
    1b54:	e6 e2       	ldi	r30, 0x26	; 38
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	84 fd       	sbrc	r24, 4
    1b5c:	0c c0       	rjmp	.+24     	; 0x1b76 <M_ADC_Void_ADCRead+0x36>
{
	ADMUX_REG = (ADMUX_REG & ADMUX_MASK) | Copy_U8_ADCChannel;
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < ADC_POLLING_TIME)
	{
		Local_U32_Counter++;
    1b5e:	2f 5f       	subi	r18, 0xFF	; 255
    1b60:	3f 4f       	sbci	r19, 0xFF	; 255
    1b62:	4f 4f       	sbci	r20, 0xFF	; 255
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
/*--------------------------------------------------------------------------------------------*/
u16  M_ADC_Void_ADCRead(u8 Copy_U8_ADCChannel)
{
	ADMUX_REG = (ADMUX_REG & ADMUX_MASK) | Copy_U8_ADCChannel;
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < ADC_POLLING_TIME)
    1b66:	20 38       	cpi	r18, 0x80	; 128
    1b68:	84 e8       	ldi	r24, 0x84	; 132
    1b6a:	38 07       	cpc	r19, r24
    1b6c:	8e e1       	ldi	r24, 0x1E	; 30
    1b6e:	48 07       	cpc	r20, r24
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	58 07       	cpc	r21, r24
    1b74:	89 f7       	brne	.-30     	; 0x1b58 <M_ADC_Void_ADCRead+0x18>
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_FINISH_CONVERTING)
		{
			break;
		}
	}
	return ADCVALUE_REG;
    1b76:	24 b1       	in	r18, 0x04	; 4
    1b78:	35 b1       	in	r19, 0x05	; 5
}
    1b7a:	82 2f       	mov	r24, r18
    1b7c:	93 2f       	mov	r25, r19
    1b7e:	08 95       	ret

00001b80 <H_WIFI_U8_WIFIRead>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   H_WIFI_U8_WIFIRead(void)
{
	return M_UART_U8_UARTReadCharacter();
    1b80:	0e 94 09 08 	call	0x1012	; 0x1012 <M_UART_U8_UARTReadCharacter>
}
    1b84:	08 95       	ret

00001b86 <H_WIFI_Void_WIFIWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_WIFI_Void_WIFIWriteString(u8* Copy_U8_Ptr)
{
    1b86:	1f 93       	push	r17
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	ec 01       	movw	r28, r24
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    1b8e:	88 81       	ld	r24, Y
    1b90:	88 23       	and	r24, r24
    1b92:	51 f0       	breq	.+20     	; 0x1ba8 <H_WIFI_Void_WIFIWriteString+0x22>
    1b94:	10 e0       	ldi	r17, 0x00	; 0
	{
		M_UART_Void_UARTWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    1b96:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <M_UART_Void_UARTWriteCharacter>
		Local_U8_Counter++;
    1b9a:	1f 5f       	subi	r17, 0xFF	; 255
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_WIFI_Void_WIFIWriteString(u8* Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e1 0f       	add	r30, r17
    1ba0:	f1 1d       	adc	r31, r1
    1ba2:	80 81       	ld	r24, Z
    1ba4:	88 23       	and	r24, r24
    1ba6:	b9 f7       	brne	.-18     	; 0x1b96 <H_WIFI_Void_WIFIWriteString+0x10>
	{
		M_UART_Void_UARTWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	08 95       	ret

00001bb0 <H_WIFI_Void_WIFIWriteCharacter>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_WIFI_Void_WIFIWriteCharacter(u8 Copy_U8_Data)
{
	M_UART_Void_UARTWriteCharacter(Copy_U8_Data);
    1bb0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <M_UART_Void_UARTWriteCharacter>
}
    1bb4:	08 95       	ret

00001bb6 <H_WIFI_Void_WIFIInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_WIFI_Void_WIFIInit(void)
{
	M_UART_Void_UARTInit();
    1bb6:	0e 94 10 08 	call	0x1020	; 0x1020 <M_UART_Void_UARTInit>
}
    1bba:	08 95       	ret

00001bbc <H_SSD_Void_SSDDisplay>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_SSD_Void_SSDDisplay(u32 Copy_U32_Num)
{
    1bbc:	2f 92       	push	r2
    1bbe:	3f 92       	push	r3
    1bc0:	4f 92       	push	r4
    1bc2:	5f 92       	push	r5
    1bc4:	6f 92       	push	r6
    1bc6:	7f 92       	push	r7
    1bc8:	8f 92       	push	r8
    1bca:	9f 92       	push	r9
    1bcc:	af 92       	push	r10
    1bce:	bf 92       	push	r11
    1bd0:	cf 92       	push	r12
    1bd2:	df 92       	push	r13
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <H_SSD_Void_SSDDisplay+0x26>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <H_SSD_Void_SSDDisplay+0x28>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	7b 01       	movw	r14, r22
    1bea:	8c 01       	movw	r16, r24
	u8 Local_U8_1    =  Copy_U32_Num % 10;
    1bec:	2a e0       	ldi	r18, 0x0A	; 10
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__udivmodsi4>
    1bf8:	b6 2e       	mov	r11, r22
	u8 Local_U8_10   = (Copy_U32_Num / 10) % 10;
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	b7 01       	movw	r22, r14
    1bfe:	2a e0       	ldi	r18, 0x0A	; 10
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__udivmodsi4>
    1c0a:	ca 01       	movw	r24, r20
    1c0c:	b9 01       	movw	r22, r18
    1c0e:	2a e0       	ldi	r18, 0x0A	; 10
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__udivmodsi4>
    1c1a:	c6 2e       	mov	r12, r22
	u8 Local_U8_100  = (Copy_U32_Num / 100) % 10;
    1c1c:	c8 01       	movw	r24, r16
    1c1e:	b7 01       	movw	r22, r14
    1c20:	24 e6       	ldi	r18, 0x64	; 100
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__udivmodsi4>
    1c2c:	ca 01       	movw	r24, r20
    1c2e:	b9 01       	movw	r22, r18
    1c30:	2a e0       	ldi	r18, 0x0A	; 10
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__udivmodsi4>
    1c3c:	d6 2e       	mov	r13, r22
	u8 Local_U8_1000 =  Copy_U32_Num / 1000;
    1c3e:	c8 01       	movw	r24, r16
    1c40:	b7 01       	movw	r22, r14
    1c42:	28 ee       	ldi	r18, 0xE8	; 232
    1c44:	33 e0       	ldi	r19, 0x03	; 3
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__udivmodsi4>
	u32 Local_U16_Counter = 0;
	for(Local_U16_Counter = 0 ; Local_U16_Counter < SSD_DISPLAY_TIME ; Local_U16_Counter++)
	{
		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1,0));
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_1,1));
    1c4e:	8b 2d       	mov	r24, r11
    1c50:	86 95       	lsr	r24
    1c52:	81 70       	andi	r24, 0x01	; 1
    1c54:	8a 83       	std	Y+2, r24	; 0x02
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_1,2));
    1c56:	8b 2d       	mov	r24, r11
    1c58:	86 95       	lsr	r24
    1c5a:	86 95       	lsr	r24
    1c5c:	81 70       	andi	r24, 0x01	; 1
    1c5e:	89 83       	std	Y+1, r24	; 0x01
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1,3));
    1c60:	8b 2d       	mov	r24, r11
    1c62:	86 95       	lsr	r24
    1c64:	86 95       	lsr	r24
    1c66:	86 95       	lsr	r24
    1c68:	22 24       	eor	r2, r2
    1c6a:	23 94       	inc	r2
    1c6c:	28 22       	and	r2, r24
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,HIGH);

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_10,0));
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_10,1));
    1c6e:	8c 2d       	mov	r24, r12
    1c70:	86 95       	lsr	r24
    1c72:	33 24       	eor	r3, r3
    1c74:	33 94       	inc	r3
    1c76:	38 22       	and	r3, r24
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_10,2));
    1c78:	8c 2d       	mov	r24, r12
    1c7a:	86 95       	lsr	r24
    1c7c:	86 95       	lsr	r24
    1c7e:	44 24       	eor	r4, r4
    1c80:	43 94       	inc	r4
    1c82:	48 22       	and	r4, r24
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_10,3));
    1c84:	8c 2d       	mov	r24, r12
    1c86:	86 95       	lsr	r24
    1c88:	86 95       	lsr	r24
    1c8a:	86 95       	lsr	r24
    1c8c:	55 24       	eor	r5, r5
    1c8e:	53 94       	inc	r5
    1c90:	58 22       	and	r5, r24
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_100,0));
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_100,1));
    1c92:	8d 2d       	mov	r24, r13
    1c94:	86 95       	lsr	r24
    1c96:	66 24       	eor	r6, r6
    1c98:	63 94       	inc	r6
    1c9a:	68 22       	and	r6, r24
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_100,2));
    1c9c:	8d 2d       	mov	r24, r13
    1c9e:	86 95       	lsr	r24
    1ca0:	86 95       	lsr	r24
    1ca2:	77 24       	eor	r7, r7
    1ca4:	73 94       	inc	r7
    1ca6:	78 22       	and	r7, r24
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_100,3));
    1ca8:	8d 2d       	mov	r24, r13
    1caa:	86 95       	lsr	r24
    1cac:	86 95       	lsr	r24
    1cae:	86 95       	lsr	r24
    1cb0:	88 24       	eor	r8, r8
    1cb2:	83 94       	inc	r8
    1cb4:	88 22       	and	r8, r24
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD3_EN_PIN,HIGH);


		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1000,0));
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_1000,1));
    1cb6:	82 2f       	mov	r24, r18
    1cb8:	86 95       	lsr	r24
    1cba:	99 24       	eor	r9, r9
    1cbc:	93 94       	inc	r9
    1cbe:	98 22       	and	r9, r24
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_1000,2));
    1cc0:	82 2f       	mov	r24, r18
    1cc2:	86 95       	lsr	r24
    1cc4:	86 95       	lsr	r24
    1cc6:	aa 24       	eor	r10, r10
    1cc8:	a3 94       	inc	r10
    1cca:	a8 22       	and	r10, r24
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1000,3));
    1ccc:	82 2f       	mov	r24, r18
    1cce:	86 95       	lsr	r24
    1cd0:	86 95       	lsr	r24
    1cd2:	86 95       	lsr	r24
    1cd4:	ff 24       	eor	r15, r15
    1cd6:	f3 94       	inc	r15
    1cd8:	f8 22       	and	r15, r24
    1cda:	1c 82       	std	Y+4, r1	; 0x04
    1cdc:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_U8_100  = (Copy_U32_Num / 100) % 10;
	u8 Local_U8_1000 =  Copy_U32_Num / 1000;
	u32 Local_U16_Counter = 0;
	for(Local_U16_Counter = 0 ; Local_U16_Counter < SSD_DISPLAY_TIME ; Local_U16_Counter++)
	{
		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1,0));
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	b8 22       	and	r11, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ce2:	0a ef       	ldi	r16, 0xFA	; 250
    1ce4:	10 e0       	ldi	r17, 0x00	; 0
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1,3));
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,HIGH);

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_10,0));
    1ce6:	c8 22       	and	r12, r24
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_10,3));
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_100,0));
    1ce8:	d8 22       	and	r13, r24
		M_DIO_Void_SetPinValue(SSD3_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD3_EN_PIN,HIGH);


		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1000,0));
    1cea:	ee 24       	eor	r14, r14
    1cec:	e3 94       	inc	r14
    1cee:	e2 22       	and	r14, r18
	u8 Local_U8_100  = (Copy_U32_Num / 100) % 10;
	u8 Local_U8_1000 =  Copy_U32_Num / 1000;
	u32 Local_U16_Counter = 0;
	for(Local_U16_Counter = 0 ; Local_U16_Counter < SSD_DISPLAY_TIME ; Local_U16_Counter++)
	{
		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1,0));
    1cf0:	84 e1       	ldi	r24, 0x14	; 20
    1cf2:	6b 2d       	mov	r22, r11
    1cf4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_1,1));
    1cf8:	85 e1       	ldi	r24, 0x15	; 21
    1cfa:	6a 81       	ldd	r22, Y+2	; 0x02
    1cfc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_1,2));
    1d00:	86 e1       	ldi	r24, 0x16	; 22
    1d02:	69 81       	ldd	r22, Y+1	; 0x01
    1d04:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1,3));
    1d08:	88 e1       	ldi	r24, 0x18	; 24
    1d0a:	62 2d       	mov	r22, r2
    1d0c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,LOW);
    1d10:	8d e0       	ldi	r24, 0x0D	; 13
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    1d18:	c8 01       	movw	r24, r16
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <H_SSD_Void_SSDDisplay+0x15e>
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,HIGH);
    1d1e:	8d e0       	ldi	r24, 0x0D	; 13
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_10,0));
    1d26:	84 e1       	ldi	r24, 0x14	; 20
    1d28:	6c 2d       	mov	r22, r12
    1d2a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_10,1));
    1d2e:	85 e1       	ldi	r24, 0x15	; 21
    1d30:	63 2d       	mov	r22, r3
    1d32:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_10,2));
    1d36:	86 e1       	ldi	r24, 0x16	; 22
    1d38:	64 2d       	mov	r22, r4
    1d3a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_10,3));
    1d3e:	88 e1       	ldi	r24, 0x18	; 24
    1d40:	65 2d       	mov	r22, r5
    1d42:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,LOW);
    1d46:	8c e0       	ldi	r24, 0x0C	; 12
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    1d4e:	c8 01       	movw	r24, r16
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <H_SSD_Void_SSDDisplay+0x194>
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);
    1d54:	8c e0       	ldi	r24, 0x0C	; 12
    1d56:	61 e0       	ldi	r22, 0x01	; 1
    1d58:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_100,0));
    1d5c:	84 e1       	ldi	r24, 0x14	; 20
    1d5e:	6d 2d       	mov	r22, r13
    1d60:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_100,1));
    1d64:	85 e1       	ldi	r24, 0x15	; 21
    1d66:	66 2d       	mov	r22, r6
    1d68:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_100,2));
    1d6c:	86 e1       	ldi	r24, 0x16	; 22
    1d6e:	67 2d       	mov	r22, r7
    1d70:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_100,3));
    1d74:	88 e1       	ldi	r24, 0x18	; 24
    1d76:	68 2d       	mov	r22, r8
    1d78:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD3_EN_PIN,LOW);
    1d7c:	89 e1       	ldi	r24, 0x19	; 25
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    1d84:	c8 01       	movw	r24, r16
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <H_SSD_Void_SSDDisplay+0x1ca>
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD3_EN_PIN,HIGH);
    1d8a:	89 e1       	ldi	r24, 0x19	; 25
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>


		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1000,0));
    1d92:	84 e1       	ldi	r24, 0x14	; 20
    1d94:	6e 2d       	mov	r22, r14
    1d96:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_1000,1));
    1d9a:	85 e1       	ldi	r24, 0x15	; 21
    1d9c:	69 2d       	mov	r22, r9
    1d9e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_1000,2));
    1da2:	86 e1       	ldi	r24, 0x16	; 22
    1da4:	6a 2d       	mov	r22, r10
    1da6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1000,3));
    1daa:	88 e1       	ldi	r24, 0x18	; 24
    1dac:	6f 2d       	mov	r22, r15
    1dae:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD4_EN_PIN,LOW);
    1db2:	8a e1       	ldi	r24, 0x1A	; 26
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    1dba:	c8 01       	movw	r24, r16
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <H_SSD_Void_SSDDisplay+0x200>
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD4_EN_PIN,HIGH);
    1dc0:	8a e1       	ldi	r24, 0x1A	; 26
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    1dc8:	eb 81       	ldd	r30, Y+3	; 0x03
    1dca:	fc 81       	ldd	r31, Y+4	; 0x04
    1dcc:	31 96       	adiw	r30, 0x01	; 1
    1dce:	fc 83       	std	Y+4, r31	; 0x04
    1dd0:	eb 83       	std	Y+3, r30	; 0x03
	u8 Local_U8_1    =  Copy_U32_Num % 10;
	u8 Local_U8_10   = (Copy_U32_Num / 10) % 10;
	u8 Local_U8_100  = (Copy_U32_Num / 100) % 10;
	u8 Local_U8_1000 =  Copy_U32_Num / 1000;
	u32 Local_U16_Counter = 0;
	for(Local_U16_Counter = 0 ; Local_U16_Counter < SSD_DISPLAY_TIME ; Local_U16_Counter++)
    1dd2:	e8 3c       	cpi	r30, 0xC8	; 200
    1dd4:	f1 05       	cpc	r31, r1
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <H_SSD_Void_SSDDisplay+0x21e>
    1dd8:	8b cf       	rjmp	.-234    	; 0x1cf0 <H_SSD_Void_SSDDisplay+0x134>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1000,3));
		M_DIO_Void_SetPinValue(SSD4_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD4_EN_PIN,HIGH);
	}
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	bf 90       	pop	r11
    1df4:	af 90       	pop	r10
    1df6:	9f 90       	pop	r9
    1df8:	8f 90       	pop	r8
    1dfa:	7f 90       	pop	r7
    1dfc:	6f 90       	pop	r6
    1dfe:	5f 90       	pop	r5
    1e00:	4f 90       	pop	r4
    1e02:	3f 90       	pop	r3
    1e04:	2f 90       	pop	r2
    1e06:	08 95       	ret

00001e08 <H_SSD_Void_SSDInit>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_SSD_Void_SSDInit(void)
{
	M_DIO_Void_SetPinDirection(SSD_A_PIN,OUTPUT);
    1e08:	84 e1       	ldi	r24, 0x14	; 20
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_B_PIN,OUTPUT);
    1e10:	85 e1       	ldi	r24, 0x15	; 21
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_C_PIN,OUTPUT);
    1e18:	86 e1       	ldi	r24, 0x16	; 22
    1e1a:	61 e0       	ldi	r22, 0x01	; 1
    1e1c:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_D_PIN,OUTPUT);
    1e20:	88 e1       	ldi	r24, 0x18	; 24
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD1_EN_PIN,OUTPUT);
    1e28:	8d e0       	ldi	r24, 0x0D	; 13
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD2_EN_PIN,OUTPUT);
    1e30:	8c e0       	ldi	r24, 0x0C	; 12
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD3_EN_PIN,OUTPUT);
    1e38:	89 e1       	ldi	r24, 0x19	; 25
    1e3a:	61 e0       	ldi	r22, 0x01	; 1
    1e3c:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD4_EN_PIN,OUTPUT);
    1e40:	8a e1       	ldi	r24, 0x1A	; 26
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(SSD1_EN_PIN,HIGH);
    1e48:	8d e0       	ldi	r24, 0x0D	; 13
    1e4a:	61 e0       	ldi	r22, 0x01	; 1
    1e4c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);
    1e50:	8c e0       	ldi	r24, 0x0C	; 12
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(SSD3_EN_PIN,HIGH);
    1e58:	89 e1       	ldi	r24, 0x19	; 25
    1e5a:	61 e0       	ldi	r22, 0x01	; 1
    1e5c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(SSD4_EN_PIN,HIGH);
    1e60:	8a e1       	ldi	r24, 0x1A	; 26
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>

}
    1e68:	08 95       	ret

00001e6a <H_PushButton_U8_PushButtonRead>:
}

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
	switch(Copy_U8_PushButton)
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	d1 f0       	breq	.+52     	; 0x1ea2 <H_PushButton_U8_PushButtonRead+0x38>
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	30 f0       	brcs	.+12     	; 0x1e7e <H_PushButton_U8_PushButtonRead+0x14>
    1e72:	82 30       	cpi	r24, 0x02	; 2
    1e74:	51 f1       	breq	.+84     	; 0x1eca <H_PushButton_U8_PushButtonRead+0x60>
    1e76:	83 30       	cpi	r24, 0x03	; 3
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <H_PushButton_U8_PushButtonRead+0x12>
    1e7a:	4b c0       	rjmp	.+150    	; 0x1f12 <H_PushButton_U8_PushButtonRead+0xa8>
    1e7c:	3a c0       	rjmp	.+116    	; 0x1ef2 <H_PushButton_U8_PushButtonRead+0x88>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    1e7e:	8f e2       	ldi	r24, 0x2F	; 47
    1e80:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    1e84:	88 23       	and	r24, r24
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <H_PushButton_U8_PushButtonRead+0x20>
    1e88:	44 c0       	rjmp	.+136    	; 0x1f12 <H_PushButton_U8_PushButtonRead+0xa8>
    1e8a:	84 ec       	ldi	r24, 0xC4	; 196
    1e8c:	99 e0       	ldi	r25, 0x09	; 9
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <H_PushButton_U8_PushButtonRead+0x24>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    1e92:	8f e2       	ldi	r24, 0x2F	; 47
    1e94:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    1e98:	88 23       	and	r24, r24
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <H_PushButton_U8_PushButtonRead+0x34>
    1e9c:	3d c0       	rjmp	.+122    	; 0x1f18 <H_PushButton_U8_PushButtonRead+0xae>
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	08 95       	ret
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    1ea2:	8e e2       	ldi	r24, 0x2E	; 46
    1ea4:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    1ea8:	88 23       	and	r24, r24
    1eaa:	99 f5       	brne	.+102    	; 0x1f12 <H_PushButton_U8_PushButtonRead+0xa8>
    1eac:	84 ec       	ldi	r24, 0xC4	; 196
    1eae:	99 e0       	ldi	r25, 0x09	; 9
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <H_PushButton_U8_PushButtonRead+0x46>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    1eb4:	8e e2       	ldi	r24, 0x2E	; 46
    1eb6:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    1eba:	88 23       	and	r24, r24
    1ebc:	51 f5       	brne	.+84     	; 0x1f12 <H_PushButton_U8_PushButtonRead+0xa8>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED);
    1ebe:	8e e2       	ldi	r24, 0x2E	; 46
    1ec0:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    1ec4:	88 23       	and	r24, r24
    1ec6:	d9 f3       	breq	.-10     	; 0x1ebe <H_PushButton_U8_PushButtonRead+0x54>
    1ec8:	26 c0       	rjmp	.+76     	; 0x1f16 <H_PushButton_U8_PushButtonRead+0xac>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    1eca:	8d e2       	ldi	r24, 0x2D	; 45
    1ecc:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    1ed0:	88 23       	and	r24, r24
    1ed2:	f9 f4       	brne	.+62     	; 0x1f12 <H_PushButton_U8_PushButtonRead+0xa8>
    1ed4:	84 ec       	ldi	r24, 0xC4	; 196
    1ed6:	99 e0       	ldi	r25, 0x09	; 9
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <H_PushButton_U8_PushButtonRead+0x6e>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    1edc:	8d e2       	ldi	r24, 0x2D	; 45
    1ede:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    1ee2:	88 23       	and	r24, r24
    1ee4:	b1 f4       	brne	.+44     	; 0x1f12 <H_PushButton_U8_PushButtonRead+0xa8>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED);
    1ee6:	8d e2       	ldi	r24, 0x2D	; 45
    1ee8:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    1eec:	88 23       	and	r24, r24
    1eee:	d9 f3       	breq	.-10     	; 0x1ee6 <H_PushButton_U8_PushButtonRead+0x7c>
    1ef0:	12 c0       	rjmp	.+36     	; 0x1f16 <H_PushButton_U8_PushButtonRead+0xac>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    1ef2:	8b e2       	ldi	r24, 0x2B	; 43
    1ef4:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    1ef8:	88 23       	and	r24, r24
    1efa:	59 f4       	brne	.+22     	; 0x1f12 <H_PushButton_U8_PushButtonRead+0xa8>
    1efc:	84 ec       	ldi	r24, 0xC4	; 196
    1efe:	99 e0       	ldi	r25, 0x09	; 9
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <H_PushButton_U8_PushButtonRead+0x96>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    1f04:	8b e2       	ldi	r24, 0x2B	; 43
    1f06:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    1f0a:	88 23       	and	r24, r24
    1f0c:	29 f0       	breq	.+10     	; 0x1f18 <H_PushButton_U8_PushButtonRead+0xae>
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	08 95       	ret
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	08 95       	ret
    1f16:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
}
    1f18:	08 95       	ret

00001f1a <H_PushButton_Void_PushButtonInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
	switch(Copy_U8_PushButton)
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	61 f0       	breq	.+24     	; 0x1f36 <H_PushButton_Void_PushButtonInit+0x1c>
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	28 f0       	brcs	.+10     	; 0x1f2c <H_PushButton_Void_PushButtonInit+0x12>
    1f22:	82 30       	cpi	r24, 0x02	; 2
    1f24:	69 f0       	breq	.+26     	; 0x1f40 <H_PushButton_Void_PushButtonInit+0x26>
    1f26:	83 30       	cpi	r24, 0x03	; 3
    1f28:	a1 f4       	brne	.+40     	; 0x1f52 <H_PushButton_Void_PushButtonInit+0x38>
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <H_PushButton_Void_PushButtonInit+0x30>
	{
	case PUSH_BUTTON_0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT); break;
    1f2c:	8f e2       	ldi	r24, 0x2F	; 47
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
    1f34:	08 95       	ret
	case PUSH_BUTTON_1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT); break;
    1f36:	8e e2       	ldi	r24, 0x2E	; 46
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
    1f3e:	08 95       	ret
	case PUSH_BUTTON_2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT); break;
    1f40:	8d e2       	ldi	r24, 0x2D	; 45
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
    1f48:	08 95       	ret
	case PUSH_BUTTON_3: M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT); break;
    1f4a:	8b e2       	ldi	r24, 0x2B	; 43
    1f4c:	60 e0       	ldi	r22, 0x00	; 0
    1f4e:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
    1f52:	08 95       	ret

00001f54 <H_LED_Void_LedTog>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1f54:	82 30       	cpi	r24, 0x02	; 2
    1f56:	71 f0       	breq	.+28     	; 0x1f74 <H_LED_Void_LedTog+0x20>
    1f58:	83 30       	cpi	r24, 0x03	; 3
    1f5a:	18 f4       	brcc	.+6      	; 0x1f62 <H_LED_Void_LedTog+0xe>
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	a9 f4       	brne	.+42     	; 0x1f8a <H_LED_Void_LedTog+0x36>
    1f60:	05 c0       	rjmp	.+10     	; 0x1f6c <H_LED_Void_LedTog+0x18>
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	59 f0       	breq	.+22     	; 0x1f7c <H_LED_Void_LedTog+0x28>
    1f66:	84 30       	cpi	r24, 0x04	; 4
    1f68:	81 f4       	brne	.+32     	; 0x1f8a <H_LED_Void_LedTog+0x36>
    1f6a:	0c c0       	rjmp	.+24     	; 0x1f84 <H_LED_Void_LedTog+0x30>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    1f6c:	80 e1       	ldi	r24, 0x10	; 16
    1f6e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <M_DIO_Void_TogPin>
    1f72:	08 95       	ret
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    1f74:	8f e0       	ldi	r24, 0x0F	; 15
    1f76:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <M_DIO_Void_TogPin>
    1f7a:	08 95       	ret
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    1f7c:	8e e0       	ldi	r24, 0x0E	; 14
    1f7e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <M_DIO_Void_TogPin>
    1f82:	08 95       	ret
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    1f84:	8b e1       	ldi	r24, 0x1B	; 27
    1f86:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <M_DIO_Void_TogPin>
    1f8a:	08 95       	ret

00001f8c <H_LED_Void_LedBlink>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1f8c:	82 30       	cpi	r24, 0x02	; 2
    1f8e:	51 f1       	breq	.+84     	; 0x1fe4 <H_LED_Void_LedBlink+0x58>
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	20 f4       	brcc	.+8      	; 0x1f9c <H_LED_Void_LedBlink+0x10>
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <H_LED_Void_LedBlink+0xe>
    1f98:	5d c0       	rjmp	.+186    	; 0x2054 <H_LED_Void_LedBlink+0xc8>
    1f9a:	07 c0       	rjmp	.+14     	; 0x1faa <H_LED_Void_LedBlink+0x1e>
    1f9c:	83 30       	cpi	r24, 0x03	; 3
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <H_LED_Void_LedBlink+0x16>
    1fa0:	34 c0       	rjmp	.+104    	; 0x200a <H_LED_Void_LedBlink+0x7e>
    1fa2:	84 30       	cpi	r24, 0x04	; 4
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <H_LED_Void_LedBlink+0x1c>
    1fa6:	56 c0       	rjmp	.+172    	; 0x2054 <H_LED_Void_LedBlink+0xc8>
    1fa8:	43 c0       	rjmp	.+134    	; 0x2030 <H_LED_Void_LedBlink+0xa4>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    1faa:	80 e1       	ldi	r24, 0x10	; 16
    1fac:	61 e0       	ldi	r22, 0x01	; 1
    1fae:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    1fb2:	28 e8       	ldi	r18, 0x88	; 136
    1fb4:	33 e1       	ldi	r19, 0x13	; 19
    1fb6:	49 e1       	ldi	r20, 0x19	; 25
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	ca 01       	movw	r24, r20
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <H_LED_Void_LedBlink+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	21 50       	subi	r18, 0x01	; 1
    1fc2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc4:	d1 f7       	brne	.-12     	; 0x1fba <H_LED_Void_LedBlink+0x2e>
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    1fc6:	80 e1       	ldi	r24, 0x10	; 16
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    1fce:	28 e8       	ldi	r18, 0x88	; 136
    1fd0:	33 e1       	ldi	r19, 0x13	; 19
    1fd2:	49 e1       	ldi	r20, 0x19	; 25
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <H_LED_Void_LedBlink+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fdc:	21 50       	subi	r18, 0x01	; 1
    1fde:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	d1 f7       	brne	.-12     	; 0x1fd6 <H_LED_Void_LedBlink+0x4a>
    1fe2:	08 95       	ret
		_delay_ms(LED_BLINKING_TIME);
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    1fe4:	8f e0       	ldi	r24, 0x0F	; 15
    1fe6:	61 e0       	ldi	r22, 0x01	; 1
    1fe8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    1fec:	28 e8       	ldi	r18, 0x88	; 136
    1fee:	33 e1       	ldi	r19, 0x13	; 19
    1ff0:	49 e1       	ldi	r20, 0x19	; 25
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	ca 01       	movw	r24, r20
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <H_LED_Void_LedBlink+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	21 50       	subi	r18, 0x01	; 1
    1ffc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	d1 f7       	brne	.-12     	; 0x1ff4 <H_LED_Void_LedBlink+0x68>
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    2000:	8f e0       	ldi	r24, 0x0F	; 15
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    2008:	08 95       	ret
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    200a:	8e e0       	ldi	r24, 0x0E	; 14
    200c:	61 e0       	ldi	r22, 0x01	; 1
    200e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    2012:	28 e8       	ldi	r18, 0x88	; 136
    2014:	33 e1       	ldi	r19, 0x13	; 19
    2016:	49 e1       	ldi	r20, 0x19	; 25
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	ca 01       	movw	r24, r20
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <H_LED_Void_LedBlink+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	21 50       	subi	r18, 0x01	; 1
    2022:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2024:	d1 f7       	brne	.-12     	; 0x201a <H_LED_Void_LedBlink+0x8e>
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    2026:	8e e0       	ldi	r24, 0x0E	; 14
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    202e:	08 95       	ret
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    2030:	8b e1       	ldi	r24, 0x1B	; 27
    2032:	61 e0       	ldi	r22, 0x01	; 1
    2034:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    2038:	28 e8       	ldi	r18, 0x88	; 136
    203a:	33 e1       	ldi	r19, 0x13	; 19
    203c:	49 e1       	ldi	r20, 0x19	; 25
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	ca 01       	movw	r24, r20
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <H_LED_Void_LedBlink+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204a:	d1 f7       	brne	.-12     	; 0x2040 <H_LED_Void_LedBlink+0xb4>
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    204c:	8b e1       	ldi	r24, 0x1B	; 27
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    2054:	08 95       	ret

00002056 <H_LED_Void_LedOff>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	79 f0       	breq	.+30     	; 0x2078 <H_LED_Void_LedOff+0x22>
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	18 f4       	brcc	.+6      	; 0x2064 <H_LED_Void_LedOff+0xe>
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	c9 f4       	brne	.+50     	; 0x2094 <H_LED_Void_LedOff+0x3e>
    2062:	05 c0       	rjmp	.+10     	; 0x206e <H_LED_Void_LedOff+0x18>
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	69 f0       	breq	.+26     	; 0x2082 <H_LED_Void_LedOff+0x2c>
    2068:	84 30       	cpi	r24, 0x04	; 4
    206a:	a1 f4       	brne	.+40     	; 0x2094 <H_LED_Void_LedOff+0x3e>
    206c:	0f c0       	rjmp	.+30     	; 0x208c <H_LED_Void_LedOff+0x36>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    206e:	80 e1       	ldi	r24, 0x10	; 16
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    2076:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    2078:	8f e0       	ldi	r24, 0x0F	; 15
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    2080:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    2082:	8e e0       	ldi	r24, 0x0E	; 14
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    208a:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    208c:	8b e1       	ldi	r24, 0x1B	; 27
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    2094:	08 95       	ret

00002096 <H_LED_Void_LedOn>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	79 f0       	breq	.+30     	; 0x20b8 <H_LED_Void_LedOn+0x22>
    209a:	83 30       	cpi	r24, 0x03	; 3
    209c:	18 f4       	brcc	.+6      	; 0x20a4 <H_LED_Void_LedOn+0xe>
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	c9 f4       	brne	.+50     	; 0x20d4 <H_LED_Void_LedOn+0x3e>
    20a2:	05 c0       	rjmp	.+10     	; 0x20ae <H_LED_Void_LedOn+0x18>
    20a4:	83 30       	cpi	r24, 0x03	; 3
    20a6:	69 f0       	breq	.+26     	; 0x20c2 <H_LED_Void_LedOn+0x2c>
    20a8:	84 30       	cpi	r24, 0x04	; 4
    20aa:	a1 f4       	brne	.+40     	; 0x20d4 <H_LED_Void_LedOn+0x3e>
    20ac:	0f c0       	rjmp	.+30     	; 0x20cc <H_LED_Void_LedOn+0x36>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    20ae:	80 e1       	ldi	r24, 0x10	; 16
    20b0:	61 e0       	ldi	r22, 0x01	; 1
    20b2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    20b6:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    20b8:	8f e0       	ldi	r24, 0x0F	; 15
    20ba:	61 e0       	ldi	r22, 0x01	; 1
    20bc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    20c0:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    20c2:	8e e0       	ldi	r24, 0x0E	; 14
    20c4:	61 e0       	ldi	r22, 0x01	; 1
    20c6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    20ca:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    20cc:	8b e1       	ldi	r24, 0x1B	; 27
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    20d4:	08 95       	ret

000020d6 <H_LED_Void_LedInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    20d6:	82 30       	cpi	r24, 0x02	; 2
    20d8:	79 f0       	breq	.+30     	; 0x20f8 <H_LED_Void_LedInit+0x22>
    20da:	83 30       	cpi	r24, 0x03	; 3
    20dc:	18 f4       	brcc	.+6      	; 0x20e4 <H_LED_Void_LedInit+0xe>
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	c9 f4       	brne	.+50     	; 0x2114 <H_LED_Void_LedInit+0x3e>
    20e2:	05 c0       	rjmp	.+10     	; 0x20ee <H_LED_Void_LedInit+0x18>
    20e4:	83 30       	cpi	r24, 0x03	; 3
    20e6:	69 f0       	breq	.+26     	; 0x2102 <H_LED_Void_LedInit+0x2c>
    20e8:	84 30       	cpi	r24, 0x04	; 4
    20ea:	a1 f4       	brne	.+40     	; 0x2114 <H_LED_Void_LedInit+0x3e>
    20ec:	0f c0       	rjmp	.+30     	; 0x210c <H_LED_Void_LedInit+0x36>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    20ee:	80 e1       	ldi	r24, 0x10	; 16
    20f0:	61 e0       	ldi	r22, 0x01	; 1
    20f2:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
    20f6:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    20f8:	8f e0       	ldi	r24, 0x0F	; 15
    20fa:	61 e0       	ldi	r22, 0x01	; 1
    20fc:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
    2100:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    2102:	8e e0       	ldi	r24, 0x0E	; 14
    2104:	61 e0       	ldi	r22, 0x01	; 1
    2106:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
    210a:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    210c:	8b e1       	ldi	r24, 0x1B	; 27
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
    2114:	08 95       	ret

00002116 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	1f 93       	push	r17
    211c:	18 2f       	mov	r17, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    211e:	8d e0       	ldi	r24, 0x0D	; 13
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    2126:	61 2f       	mov	r22, r17
    2128:	62 95       	swap	r22
    212a:	6f 70       	andi	r22, 0x0F	; 15
    212c:	61 70       	andi	r22, 0x01	; 1
    212e:	84 e1       	ldi	r24, 0x14	; 20
    2130:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    2134:	61 2f       	mov	r22, r17
    2136:	62 95       	swap	r22
    2138:	66 95       	lsr	r22
    213a:	67 70       	andi	r22, 0x07	; 7
    213c:	61 70       	andi	r22, 0x01	; 1
    213e:	85 e1       	ldi	r24, 0x15	; 21
    2140:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    2144:	61 2f       	mov	r22, r17
    2146:	62 95       	swap	r22
    2148:	66 95       	lsr	r22
    214a:	66 95       	lsr	r22
    214c:	63 70       	andi	r22, 0x03	; 3
    214e:	61 70       	andi	r22, 0x01	; 1
    2150:	86 e1       	ldi	r24, 0x16	; 22
    2152:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    2156:	61 2f       	mov	r22, r17
    2158:	66 1f       	adc	r22, r22
    215a:	66 27       	eor	r22, r22
    215c:	66 1f       	adc	r22, r22
    215e:	88 e1       	ldi	r24, 0x18	; 24
    2160:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2164:	8c e0       	ldi	r24, 0x0C	; 12
    2166:	61 e0       	ldi	r22, 0x01	; 1
    2168:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    216c:	0f 2e       	mov	r0, r31
    216e:	fa ef       	ldi	r31, 0xFA	; 250
    2170:	ef 2e       	mov	r14, r31
    2172:	ff 24       	eor	r15, r15
    2174:	f0 2d       	mov	r31, r0
    2176:	c7 01       	movw	r24, r14
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <H_Lcd_Void_LCDWriteCommand+0x62>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    217c:	8c e0       	ldi	r24, 0x0C	; 12
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    2184:	c7 01       	movw	r24, r14
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <H_Lcd_Void_LCDWriteCommand+0x70>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    218a:	61 2f       	mov	r22, r17
    218c:	61 70       	andi	r22, 0x01	; 1
    218e:	84 e1       	ldi	r24, 0x14	; 20
    2190:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    2194:	61 2f       	mov	r22, r17
    2196:	66 95       	lsr	r22
    2198:	61 70       	andi	r22, 0x01	; 1
    219a:	85 e1       	ldi	r24, 0x15	; 21
    219c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    21a0:	61 2f       	mov	r22, r17
    21a2:	66 95       	lsr	r22
    21a4:	66 95       	lsr	r22
    21a6:	61 70       	andi	r22, 0x01	; 1
    21a8:	86 e1       	ldi	r24, 0x16	; 22
    21aa:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    21ae:	16 95       	lsr	r17
    21b0:	16 95       	lsr	r17
    21b2:	16 95       	lsr	r17
    21b4:	11 70       	andi	r17, 0x01	; 1
    21b6:	88 e1       	ldi	r24, 0x18	; 24
    21b8:	61 2f       	mov	r22, r17
    21ba:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    21be:	8c e0       	ldi	r24, 0x0C	; 12
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    21c6:	c7 01       	movw	r24, r14
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <H_Lcd_Void_LCDWriteCommand+0xb2>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    21cc:	8c e0       	ldi	r24, 0x0C	; 12
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    21d4:	82 ee       	ldi	r24, 0xE2	; 226
    21d6:	94 e0       	ldi	r25, 0x04	; 4
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <H_Lcd_Void_LCDWriteCommand+0xc2>
	_delay_ms(5);
#endif
}
    21dc:	1f 91       	pop	r17
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	08 95       	ret

000021e4 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <H_Lcd_Void_LCDGoTo+0x6>
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <H_Lcd_Void_LCDGoTo+0x8>
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    21f0:	90 e8       	ldi	r25, 0x80	; 128
    21f2:	99 83       	std	Y+1, r25	; 0x01
    21f4:	90 ec       	ldi	r25, 0xC0	; 192
    21f6:	9a 83       	std	Y+2, r25	; 0x02
    21f8:	94 e9       	ldi	r25, 0x94	; 148
    21fa:	9b 83       	std	Y+3, r25	; 0x03
    21fc:	94 ed       	ldi	r25, 0xD4	; 212
    21fe:	9c 83       	std	Y+4, r25	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    2200:	fe 01       	movw	r30, r28
    2202:	e8 0f       	add	r30, r24
    2204:	f1 1d       	adc	r31, r1
    2206:	81 81       	ldd	r24, Z+1	; 0x01
    2208:	86 0f       	add	r24, r22
    220a:	0e 94 8b 10 	call	0x2116	; 0x2116 <H_Lcd_Void_LCDWriteCommand>
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <H_Lcd_Void_LCDClear>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	0e 94 8b 10 	call	0x2116	; 0x2116 <H_Lcd_Void_LCDWriteCommand>
}
    2222:	08 95       	ret

00002224 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	1f 93       	push	r17
    222a:	18 2f       	mov	r17, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    222c:	8d e0       	ldi	r24, 0x0D	; 13
    222e:	61 e0       	ldi	r22, 0x01	; 1
    2230:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    2234:	61 2f       	mov	r22, r17
    2236:	62 95       	swap	r22
    2238:	6f 70       	andi	r22, 0x0F	; 15
    223a:	61 70       	andi	r22, 0x01	; 1
    223c:	84 e1       	ldi	r24, 0x14	; 20
    223e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    2242:	61 2f       	mov	r22, r17
    2244:	62 95       	swap	r22
    2246:	66 95       	lsr	r22
    2248:	67 70       	andi	r22, 0x07	; 7
    224a:	61 70       	andi	r22, 0x01	; 1
    224c:	85 e1       	ldi	r24, 0x15	; 21
    224e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    2252:	61 2f       	mov	r22, r17
    2254:	62 95       	swap	r22
    2256:	66 95       	lsr	r22
    2258:	66 95       	lsr	r22
    225a:	63 70       	andi	r22, 0x03	; 3
    225c:	61 70       	andi	r22, 0x01	; 1
    225e:	86 e1       	ldi	r24, 0x16	; 22
    2260:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    2264:	61 2f       	mov	r22, r17
    2266:	66 1f       	adc	r22, r22
    2268:	66 27       	eor	r22, r22
    226a:	66 1f       	adc	r22, r22
    226c:	88 e1       	ldi	r24, 0x18	; 24
    226e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2272:	8c e0       	ldi	r24, 0x0C	; 12
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    227a:	0f 2e       	mov	r0, r31
    227c:	fa ef       	ldi	r31, 0xFA	; 250
    227e:	ef 2e       	mov	r14, r31
    2280:	ff 24       	eor	r15, r15
    2282:	f0 2d       	mov	r31, r0
    2284:	c7 01       	movw	r24, r14
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <H_Lcd_Void_LCDWriteCharacter+0x62>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    228a:	8c e0       	ldi	r24, 0x0C	; 12
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    2292:	c7 01       	movw	r24, r14
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <H_Lcd_Void_LCDWriteCharacter+0x70>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    2298:	61 2f       	mov	r22, r17
    229a:	61 70       	andi	r22, 0x01	; 1
    229c:	84 e1       	ldi	r24, 0x14	; 20
    229e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    22a2:	61 2f       	mov	r22, r17
    22a4:	66 95       	lsr	r22
    22a6:	61 70       	andi	r22, 0x01	; 1
    22a8:	85 e1       	ldi	r24, 0x15	; 21
    22aa:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    22ae:	61 2f       	mov	r22, r17
    22b0:	66 95       	lsr	r22
    22b2:	66 95       	lsr	r22
    22b4:	61 70       	andi	r22, 0x01	; 1
    22b6:	86 e1       	ldi	r24, 0x16	; 22
    22b8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    22bc:	16 95       	lsr	r17
    22be:	16 95       	lsr	r17
    22c0:	16 95       	lsr	r17
    22c2:	11 70       	andi	r17, 0x01	; 1
    22c4:	88 e1       	ldi	r24, 0x18	; 24
    22c6:	61 2f       	mov	r22, r17
    22c8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    22cc:	8c e0       	ldi	r24, 0x0C	; 12
    22ce:	61 e0       	ldi	r22, 0x01	; 1
    22d0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    22d4:	c7 01       	movw	r24, r14
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <H_Lcd_Void_LCDWriteCharacter+0xb2>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    22da:	8c e0       	ldi	r24, 0x0C	; 12
    22dc:	60 e0       	ldi	r22, 0x00	; 0
    22de:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    22e2:	82 ee       	ldi	r24, 0xE2	; 226
    22e4:	94 e0       	ldi	r25, 0x04	; 4
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <H_Lcd_Void_LCDWriteCharacter+0xc2>
	_delay_ms(5);
#endif
}
    22ea:	1f 91       	pop	r17
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	08 95       	ret

000022f2 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    22f2:	af 92       	push	r10
    22f4:	bf 92       	push	r11
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	2c 97       	sbiw	r28, 0x0c	; 12
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	6b 01       	movw	r12, r22
    2316:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = 0;
	u8 Local_U8_Arr[10] = {0};
	if(Copy_S32_Number < 0)
    2318:	99 23       	and	r25, r25
    231a:	5c f4       	brge	.+22     	; 0x2332 <H_Lcd_Void_LCDWriteNumber+0x40>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    231c:	f0 94       	com	r15
    231e:	e0 94       	com	r14
    2320:	d0 94       	com	r13
    2322:	c0 94       	com	r12
    2324:	c1 1c       	adc	r12, r1
    2326:	d1 1c       	adc	r13, r1
    2328:	e1 1c       	adc	r14, r1
    232a:	f1 1c       	adc	r15, r1
		H_Lcd_Void_LCDWriteCharacter('-');
    232c:	8d e2       	ldi	r24, 0x2D	; 45
    232e:	0e 94 12 11 	call	0x2224	; 0x2224 <H_Lcd_Void_LCDWriteCharacter>
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
	s8 Local_S8_Counter = 0;
	u8 Local_U8_Arr[10] = {0};
    2332:	fe 01       	movw	r30, r28
    2334:	31 96       	adiw	r30, 0x01	; 1
    2336:	8a e0       	ldi	r24, 0x0A	; 10
    2338:	df 01       	movw	r26, r30
    233a:	1d 92       	st	X+, r1
    233c:	8a 95       	dec	r24
    233e:	e9 f7       	brne	.-6      	; 0x233a <H_Lcd_Void_LCDWriteNumber+0x48>
    2340:	00 e0       	ldi	r16, 0x00	; 0
		H_Lcd_Void_LCDWriteCharacter('-');
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    2342:	5f 01       	movw	r10, r30
    2344:	80 2f       	mov	r24, r16
    2346:	99 27       	eor	r25, r25
    2348:	87 fd       	sbrc	r24, 7
    234a:	90 95       	com	r25
    234c:	f5 01       	movw	r30, r10
    234e:	e8 0f       	add	r30, r24
    2350:	f9 1f       	adc	r31, r25
    2352:	fc 87       	std	Y+12, r31	; 0x0c
    2354:	eb 87       	std	Y+11, r30	; 0x0b
    2356:	c7 01       	movw	r24, r14
    2358:	b6 01       	movw	r22, r12
    235a:	2a e0       	ldi	r18, 0x0A	; 10
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__divmodsi4>
    2366:	ab 85       	ldd	r26, Y+11	; 0x0b
    2368:	bc 85       	ldd	r27, Y+12	; 0x0c
    236a:	6c 93       	st	X, r22
		Copy_S32_Number                = Copy_S32_Number / 10;
    236c:	c7 01       	movw	r24, r14
    236e:	b6 01       	movw	r22, r12
    2370:	2a e0       	ldi	r18, 0x0A	; 10
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__divmodsi4>
    237c:	82 2f       	mov	r24, r18
    237e:	93 2f       	mov	r25, r19
    2380:	a4 2f       	mov	r26, r20
    2382:	b5 2f       	mov	r27, r21
    2384:	6c 01       	movw	r12, r24
    2386:	7d 01       	movw	r14, r26
		Local_S8_Counter++;
    2388:	0f 5f       	subi	r16, 0xFF	; 255
	}while(Copy_S32_Number != 0);
    238a:	c1 14       	cp	r12, r1
    238c:	d1 04       	cpc	r13, r1
    238e:	e1 04       	cpc	r14, r1
    2390:	f1 04       	cpc	r15, r1
    2392:	c1 f6       	brne	.-80     	; 0x2344 <H_Lcd_Void_LCDWriteNumber+0x52>

	while(Local_S8_Counter > 0)
    2394:	10 16       	cp	r1, r16
    2396:	94 f4       	brge	.+36     	; 0x23bc <H_Lcd_Void_LCDWriteNumber+0xca>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    2398:	7e 01       	movw	r14, r28
    239a:	08 94       	sec
    239c:	e1 1c       	adc	r14, r1
    239e:	f1 1c       	adc	r15, r1
    23a0:	01 50       	subi	r16, 0x01	; 1
    23a2:	80 2f       	mov	r24, r16
    23a4:	99 27       	eor	r25, r25
    23a6:	87 fd       	sbrc	r24, 7
    23a8:	90 95       	com	r25
    23aa:	f7 01       	movw	r30, r14
    23ac:	e8 0f       	add	r30, r24
    23ae:	f9 1f       	adc	r31, r25
    23b0:	80 81       	ld	r24, Z
    23b2:	80 5d       	subi	r24, 0xD0	; 208
    23b4:	0e 94 12 11 	call	0x2224	; 0x2224 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    23b8:	10 16       	cp	r1, r16
    23ba:	94 f3       	brlt	.-28     	; 0x23a0 <H_Lcd_Void_LCDWriteNumber+0xae>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    23bc:	2c 96       	adiw	r28, 0x0c	; 12
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	0f 91       	pop	r16
    23ce:	ff 90       	pop	r15
    23d0:	ef 90       	pop	r14
    23d2:	df 90       	pop	r13
    23d4:	cf 90       	pop	r12
    23d6:	bf 90       	pop	r11
    23d8:	af 90       	pop	r10
    23da:	08 95       	ret

000023dc <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    23dc:	1f 93       	push	r17
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	ec 01       	movw	r28, r24
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    23e4:	88 81       	ld	r24, Y
    23e6:	88 23       	and	r24, r24
    23e8:	51 f0       	breq	.+20     	; 0x23fe <H_Lcd_Void_LCDWriteString+0x22>
    23ea:	10 e0       	ldi	r17, 0x00	; 0
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    23ec:	0e 94 12 11 	call	0x2224	; 0x2224 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    23f0:	1f 5f       	subi	r17, 0xFF	; 255
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    23f2:	fe 01       	movw	r30, r28
    23f4:	e1 0f       	add	r30, r17
    23f6:	f1 1d       	adc	r31, r1
    23f8:	80 81       	ld	r24, Z
    23fa:	88 23       	and	r24, r24
    23fc:	b9 f7       	brne	.-18     	; 0x23ec <H_Lcd_Void_LCDWriteString+0x10>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
    2404:	08 95       	ret

00002406 <H_Lcd_Void_LCDInit>:

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    2406:	84 e1       	ldi	r24, 0x14	; 20
    2408:	61 e0       	ldi	r22, 0x01	; 1
    240a:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    240e:	85 e1       	ldi	r24, 0x15	; 21
    2410:	61 e0       	ldi	r22, 0x01	; 1
    2412:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    2416:	86 e1       	ldi	r24, 0x16	; 22
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    241e:	88 e1       	ldi	r24, 0x18	; 24
    2420:	61 e0       	ldi	r22, 0x01	; 1
    2422:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    2426:	8d e0       	ldi	r24, 0x0D	; 13
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    242e:	8c e0       	ldi	r24, 0x0C	; 12
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    2436:	83 e3       	ldi	r24, 0x33	; 51
    2438:	0e 94 8b 10 	call	0x2116	; 0x2116 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    243c:	82 e3       	ldi	r24, 0x32	; 50
    243e:	0e 94 8b 10 	call	0x2116	; 0x2116 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    2442:	88 e2       	ldi	r24, 0x28	; 40
    2444:	0e 94 8b 10 	call	0x2116	; 0x2116 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    2448:	8c e0       	ldi	r24, 0x0C	; 12
    244a:	0e 94 8b 10 	call	0x2116	; 0x2116 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	0e 94 8b 10 	call	0x2116	; 0x2116 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	0e 94 8b 10 	call	0x2116	; 0x2116 <H_Lcd_Void_LCDWriteCommand>


#endif
}
    245a:	08 95       	ret

0000245c <H_KeyPad_U8_KeyPadRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{
    245c:	2f 92       	push	r2
    245e:	3f 92       	push	r3
    2460:	4f 92       	push	r4
    2462:	5f 92       	push	r5
    2464:	6f 92       	push	r6
    2466:	7f 92       	push	r7
    2468:	8f 92       	push	r8
    246a:	9f 92       	push	r9
    246c:	af 92       	push	r10
    246e:	bf 92       	push	r11
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	69 97       	sbiw	r28, 0x19	; 25
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_KeypadRowPins[4] = { KEYPAD_R0_PIN , KEYPAD_R1_PIN , KEYPAD_R2_PIN , KEYPAD_R3_PIN };
    2490:	83 e2       	ldi	r24, 0x23	; 35
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	82 e2       	ldi	r24, 0x22	; 34
    2496:	8a 83       	std	Y+2, r24	; 0x02
    2498:	81 e2       	ldi	r24, 0x21	; 33
    249a:	8b 83       	std	Y+3, r24	; 0x03
    249c:	80 e2       	ldi	r24, 0x20	; 32
    249e:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_KeypadColPins[4] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN , KEYPAD_C3_PIN };
    24a0:	8f e2       	ldi	r24, 0x2F	; 47
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	8e e2       	ldi	r24, 0x2E	; 46
    24a6:	8e 83       	std	Y+6, r24	; 0x06
    24a8:	8d e2       	ldi	r24, 0x2D	; 45
    24aa:	8f 83       	std	Y+7, r24	; 0x07
    24ac:	8b e2       	ldi	r24, 0x2B	; 43
    24ae:	88 87       	std	Y+8, r24	; 0x08
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [4][4] = {{ '1' , '2' , '3' , 'A' },
			                          { '4' , '5' , '6' , 'B' },
							          { '7' , '8' , '9' , 'C' },
						         	  { '*' , '0' , '#' , 'D' }};
    24b0:	de 01       	movw	r26, r28
    24b2:	19 96       	adiw	r26, 0x09	; 9
    24b4:	e9 ee       	ldi	r30, 0xE9	; 233
    24b6:	f1 e0       	ldi	r31, 0x01	; 1
    24b8:	80 e1       	ldi	r24, 0x10	; 16
    24ba:	01 90       	ld	r0, Z+
    24bc:	0d 92       	st	X+, r0
    24be:	81 50       	subi	r24, 0x01	; 1
    24c0:	e1 f7       	brne	.-8      	; 0x24ba <H_KeyPad_U8_KeyPadRead+0x5e>
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	89 8f       	std	Y+25, r24	; 0x19
    24c6:	cc 24       	eor	r12, r12
    24c8:	dd 24       	eor	r13, r13
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
    24ca:	1e 01       	movw	r2, r28
    24cc:	08 94       	sec
    24ce:	21 1c       	adc	r2, r1
    24d0:	31 1c       	adc	r3, r1
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    24d2:	0f 2e       	mov	r0, r31
    24d4:	f5 e0       	ldi	r31, 0x05	; 5
    24d6:	8f 2e       	mov	r8, r31
    24d8:	99 24       	eor	r9, r9
    24da:	f0 2d       	mov	r31, r0
    24dc:	8c 0e       	add	r8, r28
    24de:	9d 1e       	adc	r9, r29
    24e0:	0f 2e       	mov	r0, r31
    24e2:	f0 e1       	ldi	r31, 0x10	; 16
    24e4:	4f 2e       	mov	r4, r31
    24e6:	f7 e2       	ldi	r31, 0x27	; 39
    24e8:	5f 2e       	mov	r5, r31
    24ea:	f0 2d       	mov	r31, r0
	u8 Local_U8_KeypadColPins[4] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN , KEYPAD_C3_PIN };
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [4][4] = {{ '1' , '2' , '3' , 'A' },
			                          { '4' , '5' , '6' , 'B' },
							          { '7' , '8' , '9' , 'C' },
						         	  { '*' , '0' , '#' , 'D' }};
    24ec:	36 01       	movw	r6, r12
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
    24ee:	f1 01       	movw	r30, r2
    24f0:	ec 0d       	add	r30, r12
    24f2:	fd 1d       	adc	r31, r13
    24f4:	e0 80       	ld	r14, Z
    24f6:	8e 2d       	mov	r24, r14
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    24fe:	00 e0       	ldi	r16, 0x00	; 0
    2500:	10 e0       	ldi	r17, 0x00	; 0
    2502:	58 01       	movw	r10, r16
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    2504:	f4 01       	movw	r30, r8
    2506:	e0 0f       	add	r30, r16
    2508:	f1 1f       	adc	r31, r17
    250a:	f0 80       	ld	r15, Z
    250c:	8f 2d       	mov	r24, r15
    250e:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    2512:	88 23       	and	r24, r24
    2514:	d1 f4       	brne	.+52     	; 0x254a <H_KeyPad_U8_KeyPadRead+0xee>
    2516:	c2 01       	movw	r24, r4
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <H_KeyPad_U8_KeyPadRead+0xbc>
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    251c:	8f 2d       	mov	r24, r15
    251e:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    2522:	88 23       	and	r24, r24
    2524:	91 f4       	brne	.+36     	; 0x254a <H_KeyPad_U8_KeyPadRead+0xee>
				{
					while(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED);
    2526:	8f 2d       	mov	r24, r15
    2528:	0e 94 37 0c 	call	0x186e	; 0x186e <M_DIO_Void_GetPinValue>
    252c:	88 23       	and	r24, r24
    252e:	d9 f3       	breq	.-10     	; 0x2526 <H_KeyPad_U8_KeyPadRead+0xca>
					Local_U8_Reading = Local_U8_KeypadValue[Local_U8_RowCounter][Local_U8_ColCounter];
    2530:	c3 01       	movw	r24, r6
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	f1 01       	movw	r30, r2
    253c:	e8 0f       	add	r30, r24
    253e:	f9 1f       	adc	r31, r25
    2540:	ea 0d       	add	r30, r10
    2542:	fb 1d       	adc	r31, r11
    2544:	80 85       	ldd	r24, Z+8	; 0x08
    2546:	89 8f       	std	Y+25, r24	; 0x19
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <H_KeyPad_U8_KeyPadRead+0xf8>
					break;
    254a:	0f 5f       	subi	r16, 0xFF	; 255
    254c:	1f 4f       	sbci	r17, 0xFF	; 255
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
    254e:	04 30       	cpi	r16, 0x04	; 4
    2550:	11 05       	cpc	r17, r1
    2552:	b9 f6       	brne	.-82     	; 0x2502 <H_KeyPad_U8_KeyPadRead+0xa6>
					break;
				}

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
    2554:	8e 2d       	mov	r24, r14
    2556:	61 e0       	ldi	r22, 0x01	; 1
    2558:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    255c:	08 94       	sec
    255e:	c1 1c       	adc	r12, r1
    2560:	d1 1c       	adc	r13, r1
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
    2562:	84 e0       	ldi	r24, 0x04	; 4
    2564:	c8 16       	cp	r12, r24
    2566:	d1 04       	cpc	r13, r1
    2568:	09 f0       	breq	.+2      	; 0x256c <H_KeyPad_U8_KeyPadRead+0x110>
    256a:	c0 cf       	rjmp	.-128    	; 0x24ec <H_KeyPad_U8_KeyPadRead+0x90>
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
	}
return Local_U8_Reading;
}
    256c:	89 8d       	ldd	r24, Y+25	; 0x19
    256e:	69 96       	adiw	r28, 0x19	; 25
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	1f 91       	pop	r17
    2580:	0f 91       	pop	r16
    2582:	ff 90       	pop	r15
    2584:	ef 90       	pop	r14
    2586:	df 90       	pop	r13
    2588:	cf 90       	pop	r12
    258a:	bf 90       	pop	r11
    258c:	af 90       	pop	r10
    258e:	9f 90       	pop	r9
    2590:	8f 90       	pop	r8
    2592:	7f 90       	pop	r7
    2594:	6f 90       	pop	r6
    2596:	5f 90       	pop	r5
    2598:	4f 90       	pop	r4
    259a:	3f 90       	pop	r3
    259c:	2f 90       	pop	r2
    259e:	08 95       	ret

000025a0 <H_KeyPad_Void_KeyPadInit>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    25a0:	83 e2       	ldi	r24, 0x23	; 35
    25a2:	61 e0       	ldi	r22, 0x01	; 1
    25a4:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    25a8:	82 e2       	ldi	r24, 0x22	; 34
    25aa:	61 e0       	ldi	r22, 0x01	; 1
    25ac:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    25b0:	81 e2       	ldi	r24, 0x21	; 33
    25b2:	61 e0       	ldi	r22, 0x01	; 1
    25b4:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    25b8:	80 e2       	ldi	r24, 0x20	; 32
    25ba:	61 e0       	ldi	r22, 0x01	; 1
    25bc:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    25c0:	83 e2       	ldi	r24, 0x23	; 35
    25c2:	61 e0       	ldi	r22, 0x01	; 1
    25c4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    25c8:	82 e2       	ldi	r24, 0x22	; 34
    25ca:	61 e0       	ldi	r22, 0x01	; 1
    25cc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    25d0:	81 e2       	ldi	r24, 0x21	; 33
    25d2:	61 e0       	ldi	r22, 0x01	; 1
    25d4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    25d8:	80 e2       	ldi	r24, 0x20	; 32
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    25e0:	8f e2       	ldi	r24, 0x2F	; 47
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    25e8:	8e e2       	ldi	r24, 0x2E	; 46
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    25f0:	8d e2       	ldi	r24, 0x2D	; 45
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
    25f8:	8b e2       	ldi	r24, 0x2B	; 43
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
}
    2600:	08 95       	ret

00002602 <H_EEPROM_U8_EEPROMRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_EEPROM_U8_EEPROMRead(u8 Copy_U8_PageNumber,u8 Copy_U8_ByteNumber)
{
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	18 2f       	mov	r17, r24
    2608:	06 2f       	mov	r16, r22
	u8 Local_U8_Data = 0;
	M_I2C_Void_StartCondition();
    260a:	0e 94 8e 0a 	call	0x151c	; 0x151c <M_I2C_Void_StartCondition>
	M_I2C_Void_SendSlaveAddressWrite(EEPROM_MASK | Copy_U8_PageNumber);
    260e:	10 65       	ori	r17, 0x50	; 80
    2610:	81 2f       	mov	r24, r17
    2612:	0e 94 bb 0a 	call	0x1576	; 0x1576 <M_I2C_Void_SendSlaveAddressWrite>
	M_I2C_Void_SendByte(Copy_U8_ByteNumber);         /*   TO SEND BYTE NUMBER   */
    2616:	80 2f       	mov	r24, r16
    2618:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <M_I2C_Void_SendByte>
	M_I2C_Void_RepeatedStart();
    261c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <M_I2C_Void_RepeatedStart>
	M_I2C_Void_SendSlaveAddressRead(EEPROM_MASK | Copy_U8_PageNumber);
    2620:	81 2f       	mov	r24, r17
    2622:	0e 94 cc 0a 	call	0x1598	; 0x1598 <M_I2C_Void_SendSlaveAddressRead>
	Local_U8_Data = M_I2C_U8_ReadByte();
    2626:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <M_I2C_U8_ReadByte>
    262a:	18 2f       	mov	r17, r24
	M_I2C_Void_StopCondition();
    262c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <M_I2C_Void_StopCondition>
	return Local_U8_Data;
}
    2630:	81 2f       	mov	r24, r17
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	08 95       	ret

00002638 <H_EEPROM_Void_EEPROMWrite>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_EEPROM_Void_EEPROMWrite(u8 Copy_U8_PageNumber,u8 Copy_U8_ByteNumber,u8 Copy_U8_Data)
{
    2638:	ff 92       	push	r15
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	18 2f       	mov	r17, r24
    2640:	06 2f       	mov	r16, r22
    2642:	f4 2e       	mov	r15, r20
	M_I2C_Void_StartCondition();
    2644:	0e 94 8e 0a 	call	0x151c	; 0x151c <M_I2C_Void_StartCondition>
	M_I2C_Void_SendSlaveAddressWrite(EEPROM_MASK | Copy_U8_PageNumber);
    2648:	81 2f       	mov	r24, r17
    264a:	80 65       	ori	r24, 0x50	; 80
    264c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <M_I2C_Void_SendSlaveAddressWrite>
	M_I2C_Void_SendByte(Copy_U8_ByteNumber);         /*   TO SEND BYTE NUMBER   */
    2650:	80 2f       	mov	r24, r16
    2652:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <M_I2C_Void_SendByte>
	M_I2C_Void_SendByte(Copy_U8_Data);               /*   TO SEND DATA          */
    2656:	8f 2d       	mov	r24, r15
    2658:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <M_I2C_Void_SendByte>
	M_I2C_Void_StopCondition();
    265c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <M_I2C_Void_StopCondition>
}
    2660:	1f 91       	pop	r17
    2662:	0f 91       	pop	r16
    2664:	ff 90       	pop	r15
    2666:	08 95       	ret

00002668 <H_EEPROM_Void_EEPROMInit>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_EEPROM_Void_EEPROMInit(void)
{
	M_I2C_Void_I2CInit();
    2668:	0e 94 86 0a 	call	0x150c	; 0x150c <M_I2C_Void_I2CInit>
    266c:	28 e8       	ldi	r18, 0x88	; 136
    266e:	33 e1       	ldi	r19, 0x13	; 19
    2670:	49 e1       	ldi	r20, 0x19	; 25
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	ca 01       	movw	r24, r20
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <H_EEPROM_Void_EEPROMInit+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	21 50       	subi	r18, 0x01	; 1
    267c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267e:	d1 f7       	brne	.-12     	; 0x2674 <H_EEPROM_Void_EEPROMInit+0xc>
	_delay_ms(500);
}
    2680:	08 95       	ret

00002682 <H_Buzzer_Void_BuzzerTwice>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTwice(void)
{
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    2686:	84 e2       	ldi	r24, 0x24	; 36
    2688:	61 e0       	ldi	r22, 0x01	; 1
    268a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    268e:	00 e2       	ldi	r16, 0x20	; 32
    2690:	1e e4       	ldi	r17, 0x4E	; 78
    2692:	c8 01       	movw	r24, r16
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <H_Buzzer_Void_BuzzerTwice+0x12>
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    2698:	84 e2       	ldi	r24, 0x24	; 36
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    26a0:	88 e9       	ldi	r24, 0x98	; 152
    26a2:	9a e3       	ldi	r25, 0x3A	; 58
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <H_Buzzer_Void_BuzzerTwice+0x22>
	_delay_ms(BUZZER_OFF_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    26a8:	84 e2       	ldi	r24, 0x24	; 36
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    26b0:	c8 01       	movw	r24, r16
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <H_Buzzer_Void_BuzzerTwice+0x30>
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    26b6:	84 e2       	ldi	r24, 0x24	; 36
    26b8:	60 e0       	ldi	r22, 0x00	; 0
    26ba:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
}
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	08 95       	ret

000026c4 <H_Buzzer_Void_BuzzerOnce>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOnce(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    26c4:	84 e2       	ldi	r24, 0x24	; 36
    26c6:	61 e0       	ldi	r22, 0x01	; 1
    26c8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
    26cc:	80 e2       	ldi	r24, 0x20	; 32
    26ce:	9e e4       	ldi	r25, 0x4E	; 78
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <H_Buzzer_Void_BuzzerOnce+0xc>
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    26d4:	84 e2       	ldi	r24, 0x24	; 36
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
}
    26dc:	08 95       	ret

000026de <H_Buzzer_Void_BuzzerOff>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    26de:	84 e2       	ldi	r24, 0x24	; 36
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
}
    26e6:	08 95       	ret

000026e8 <H_Buzzer_Void_BuzzerOn>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    26e8:	84 e2       	ldi	r24, 0x24	; 36
    26ea:	61 e0       	ldi	r22, 0x01	; 1
    26ec:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
}
    26f0:	08 95       	ret

000026f2 <H_Buzzer_Void_BuzzerTog>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTog(void)
{
	M_DIO_Void_TogPin(BUZZER_PIN);
    26f2:	84 e2       	ldi	r24, 0x24	; 36
    26f4:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <M_DIO_Void_TogPin>
}
    26f8:	08 95       	ret

000026fa <H_Buzzer_Void_BuzzerInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
    26fa:	84 e2       	ldi	r24, 0x24	; 36
    26fc:	61 e0       	ldi	r22, 0x01	; 1
    26fe:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
}
    2702:	08 95       	ret

00002704 <UART_init>:
#define BAUD_PRESCALE (((F_CPU / (9600 * 16UL))) - 1)

#include "STD.h"
void UART_init(void)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
    2704:	ea e2       	ldi	r30, 0x2A	; 42
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	88 61       	ori	r24, 0x18	; 24
    270c:	80 83       	st	Z, r24
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
    270e:	e0 e4       	ldi	r30, 0x40	; 64
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	86 68       	ori	r24, 0x86	; 134
    2716:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
    2718:	87 e6       	ldi	r24, 0x67	; 103
    271a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
    271c:	10 82       	st	Z, r1


}
    271e:	08 95       	ret

00002720 <UART_RxChar>:

unsigned char UART_RxChar()
{
	int counter=0;
	while ( ((UCSRA & (1 << RXC)) == 0) && (counter<2000)){/* Wait till data is received */
    2720:	8b b1       	in	r24, 0x0b	; 11
    2722:	88 23       	and	r24, r24
    2724:	6c f0       	brlt	.+26     	; 0x2740 <UART_RxChar+0x20>
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	eb e2       	ldi	r30, 0x2B	; 43
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	88 23       	and	r24, r24
    2732:	34 f0       	brlt	.+12     	; 0x2740 <UART_RxChar+0x20>
		counter++;
    2734:	2f 5f       	subi	r18, 0xFF	; 255
    2736:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char UART_RxChar()
{
	int counter=0;
	while ( ((UCSRA & (1 << RXC)) == 0) && (counter<2000)){/* Wait till data is received */
    2738:	87 e0       	ldi	r24, 0x07	; 7
    273a:	20 3d       	cpi	r18, 0xD0	; 208
    273c:	38 07       	cpc	r19, r24
    273e:	b9 f7       	brne	.-18     	; 0x272e <UART_RxChar+0xe>
		counter++;
	}
	return(UDR);			/* Return the byte*/
    2740:	8c b1       	in	r24, 0x0c	; 12
}
    2742:	08 95       	ret

00002744 <UART_TxChar>:
void UART_TxChar(char ch)
{
    2744:	98 2f       	mov	r25, r24
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
    2746:	eb e2       	ldi	r30, 0x2B	; 43
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	85 ff       	sbrs	r24, 5
    274e:	fd cf       	rjmp	.-6      	; 0x274a <UART_TxChar+0x6>
	UDR = ch ;
    2750:	9c b9       	out	0x0c, r25	; 12
}
    2752:	08 95       	ret

00002754 <UART_SendString>:

void UART_SendString(char *str)
{
    2754:	1f 93       	push	r17
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	ec 01       	movw	r28, r24
	unsigned char j=0;

	while (str[j]!=0)		/* Send string till null */
    275c:	88 81       	ld	r24, Y
    275e:	88 23       	and	r24, r24
    2760:	51 f0       	breq	.+20     	; 0x2776 <UART_SendString+0x22>
    2762:	10 e0       	ldi	r17, 0x00	; 0
	{
		UART_TxChar(str[j]);
    2764:	0e 94 a2 13 	call	0x2744	; 0x2744 <UART_TxChar>
		j++;
    2768:	1f 5f       	subi	r17, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;

	while (str[j]!=0)		/* Send string till null */
    276a:	fe 01       	movw	r30, r28
    276c:	e1 0f       	add	r30, r17
    276e:	f1 1d       	adc	r31, r1
    2770:	80 81       	ld	r24, Z
    2772:	88 23       	and	r24, r24
    2774:	b9 f7       	brne	.-18     	; 0x2764 <UART_SendString+0x10>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	08 95       	ret

0000277e <__vector_9>:
//#define TCNT0_REG     *(volatile u8*)0x52
#define PRESS_THRESHOLD  5000000
u8 CPS_SYS_STAT= 0;
int TimerOverflow = 0;
u16 LDR_read=0;
ISR(TIMER1_OVF_vect) {
    277e:	1f 92       	push	r1
    2780:	0f 92       	push	r0
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	0f 92       	push	r0
    2786:	11 24       	eor	r1, r1
    2788:	8f 93       	push	r24
    278a:	9f 93       	push	r25
	TimerOverflow++; /* Increment Timer Overflow count */
    278c:	80 91 1e 02 	lds	r24, 0x021E
    2790:	90 91 1f 02 	lds	r25, 0x021F
    2794:	01 96       	adiw	r24, 0x01	; 1
    2796:	90 93 1f 02 	sts	0x021F, r25
    279a:	80 93 1e 02 	sts	0x021E, r24
}
    279e:	9f 91       	pop	r25
    27a0:	8f 91       	pop	r24
    27a2:	0f 90       	pop	r0
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	0f 90       	pop	r0
    27a8:	1f 90       	pop	r1
    27aa:	18 95       	reti

000027ac <main>:

	}

}
u8 Uart_dataRead=0;
int main() {
    27ac:	2f 92       	push	r2
    27ae:	3f 92       	push	r3
    27b0:	4f 92       	push	r4
    27b2:	5f 92       	push	r5
    27b4:	6f 92       	push	r6
    27b6:	7f 92       	push	r7
    27b8:	8f 92       	push	r8
    27ba:	9f 92       	push	r9
    27bc:	af 92       	push	r10
    27be:	bf 92       	push	r11
    27c0:	cf 92       	push	r12
    27c2:	df 92       	push	r13
    27c4:	ef 92       	push	r14
    27c6:	ff 92       	push	r15
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
	Icu_init();
    27d0:	0e 94 76 0a 	call	0x14ec	; 0x14ec <Icu_init>
//	M_Timer_Void_PWMStart(TIMER0_CHANNEL);
//	M_DIO_Void_SetPinDirection(PB6_PIN , OUTPUT);
//	M_DIO_Void_SetPinDirection(PB5_PIN , OUTPUT);
//	M_DIO_Void_SetPinValue(PB6_PIN , HIGH);
	//----------------------------
	H_Lcd_Void_LCDInit();
    27d4:	0e 94 03 12 	call	0x2406	; 0x2406 <H_Lcd_Void_LCDInit>
	M_Timer_Void_Timer2_Init();
    27d8:	0e 94 45 08 	call	0x108a	; 0x108a <M_Timer_Void_Timer2_Init>
//	M_Timer_Void_TimerInit();
	M_GIE_Void_GlobalInterruptEnable();
    27dc:	0e 94 01 0b 	call	0x1602	; 0x1602 <M_GIE_Void_GlobalInterruptEnable>
	//M_Timer_Void_TimerSetTime(120);
	M_Timer_Void_Timer2_SetTime(2000);
    27e0:	60 ed       	ldi	r22, 0xD0	; 208
    27e2:	77 e0       	ldi	r23, 0x07	; 7
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	0e 94 53 08 	call	0x10a6	; 0x10a6 <M_Timer_Void_Timer2_SetTime>
	//Sys_init_end--------------------------------

	 u8 EEPROM_Read_sysStat=0;
	 u8 EEPROM_Read_sysWaiting=0;
	 u16 EEPROM_Read_sysUltraSonic=0;
	 H_LED_Void_LedInit(LED_BLU);
    27ec:	82 e0       	ldi	r24, 0x02	; 2
    27ee:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <H_LED_Void_LedInit>

		H_Lcd_Void_LCDGoTo(0, 1);
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("  CCS : ");
    27fa:	80 e6       	ldi	r24, 0x60	; 96
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>

	 //------------------------------------------------- at initalization check last state of the system activation
	 H_EEPROM_Void_EEPROMInit();
    2802:	0e 94 34 13 	call	0x2668	; 0x2668 <H_EEPROM_Void_EEPROMInit>
    2806:	88 eb       	ldi	r24, 0xB8	; 184
    2808:	9b e0       	ldi	r25, 0x0B	; 11
    280a:	20 e9       	ldi	r18, 0x90	; 144
    280c:	31 e0       	ldi	r19, 0x01	; 1
    280e:	f9 01       	movw	r30, r18
    2810:	31 97       	sbiw	r30, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	d9 f7       	brne	.-10     	; 0x280e <main+0x62>
	 _delay_ms(300);
	 EEPROM_Read_sysStat=H_EEPROM_U8_EEPROMRead(0,1);     // read system status
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	0e 94 01 13 	call	0x2602	; 0x2602 <H_EEPROM_U8_EEPROMRead>
	 if (EEPROM_Read_sysStat==Sys_on_EEPROM){
    2820:	8c 32       	cpi	r24, 0x2C	; 44
    2822:	79 f4       	brne	.+30     	; 0x2842 <main+0x96>
	 sys_state=Sys_On;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	80 93 24 02 	sts	0x0224, r24
	 H_LED_Void_LedOn(LED_RED);
    282a:	84 e0       	ldi	r24, 0x04	; 4
    282c:	0e 94 4b 10 	call	0x2096	; 0x2096 <H_LED_Void_LedOn>
		H_Lcd_Void_LCDGoTo(0, 12);             //sys on
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	6c e0       	ldi	r22, 0x0C	; 12
    2834:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("   on   ");
    2838:	89 e6       	ldi	r24, 0x69	; 105
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
    2840:	0f c0       	rjmp	.+30     	; 0x2860 <main+0xb4>
	 }
	 else if (EEPROM_Read_sysStat==Sys_off_EEPROM)
    2842:	8c 33       	cpi	r24, 0x3C	; 60
    2844:	69 f4       	brne	.+26     	; 0x2860 <main+0xb4>
	 {
	 sys_state=Sys_Off;
    2846:	10 92 24 02 	sts	0x0224, r1
	 H_LED_Void_LedOff(LED_RED);
    284a:	84 e0       	ldi	r24, 0x04	; 4
    284c:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
		H_Lcd_Void_LCDGoTo(0, 12);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	6c e0       	ldi	r22, 0x0C	; 12
    2854:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("   off   ");
    2858:	82 e7       	ldi	r24, 0x72	; 114
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
	 }
	 //------------------------------------------------- at initalization check last state of the system waiting status
	 EEPROM_Read_sysWaiting=H_EEPROM_U8_EEPROMRead(0,4);     // read waiting system status
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	64 e0       	ldi	r22, 0x04	; 4
    2864:	0e 94 01 13 	call	0x2602	; 0x2602 <H_EEPROM_U8_EEPROMRead>
if (EEPROM_Read_sysWaiting==Sys_WaitingOn_EEPROM){
    2868:	84 31       	cpi	r24, 0x14	; 20
    286a:	21 f4       	brne	.+8      	; 0x2874 <main+0xc8>
	waiting_state=1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	80 93 25 02 	sts	0x0225, r24
    2872:	04 c0       	rjmp	.+8      	; 0x287c <main+0xd0>
}
else if (EEPROM_Read_sysWaiting==Sys_WaitingOff_EEPROM){
    2874:	8e 31       	cpi	r24, 0x1E	; 30
    2876:	11 f4       	brne	.+4      	; 0x287c <main+0xd0>
	waiting_state=0;
    2878:	10 92 25 02 	sts	0x0225, r1
    287c:	80 e1       	ldi	r24, 0x10	; 16
    287e:	97 e2       	ldi	r25, 0x27	; 39
    2880:	20 e9       	ldi	r18, 0x90	; 144
    2882:	31 e0       	ldi	r19, 0x01	; 1
    2884:	f9 01       	movw	r30, r18
    2886:	31 97       	sbiw	r30, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <main+0xda>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	d9 f7       	brne	.-10     	; 0x2884 <main+0xd8>
}
//----------------------------------------------------------------------------------------------------------------

_delay_ms(1000);
 EEPROM_Read_sysUltraSonic=H_EEPROM_U8_EEPROMRead(0,5);     // read ultrasonic value
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	65 e0       	ldi	r22, 0x05	; 5
    2892:	0e 94 01 13 	call	0x2602	; 0x2602 <H_EEPROM_U8_EEPROMRead>
    2896:	e8 2e       	mov	r14, r24
 //EEPROM_Read_sysUltraSonic=( (EEPROM_Read_sysUltraSonic<<8 )|((u16)(H_EEPROM_U8_EEPROMRead(0,6) )));
H_Lcd_Void_LCDGoTo(3, 11);
    2898:	83 e0       	ldi	r24, 0x03	; 3
    289a:	6b e0       	ldi	r22, 0x0B	; 11
    289c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
H_Lcd_Void_LCDWriteNumber(EEPROM_Read_sysUltraSonic);
    28a0:	ff 24       	eor	r15, r15
    28a2:	00 e0       	ldi	r16, 0x00	; 0
    28a4:	10 e0       	ldi	r17, 0x00	; 0
    28a6:	c8 01       	movw	r24, r16
    28a8:	b7 01       	movw	r22, r14
    28aa:	0e 94 79 11 	call	0x22f2	; 0x22f2 <H_Lcd_Void_LCDWriteNumber>
H_Lcd_Void_LCDGoTo(3, 0);
    28ae:	83 e0       	ldi	r24, 0x03	; 3
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
H_Lcd_Void_LCDWriteString("last ulra:");
    28b6:	8c e7       	ldi	r24, 0x7C	; 124
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>

M_ADC_Void_ADCInit();
    28be:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <M_ADC_Void_ADCInit>

M_DIO_Void_SetPinValue(PA0_PIN , HIGH);
    28c2:	8a e0       	ldi	r24, 0x0A	; 10
    28c4:	61 e0       	ldi	r22, 0x01	; 1
    28c6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
UART_init();
    28ca:	0e 94 82 13 	call	0x2704	; 0x2704 <UART_init>
	//Sys_init------------------------------------
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_3);	// sys_button
    28ce:	83 e0       	ldi	r24, 0x03	; 3
    28d0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <H_PushButton_Void_PushButtonInit>
	H_LED_Void_LedInit(LED_RED);						//sys led
    28d4:	84 e0       	ldi	r24, 0x04	; 4
    28d6:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <H_LED_Void_LedInit>
	//------------------------------
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_0);	// gas_button
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <H_PushButton_Void_PushButtonInit>
	H_LED_Void_LedInit(LED_YEL);						//Gas led
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <H_LED_Void_LedInit>
	//------------------------------
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_2);	// waiting_button
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <H_PushButton_Void_PushButtonInit>
	H_LED_Void_LedInit(LED_GRN);						//waiting led
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <H_LED_Void_LedInit>
	//----------------------------

	H_LED_Void_LedInit(LED_BLU);						//waiting led
    28f2:	82 e0       	ldi	r24, 0x02	; 2
    28f4:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <H_LED_Void_LedInit>
	//----------------------------
	M_DIO_Void_SetPinDirection(PC7_PIN, OUTPUT);
    28f8:	85 e2       	ldi	r24, 0x25	; 37
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PA7_PIN, OUTPUT);
    2900:	81 e1       	ldi	r24, 0x11	; 17
    2902:	61 e0       	ldi	r22, 0x01	; 1
    2904:	0e 94 0d 0b 	call	0x161a	; 0x161a <M_DIO_Void_SetPinDirection>
    2908:	bb 24       	eor	r11, r11
    290a:	dd 24       	eor	r13, r13

	{
		//------------------UtralSonic_section---------------
		UtralSonic_trig();

		UtralSonic_RISING_edge(&error_flag_rising);
    290c:	0f 2e       	mov	r0, r31
    290e:	f8 e1       	ldi	r31, 0x18	; 24
    2910:	4f 2e       	mov	r4, r31
    2912:	f2 e0       	ldi	r31, 0x02	; 2
    2914:	5f 2e       	mov	r5, r31
    2916:	f0 2d       	mov	r31, r0
		/*		 Wait for rising edge */

		TimerOverflow = 0;/* Clear Timer overflow count */
//
		UtralSonic_FAILING_edge(&error_flag_falling);
    2918:	0f 2e       	mov	r0, r31
    291a:	f4 e1       	ldi	r31, 0x14	; 20
    291c:	2f 2e       	mov	r2, r31
    291e:	f2 e0       	ldi	r31, 0x02	; 2
    2920:	3f 2e       	mov	r3, r31
    2922:	f0 2d       	mov	r31, r0
		fail_flag = 0;
}
else if (LDR_read<500){
		H_Lcd_Void_LCDGoTo(1,9 );
		H_Lcd_Void_LCDWriteString(" Day  ");
		fail_flag = 0;
    2924:	0f 2e       	mov	r0, r31
    2926:	f4 ef       	ldi	r31, 0xF4	; 244
    2928:	8f 2e       	mov	r8, r31
    292a:	f1 e0       	ldi	r31, 0x01	; 1
    292c:	9f 2e       	mov	r9, r31
    292e:	f0 2d       	mov	r31, r0
    2930:	c0 e9       	ldi	r28, 0x90	; 144
    2932:	d1 e0       	ldi	r29, 0x01	; 1

		//------------------------------------------------------

/*--------------------------------------------------------------------------------------------------------------------------------------------*/
if(fail_flag == 0){
		dtostrf(local_dis, 2, 2, string);
    2934:	0f 2e       	mov	r0, r31
    2936:	ff e2       	ldi	r31, 0x2F	; 47
    2938:	6f 2e       	mov	r6, r31
    293a:	f2 e0       	ldi	r31, 0x02	; 2
    293c:	7f 2e       	mov	r7, r31
    293e:	f0 2d       	mov	r31, r0

		H_Lcd_Void_LCDGoTo(2, 0);
		strcat(string, " cm   ");
    2940:	0f 2e       	mov	r0, r31
    2942:	f7 e0       	ldi	r31, 0x07	; 7
    2944:	af 2e       	mov	r10, r31
    2946:	f0 2d       	mov	r31, r0
    2948:	05 c0       	rjmp	.+10     	; 0x2954 <main+0x1a8>
			H_Lcd_Void_LCDClear();
			H_Lcd_Void_LCDGoTo(0, 8);
			H_Lcd_Void_LCDWriteString(" Ultra Fail");
			fail_flag = 1;
		}
		last_read=local_dis;
    294a:	c7 01       	movw	r24, r14
    294c:	b6 01       	movw	r22, r12
    294e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2952:	d6 2e       	mov	r13, r22

	while (1)

	{
		//------------------UtralSonic_section---------------
		UtralSonic_trig();
    2954:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <UtralSonic_trig>

		UtralSonic_RISING_edge(&error_flag_rising);
    2958:	c2 01       	movw	r24, r4
    295a:	0e 94 11 0a 	call	0x1422	; 0x1422 <UtralSonic_RISING_edge>
		/*		 Wait for rising edge */

		TimerOverflow = 0;/* Clear Timer overflow count */
    295e:	10 92 1f 02 	sts	0x021F, r1
    2962:	10 92 1e 02 	sts	0x021E, r1
//
		UtralSonic_FAILING_edge(&error_flag_falling);
    2966:	c1 01       	movw	r24, r2
    2968:	0e 94 2f 0a 	call	0x145e	; 0x145e <UtralSonic_FAILING_edge>
		if ((error_flag_falling==200000000)||(error_flag_rising==200000000)){
    296c:	80 91 14 02 	lds	r24, 0x0214
    2970:	90 91 15 02 	lds	r25, 0x0215
    2974:	a0 91 16 02 	lds	r26, 0x0216
    2978:	b0 91 17 02 	lds	r27, 0x0217
    297c:	80 50       	subi	r24, 0x00	; 0
    297e:	92 4c       	sbci	r25, 0xC2	; 194
    2980:	ab 4e       	sbci	r26, 0xEB	; 235
    2982:	bb 40       	sbci	r27, 0x0B	; 11
    2984:	69 f0       	breq	.+26     	; 0x29a0 <main+0x1f4>
    2986:	80 91 18 02 	lds	r24, 0x0218
    298a:	90 91 19 02 	lds	r25, 0x0219
    298e:	a0 91 1a 02 	lds	r26, 0x021A
    2992:	b0 91 1b 02 	lds	r27, 0x021B
    2996:	80 50       	subi	r24, 0x00	; 0
    2998:	92 4c       	sbci	r25, 0xC2	; 194
    299a:	ab 4e       	sbci	r26, 0xEB	; 235
    299c:	bb 40       	sbci	r27, 0x0B	; 11
    299e:	41 f4       	brne	.+16     	; 0x29b0 <main+0x204>

			H_Lcd_Void_LCDGoTo(2, 10);
    29a0:	82 e0       	ldi	r24, 0x02	; 2
    29a2:	6a e0       	ldi	r22, 0x0A	; 10
    29a4:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("fail");
    29a8:	87 e8       	ldi	r24, 0x87	; 135
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>

		}

		//_delay_ms(100);

	 	Uart_dataRead = UART_RxChar();
    29b0:	0e 94 90 13 	call	0x2720	; 0x2720 <UART_RxChar>
    29b4:	80 93 2a 02 	sts	0x022A, r24

		//_delay_ms(100);

		local_dis = Ultra_get_dis(TimerOverflow);
    29b8:	60 91 1e 02 	lds	r22, 0x021E
    29bc:	70 91 1f 02 	lds	r23, 0x021F
    29c0:	88 27       	eor	r24, r24
    29c2:	77 fd       	sbrc	r23, 7
    29c4:	80 95       	com	r24
    29c6:	98 2f       	mov	r25, r24
    29c8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <Ultra_get_dis>
    29cc:	60 93 3d 02 	sts	0x023D, r22
    29d0:	70 93 3e 02 	sts	0x023E, r23
    29d4:	80 93 3f 02 	sts	0x023F, r24
    29d8:	90 93 40 02 	sts	0x0240, r25

		H_EEPROM_Void_EEPROMWrite(0,5,(u16)local_dis);
    29dc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29e0:	9b 01       	movw	r18, r22
    29e2:	ac 01       	movw	r20, r24
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	65 e0       	ldi	r22, 0x05	; 5
    29e8:	42 2f       	mov	r20, r18
    29ea:	0e 94 1c 13 	call	0x2638	; 0x2638 <H_EEPROM_Void_EEPROMWrite>
		//_delay_ms(400);
		//H_EEPROM_Void_EEPROMWrite(0,6,((u16)local_dis)>>8);


		if (local_dis > 5 && sys_state == Sys_On) {
    29ee:	e0 90 3d 02 	lds	r14, 0x023D
    29f2:	f0 90 3e 02 	lds	r15, 0x023E
    29f6:	00 91 3f 02 	lds	r16, 0x023F
    29fa:	10 91 40 02 	lds	r17, 0x0240
    29fe:	c8 01       	movw	r24, r16
    2a00:	b7 01       	movw	r22, r14
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 ea       	ldi	r20, 0xA0	; 160
    2a08:	50 e4       	ldi	r21, 0x40	; 64
    2a0a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a0e:	18 16       	cp	r1, r24
    2a10:	3c f4       	brge	.+14     	; 0x2a20 <main+0x274>
    2a12:	80 91 24 02 	lds	r24, 0x0224
    2a16:	81 30       	cpi	r24, 0x01	; 1
    2a18:	19 f4       	brne	.+6      	; 0x2a20 <main+0x274>
			H_LED_Void_LedOn(LED_YEL);
    2a1a:	0e 94 4b 10 	call	0x2096	; 0x2096 <H_LED_Void_LedOn>
    2a1e:	10 c0       	rjmp	.+32     	; 0x2a40 <main+0x294>
			//	M_DIO_Void_SetPinValue(PB6_PIN , HIGH);        		 //motor enable
		} else if (local_dis < 5 && sys_state == Sys_On) {
    2a20:	c8 01       	movw	r24, r16
    2a22:	b7 01       	movw	r22, r14
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 ea       	ldi	r20, 0xA0	; 160
    2a2a:	50 e4       	ldi	r21, 0x40	; 64
    2a2c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2a30:	88 23       	and	r24, r24
    2a32:	34 f4       	brge	.+12     	; 0x2a40 <main+0x294>
    2a34:	80 91 24 02 	lds	r24, 0x0224
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	11 f4       	brne	.+4      	; 0x2a40 <main+0x294>
			H_LED_Void_LedOff(LED_YEL);
    2a3c:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
			//	M_DIO_Void_SetPinValue(PB6_PIN , LOW); 			  //motor disable
		}
		if ((sys_state == Sys_Off) && (GAS_STAT ==0)){
    2a40:	80 91 24 02 	lds	r24, 0x0224
    2a44:	88 23       	and	r24, r24
    2a46:	39 f4       	brne	.+14     	; 0x2a56 <main+0x2aa>
    2a48:	80 91 22 02 	lds	r24, 0x0222
    2a4c:	88 23       	and	r24, r24
    2a4e:	19 f4       	brne	.+6      	; 0x2a56 <main+0x2aa>
			H_LED_Void_LedOff(LED_YEL);
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
		}

		if ((u8)local_dis==last_read){
    2a56:	60 91 3d 02 	lds	r22, 0x023D
    2a5a:	70 91 3e 02 	lds	r23, 0x023E
    2a5e:	80 91 3f 02 	lds	r24, 0x023F
    2a62:	90 91 40 02 	lds	r25, 0x0240
    2a66:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a6a:	d6 16       	cp	r13, r22
    2a6c:	79 f4       	brne	.+30     	; 0x2a8c <main+0x2e0>
			uart_counter++;
    2a6e:	b3 94       	inc	r11
			H_Lcd_Void_LCDGoTo(1, 0);
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteNumber(uart_counter);
    2a78:	6b 2d       	mov	r22, r11
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 79 11 	call	0x22f2	; 0x22f2 <H_Lcd_Void_LCDWriteNumber>
			H_Lcd_Void_LCDWriteString("  CCS :    ");
			fail_flag = 0;
			uart_counter=0;
		}

		if ((u8)uart_counter==40){
    2a84:	88 e2       	ldi	r24, 0x28	; 40
    2a86:	b8 16       	cp	r11, r24
    2a88:	69 f0       	breq	.+26     	; 0x2aa4 <main+0x2f8>
    2a8a:	24 c0       	rjmp	.+72     	; 0x2ad4 <main+0x328>
			H_Lcd_Void_LCDGoTo(1, 0);
			H_Lcd_Void_LCDWriteNumber(uart_counter);
		}
		else
		{
			H_Lcd_Void_LCDGoTo(0, 0);
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("  CCS :    ");
    2a94:	8c e8       	ldi	r24, 0x8C	; 140
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
			fail_flag = 0;
    2a9c:	10 92 1c 02 	sts	0x021C, r1
    2aa0:	bb 24       	eor	r11, r11
    2aa2:	18 c0       	rjmp	.+48     	; 0x2ad4 <main+0x328>
			uart_counter=0;
		}

		if ((u8)uart_counter==40){
			uart_counter=0;
			H_Lcd_Void_LCDGoTo(1, 0);
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteNumber(uart_counter);
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	0e 94 79 11 	call	0x22f2	; 0x22f2 <H_Lcd_Void_LCDWriteNumber>
			H_Lcd_Void_LCDClear();
    2ab8:	0e 94 0e 11 	call	0x221c	; 0x221c <H_Lcd_Void_LCDClear>
			H_Lcd_Void_LCDGoTo(0, 8);
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	68 e0       	ldi	r22, 0x08	; 8
    2ac0:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(" Ultra Fail");
    2ac4:	88 e9       	ldi	r24, 0x98	; 152
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
			fail_flag = 1;
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	80 93 1c 02 	sts	0x021C, r24
    2ad2:	bb 24       	eor	r11, r11
		}
		last_read=local_dis;
    2ad4:	c0 90 3d 02 	lds	r12, 0x023D
    2ad8:	d0 90 3e 02 	lds	r13, 0x023E
    2adc:	e0 90 3f 02 	lds	r14, 0x023F
    2ae0:	f0 90 40 02 	lds	r15, 0x0240


		//--------------------------LDR_section--------------------------


		LDR_read =M_ADC_Void_ADCRead(ADC_CHANNEL_0);
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <M_ADC_Void_ADCRead>
    2aea:	90 93 21 02 	sts	0x0221, r25
    2aee:	80 93 20 02 	sts	0x0220, r24
		//LDR = (i*10/(5-i));

		//dtostrf(LDR, 4, 1, LDRSHOW);
		//H_Lcd_Void_LCDGoTo(3,0 );
		//H_Lcd_Void_LCDWriteNumber(LDR_read);
if(LDR_read == 1023)
    2af2:	23 e0       	ldi	r18, 0x03	; 3
    2af4:	8f 3f       	cpi	r24, 0xFF	; 255
    2af6:	92 07       	cpc	r25, r18
    2af8:	71 f4       	brne	.+28     	; 0x2b16 <main+0x36a>
{
	H_Lcd_Void_LCDClear();
    2afa:	0e 94 0e 11 	call	0x221c	; 0x221c <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDGoTo(0, 8);
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	68 e0       	ldi	r22, 0x08	; 8
    2b02:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString(" LDR Fail");
    2b06:	84 ea       	ldi	r24, 0xA4	; 164
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
	fail_flag = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	80 93 1c 02 	sts	0x021C, r24
    2b14:	18 c0       	rjmp	.+48     	; 0x2b46 <main+0x39a>
}
else if (LDR_read>=500){
    2b16:	84 5f       	subi	r24, 0xF4	; 244
    2b18:	91 40       	sbci	r25, 0x01	; 1
    2b1a:	58 f0       	brcs	.+22     	; 0x2b32 <main+0x386>
		H_Lcd_Void_LCDGoTo(1,9 );
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	69 e0       	ldi	r22, 0x09	; 9
    2b20:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString( " Night  ");
    2b24:	8e ea       	ldi	r24, 0xAE	; 174
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
		fail_flag = 0;
    2b2c:	10 92 1c 02 	sts	0x021C, r1
    2b30:	0a c0       	rjmp	.+20     	; 0x2b46 <main+0x39a>
}
else if (LDR_read<500){
		H_Lcd_Void_LCDGoTo(1,9 );
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	69 e0       	ldi	r22, 0x09	; 9
    2b36:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString(" Day  ");
    2b3a:	87 eb       	ldi	r24, 0xB7	; 183
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
		fail_flag = 0;
    2b42:	10 92 1c 02 	sts	0x021C, r1
    2b46:	94 01       	movw	r18, r8
    2b48:	ce 01       	movw	r24, r28
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <main+0x39e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4e:	21 50       	subi	r18, 0x01	; 1
    2b50:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b52:	d1 f7       	brne	.-12     	; 0x2b48 <main+0x39c>


		//------------------------------------------------------

/*--------------------------------------------------------------------------------------------------------------------------------------------*/
if(fail_flag == 0){
    2b54:	80 91 1c 02 	lds	r24, 0x021C
    2b58:	88 23       	and	r24, r24
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <main+0x3b2>
    2b5c:	f6 ce       	rjmp	.-532    	; 0x294a <main+0x19e>
		dtostrf(local_dis, 2, 2, string);
    2b5e:	60 91 3d 02 	lds	r22, 0x023D
    2b62:	70 91 3e 02 	lds	r23, 0x023E
    2b66:	80 91 3f 02 	lds	r24, 0x023F
    2b6a:	90 91 40 02 	lds	r25, 0x0240
    2b6e:	42 e0       	ldi	r20, 0x02	; 2
    2b70:	22 e0       	ldi	r18, 0x02	; 2
    2b72:	83 01       	movw	r16, r6
    2b74:	0e 94 15 18 	call	0x302a	; 0x302a <dtostrf>

		H_Lcd_Void_LCDGoTo(2, 0);
    2b78:	82 e0       	ldi	r24, 0x02	; 2
    2b7a:	60 e0       	ldi	r22, 0x00	; 0
    2b7c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
		strcat(string, " cm   ");
    2b80:	f3 01       	movw	r30, r6
    2b82:	01 90       	ld	r0, Z+
    2b84:	00 20       	and	r0, r0
    2b86:	e9 f7       	brne	.-6      	; 0x2b82 <main+0x3d6>
    2b88:	31 97       	sbiw	r30, 0x01	; 1
    2b8a:	8e 2f       	mov	r24, r30
    2b8c:	9f 2f       	mov	r25, r31
    2b8e:	dc 01       	movw	r26, r24
    2b90:	ee eb       	ldi	r30, 0xBE	; 190
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	8a 2d       	mov	r24, r10
    2b96:	01 90       	ld	r0, Z+
    2b98:	0d 92       	st	X+, r0
    2b9a:	81 50       	subi	r24, 0x01	; 1
    2b9c:	e1 f7       	brne	.-8      	; 0x2b96 <main+0x3ea>
		H_Lcd_Void_LCDWriteString(string);
    2b9e:	c3 01       	movw	r24, r6
    2ba0:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
    2ba4:	20 ed       	ldi	r18, 0xD0	; 208
    2ba6:	37 e0       	ldi	r19, 0x07	; 7
    2ba8:	ce 01       	movw	r24, r28
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <main+0x3fe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	21 50       	subi	r18, 0x01	; 1
    2bb0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb2:	d1 f7       	brne	.-12     	; 0x2ba8 <main+0x3fc>



		//-------------------------Gas_button_check---------------------------------------

		Pu_0_return_u8 = H_PushButton_U8_PushButtonRead(PUSH_BUTTON_0);
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <H_PushButton_U8_PushButtonRead>
    2bba:	98 2f       	mov	r25, r24
    2bbc:	80 93 e7 01 	sts	0x01E7, r24

		if (((Pu_0_return_u8 == PUSH_BUTTON_PRESSED) ||(Uart_dataRead=='a')) )// EDIT HERE FOR ULTRA SONIC
    2bc0:	88 23       	and	r24, r24
    2bc2:	21 f0       	breq	.+8      	; 0x2bcc <main+0x420>
    2bc4:	80 91 2a 02 	lds	r24, 0x022A
    2bc8:	81 36       	cpi	r24, 0x61	; 97
    2bca:	49 f4       	brne	.+18     	; 0x2bde <main+0x432>
		{
			//GAS_STAT;
			GAS_STAT=(GAS_STAT==0)? 1:0 ;   // gas state toggile
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	80 91 22 02 	lds	r24, 0x0222
    2bd2:	88 23       	and	r24, r24
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <main+0x42c>
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	90 93 22 02 	sts	0x0222, r25
    2bdc:	0d c0       	rjmp	.+26     	; 0x2bf8 <main+0x44c>

		}
		//else if ((Pu_0_return_u8 == PUSH_BUTTON_RELEASED ) && sys_state == Sys_Off) {
		else if ((Pu_0_return_u8 == PUSH_BUTTON_RELEASED ) && sys_state == Sys_Off && (GAS_STAT==0)) {
    2bde:	91 30       	cpi	r25, 0x01	; 1
    2be0:	59 f4       	brne	.+22     	; 0x2bf8 <main+0x44c>
    2be2:	80 91 24 02 	lds	r24, 0x0224
    2be6:	88 23       	and	r24, r24
    2be8:	39 f4       	brne	.+14     	; 0x2bf8 <main+0x44c>
    2bea:	80 91 22 02 	lds	r24, 0x0222
    2bee:	88 23       	and	r24, r24
    2bf0:	19 f4       	brne	.+6      	; 0x2bf8 <main+0x44c>
		H_LED_Void_LedOff(LED_YEL);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
			//	M_DIO_Void_SetPinValue(PB6_PIN , LOW);
		}
		if (GAS_STAT==1){
    2bf8:	80 91 22 02 	lds	r24, 0x0222
    2bfc:	81 30       	cpi	r24, 0x01	; 1
    2bfe:	b9 f4       	brne	.+46     	; 0x2c2e <main+0x482>
			flag = 1;
    2c00:	80 93 23 02 	sts	0x0223, r24
						sys_state = Sys_Off;
    2c04:	10 92 24 02 	sts	0x0224, r1
						H_LED_Void_LedOff(LED_RED);
    2c08:	84 e0       	ldi	r24, 0x04	; 4
    2c0a:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
						H_LED_Void_LedOn(LED_YEL);
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	0e 94 4b 10 	call	0x2096	; 0x2096 <H_LED_Void_LedOn>
						//M_DIO_Void_SetPinValue(PB6_PIN , HIGH);   //motor enable
						H_Lcd_Void_LCDGoTo(0, 12);             //sys on
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	6c e0       	ldi	r22, 0x0C	; 12
    2c18:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
								H_Lcd_Void_LCDWriteString("   off   ");
    2c1c:	82 e7       	ldi	r24, 0x72	; 114
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
						H_EEPROM_Void_EEPROMWrite(0,1,Sys_off_EEPROM);
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	61 e0       	ldi	r22, 0x01	; 1
    2c28:	4c e3       	ldi	r20, 0x3C	; 60
    2c2a:	0e 94 1c 13 	call	0x2638	; 0x2638 <H_EEPROM_Void_EEPROMWrite>
		}
if (GAS_STAT==0){
    2c2e:	80 91 22 02 	lds	r24, 0x0222
    2c32:	88 23       	and	r24, r24
    2c34:	19 f4       	brne	.+6      	; 0x2c3c <main+0x490>
	H_LED_Void_LedOff(LED_YEL);
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
}
		if ((Pu_0_return_u8 == PUSH_BUTTON_PRESSED) &&( local_dis < 5) &&( sys_state == Sys_On)) {
    2c3c:	80 91 e7 01 	lds	r24, 0x01E7
    2c40:	88 23       	and	r24, r24
    2c42:	79 f5       	brne	.+94     	; 0x2ca2 <main+0x4f6>
    2c44:	60 91 3d 02 	lds	r22, 0x023D
    2c48:	70 91 3e 02 	lds	r23, 0x023E
    2c4c:	80 91 3f 02 	lds	r24, 0x023F
    2c50:	90 91 40 02 	lds	r25, 0x0240
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 ea       	ldi	r20, 0xA0	; 160
    2c5a:	50 e4       	ldi	r21, 0x40	; 64
    2c5c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2c60:	88 23       	and	r24, r24
    2c62:	fc f4       	brge	.+62     	; 0x2ca2 <main+0x4f6>
    2c64:	80 91 24 02 	lds	r24, 0x0224
    2c68:	81 30       	cpi	r24, 0x01	; 1
    2c6a:	d9 f4       	brne	.+54     	; 0x2ca2 <main+0x4f6>
			flag = 1;
    2c6c:	80 93 23 02 	sts	0x0223, r24
			H_LED_Void_LedOff(LED_RED);
    2c70:	84 e0       	ldi	r24, 0x04	; 4
    2c72:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
			H_LED_Void_LedOn(LED_YEL);
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	0e 94 4b 10 	call	0x2096	; 0x2096 <H_LED_Void_LedOn>
			M_DIO_Void_SetPinValue(PB6_PIN, HIGH);              //motor enable
    2c7c:	8a e1       	ldi	r24, 0x1A	; 26
    2c7e:	61 e0       	ldi	r22, 0x01	; 1
    2c80:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
			H_Lcd_Void_LCDGoTo(0, 12);             //sys on
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	6c e0       	ldi	r22, 0x0C	; 12
    2c88:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
					H_Lcd_Void_LCDWriteString("   off  ");
    2c8c:	85 ec       	ldi	r24, 0xC5	; 197
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
			H_EEPROM_Void_EEPROMWrite(0,1,Sys_off_EEPROM);
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	61 e0       	ldi	r22, 0x01	; 1
    2c98:	4c e3       	ldi	r20, 0x3C	; 60
    2c9a:	0e 94 1c 13 	call	0x2638	; 0x2638 <H_EEPROM_Void_EEPROMWrite>
			sys_state = Sys_Off;
    2c9e:	10 92 24 02 	sts	0x0224, r1
		}

		//-------------END-----Gas_button_check---------------------------------------

		//-----------------CPS_sys_start----------------------------------------------
		Pu_0_return_u8 = H_PushButton_U8_PushButtonRead(PUSH_BUTTON_0);
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <H_PushButton_U8_PushButtonRead>
    2ca8:	80 93 e7 01 	sts	0x01E7, r24

		if ((Pu_0_return_u8 == PUSH_BUTTON_PRESSED)||Uart_dataRead=='h')// EDIT HERE FOR ULTRA SONIC
    2cac:	88 23       	and	r24, r24
    2cae:	21 f0       	breq	.+8      	; 0x2cb8 <main+0x50c>
    2cb0:	80 91 2a 02 	lds	r24, 0x022A
    2cb4:	88 36       	cpi	r24, 0x68	; 104
    2cb6:	41 f4       	brne	.+16     	; 0x2cc8 <main+0x51c>
		{
			CPS_SYS_STAT=(CPS_SYS_STAT==0)? 1:0 ;   //CPS sys is on
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	80 91 1d 02 	lds	r24, 0x021D
    2cbe:	88 23       	and	r24, r24
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <main+0x518>
    2cc2:	91 e0       	ldi	r25, 0x01	; 1
    2cc4:	90 93 1d 02 	sts	0x021D, r25

		}

		if ((CPS_SYS_STAT ==1) &&( local_dis < 5)) {
    2cc8:	10 91 1d 02 	lds	r17, 0x021D
    2ccc:	11 30       	cpi	r17, 0x01	; 1
    2cce:	59 f5       	brne	.+86     	; 0x2d26 <main+0x57a>
    2cd0:	60 91 3d 02 	lds	r22, 0x023D
    2cd4:	70 91 3e 02 	lds	r23, 0x023E
    2cd8:	80 91 3f 02 	lds	r24, 0x023F
    2cdc:	90 91 40 02 	lds	r25, 0x0240
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 ea       	ldi	r20, 0xA0	; 160
    2ce6:	50 e4       	ldi	r21, 0x40	; 64
    2ce8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	3c f4       	brge	.+14     	; 0x2cfe <main+0x552>
			H_LED_Void_LedOn(LED_BLU);
    2cf0:	82 e0       	ldi	r24, 0x02	; 2
    2cf2:	0e 94 4b 10 	call	0x2096	; 0x2096 <H_LED_Void_LedOn>
		}
		if ((CPS_SYS_STAT ==1) &&( local_dis > 5)) {
    2cf6:	10 91 1d 02 	lds	r17, 0x021D
    2cfa:	11 30       	cpi	r17, 0x01	; 1
    2cfc:	a1 f4       	brne	.+40     	; 0x2d26 <main+0x57a>
    2cfe:	60 91 3d 02 	lds	r22, 0x023D
    2d02:	70 91 3e 02 	lds	r23, 0x023E
    2d06:	80 91 3f 02 	lds	r24, 0x023F
    2d0a:	90 91 40 02 	lds	r25, 0x0240
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 ea       	ldi	r20, 0xA0	; 160
    2d14:	50 e4       	ldi	r21, 0x40	; 64
    2d16:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	24 f4       	brge	.+8      	; 0x2d26 <main+0x57a>
			H_LED_Void_LedOff(LED_BLU);
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
    2d24:	05 c0       	rjmp	.+10     	; 0x2d30 <main+0x584>
		}
		else if (CPS_SYS_STAT ==0){
    2d26:	11 23       	and	r17, r17
    2d28:	19 f4       	brne	.+6      	; 0x2d30 <main+0x584>
			H_LED_Void_LedOff(LED_BLU);
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
		//-----------------CPS_sys_END------------------------------------------------


		//------------sys_activation check--------------------------------------------

		Pu_3_return_u8 = H_PushButton_U8_PushButtonRead(PUSH_BUTTON_3);	//get sys button reading
    2d30:	83 e0       	ldi	r24, 0x03	; 3
    2d32:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <H_PushButton_U8_PushButtonRead>
    2d36:	80 93 e6 01 	sts	0x01E6, r24
	//	if ((Pu_3_return_u8 == PUSH_BUTTON_PRESSED) ||((Pu_3_return_u8 == PUSH_BUTTON_PRESSED) && (sys_state == Sys_On))||(Uart_dataRead=='b'))  //check if button is pressed
		if ((Pu_3_return_u8 == PUSH_BUTTON_PRESSED)||Uart_dataRead=='b')
    2d3a:	88 23       	and	r24, r24
    2d3c:	21 f0       	breq	.+8      	; 0x2d46 <main+0x59a>
    2d3e:	80 91 2a 02 	lds	r24, 0x022A
    2d42:	82 36       	cpi	r24, 0x62	; 98
    2d44:	41 f4       	brne	.+16     	; 0x2d56 <main+0x5aa>
		{
			sys_state=(sys_state==0)? 1:0 ;
    2d46:	80 91 24 02 	lds	r24, 0x0224
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	88 23       	and	r24, r24
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <main+0x5a6>
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	90 93 24 02 	sts	0x0224, r25
		}

		if (sys_state==Sys_On){
    2d56:	80 91 24 02 	lds	r24, 0x0224
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	91 f4       	brne	.+36     	; 0x2d82 <main+0x5d6>
			H_LED_Void_LedOn(LED_RED);                      //led on
    2d5e:	84 e0       	ldi	r24, 0x04	; 4
    2d60:	0e 94 4b 10 	call	0x2096	; 0x2096 <H_LED_Void_LedOn>
				//M_Timer_Void_TimerStop2();
				//M_Timer_Void_TimerStop(TIMER0_CHANNEL);
				flag = 0;
    2d64:	10 92 23 02 	sts	0x0223, r1
				//sys_state = Sys_On;
				H_Lcd_Void_LCDGoTo(0, 12);
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	6c e0       	ldi	r22, 0x0C	; 12
    2d6c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("   on ");
    2d70:	8e ec       	ldi	r24, 0xCE	; 206
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
				H_EEPROM_Void_EEPROMWrite(0, 1, Sys_on_EEPROM);
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	61 e0       	ldi	r22, 0x01	; 1
    2d7c:	4c e2       	ldi	r20, 0x2C	; 44
    2d7e:	0e 94 1c 13 	call	0x2638	; 0x2638 <H_EEPROM_Void_EEPROMWrite>



				}
						if (sys_state == Sys_Off) {
    2d82:	80 91 24 02 	lds	r24, 0x0224
    2d86:	88 23       	and	r24, r24
    2d88:	81 f4       	brne	.+32     	; 0x2daa <main+0x5fe>

						//	sys_state = Sys_Off;                      //sys  off
							H_LED_Void_LedOff(LED_RED);
    2d8a:	84 e0       	ldi	r24, 0x04	; 4
    2d8c:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
							H_Lcd_Void_LCDGoTo(0, 12);
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	6c e0       	ldi	r22, 0x0C	; 12
    2d94:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
							H_Lcd_Void_LCDWriteString("   off  ");
    2d98:	85 ec       	ldi	r24, 0xC5	; 197
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
							H_EEPROM_Void_EEPROMWrite(0, 1, Sys_off_EEPROM);
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	61 e0       	ldi	r22, 0x01	; 1
    2da4:	4c e3       	ldi	r20, 0x3C	; 60
    2da6:	0e 94 1c 13 	call	0x2638	; 0x2638 <H_EEPROM_Void_EEPROMWrite>

		}*/
//---------------END_section_sys activation check--------------------------------------------

//---------------waiting section-------------------------------------------------------------
		Pu_2_return_u8 = H_PushButton_U8_PushButtonRead(PUSH_BUTTON_2);
    2daa:	82 e0       	ldi	r24, 0x02	; 2
    2dac:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <H_PushButton_U8_PushButtonRead>
    2db0:	80 93 e8 01 	sts	0x01E8, r24

		if (waiting_state == 1 ) {
    2db4:	80 91 25 02 	lds	r24, 0x0225
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	c9 f4       	brne	.+50     	; 0x2dee <main+0x642>
    2dbc:	2c e2       	ldi	r18, 0x2C	; 44
    2dbe:	31 e0       	ldi	r19, 0x01	; 1
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	f1 f7       	brne	.-4      	; 0x2dc2 <main+0x616>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc6:	21 50       	subi	r18, 0x01	; 1
    2dc8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dca:	d1 f7       	brne	.-12     	; 0x2dc0 <main+0x614>
			_delay_ms(30);
			H_LED_Void_LedTog(LED_GRN);
    2dcc:	83 e0       	ldi	r24, 0x03	; 3
    2dce:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <H_LED_Void_LedTog>
			M_DIO_Void_TogPin(PC7_PIN);
    2dd2:	85 e2       	ldi	r24, 0x25	; 37
    2dd4:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <M_DIO_Void_TogPin>
			M_DIO_Void_TogPin(PA7_PIN);
    2dd8:	81 e1       	ldi	r24, 0x11	; 17
    2dda:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <M_DIO_Void_TogPin>
    2dde:	2c e2       	ldi	r18, 0x2C	; 44
    2de0:	31 e0       	ldi	r19, 0x01	; 1
    2de2:	ce 01       	movw	r24, r28
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <main+0x638>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de8:	21 50       	subi	r18, 0x01	; 1
    2dea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dec:	d1 f7       	brne	.-12     	; 0x2de2 <main+0x636>
			_delay_ms(30);

		}
		if (((Pu_2_return_u8 == PUSH_BUTTON_PRESSED)|| (Uart_dataRead=='c')) && (waiting_state == 0)) //check if button is pressed
    2dee:	90 91 e8 01 	lds	r25, 0x01E8
    2df2:	99 23       	and	r25, r25
    2df4:	29 f0       	breq	.+10     	; 0x2e00 <main+0x654>
    2df6:	80 91 2a 02 	lds	r24, 0x022A
    2dfa:	83 36       	cpi	r24, 0x63	; 99
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <main+0x654>
    2dfe:	a5 cd       	rjmp	.-1206   	; 0x294a <main+0x19e>
    2e00:	20 91 25 02 	lds	r18, 0x0225
    2e04:	22 23       	and	r18, r18
    2e06:	b9 f4       	brne	.+46     	; 0x2e36 <main+0x68a>
				{
			waiting_state = 1;
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	80 93 25 02 	sts	0x0225, r24
    2e0e:	94 01       	movw	r18, r8
    2e10:	ce 01       	movw	r24, r28
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <main+0x666>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e16:	21 50       	subi	r18, 0x01	; 1
    2e18:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1a:	d1 f7       	brne	.-12     	; 0x2e10 <main+0x664>
			_delay_ms(50);
			H_EEPROM_Void_EEPROMWrite(0,4,Sys_WaitingOn_EEPROM);
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	64 e0       	ldi	r22, 0x04	; 4
    2e20:	44 e1       	ldi	r20, 0x14	; 20
    2e22:	0e 94 1c 13 	call	0x2638	; 0x2638 <H_EEPROM_Void_EEPROMWrite>
    2e26:	94 01       	movw	r18, r8
    2e28:	ce 01       	movw	r24, r28
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <main+0x67e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2e:	21 50       	subi	r18, 0x01	; 1
    2e30:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e32:	d1 f7       	brne	.-12     	; 0x2e28 <main+0x67c>
    2e34:	8a cd       	rjmp	.-1260   	; 0x294a <main+0x19e>
			_delay_ms(50);

		}

		else if (((Pu_2_return_u8 == PUSH_BUTTON_PRESSED)|| (Uart_dataRead=='c'))&& (waiting_state == 1)) //check if button is pressed
    2e36:	99 23       	and	r25, r25
    2e38:	29 f0       	breq	.+10     	; 0x2e44 <main+0x698>
    2e3a:	80 91 2a 02 	lds	r24, 0x022A
    2e3e:	83 36       	cpi	r24, 0x63	; 99
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <main+0x698>
    2e42:	83 cd       	rjmp	.-1274   	; 0x294a <main+0x19e>
    2e44:	21 30       	cpi	r18, 0x01	; 1
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <main+0x69e>
    2e48:	80 cd       	rjmp	.-1280   	; 0x294a <main+0x19e>
    2e4a:	94 01       	movw	r18, r8
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	f1 f7       	brne	.-4      	; 0x2e4e <main+0x6a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e52:	21 50       	subi	r18, 0x01	; 1
    2e54:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e56:	d1 f7       	brne	.-12     	; 0x2e4c <main+0x6a0>
				{
			_delay_ms(50);
			H_EEPROM_Void_EEPROMWrite(0,4,Sys_WaitingOff_EEPROM);
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	64 e0       	ldi	r22, 0x04	; 4
    2e5c:	4e e1       	ldi	r20, 0x1E	; 30
    2e5e:	0e 94 1c 13 	call	0x2638	; 0x2638 <H_EEPROM_Void_EEPROMWrite>
    2e62:	94 01       	movw	r18, r8
    2e64:	ce 01       	movw	r24, r28
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <main+0x6ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6a:	21 50       	subi	r18, 0x01	; 1
    2e6c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6e:	d1 f7       	brne	.-12     	; 0x2e64 <main+0x6b8>
			_delay_ms(50);
			M_DIO_Void_SetPinValue(PC7_PIN, LOW);
    2e70:	85 e2       	ldi	r24, 0x25	; 37
    2e72:	60 e0       	ldi	r22, 0x00	; 0
    2e74:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(PA7_PIN, LOW);
    2e78:	81 e1       	ldi	r24, 0x11	; 17
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <M_DIO_Void_SetPinValue>
			H_LED_Void_LedOff(LED_GRN);
    2e80:	83 e0       	ldi	r24, 0x03	; 3
    2e82:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_LED_Void_LedOff>
			waiting_state = 0;
    2e86:	10 92 25 02 	sts	0x0225, r1
    2e8a:	5f cd       	rjmp	.-1346   	; 0x294a <main+0x19e>

00002e8c <test_timer>:
u8 pressCounter = 0;
u8 buttonPressed = 0;
u8 LDRSHOW [7];
u8 LDR=0;
void test_timer(void) {
	H_LED_Void_LedTog(LED_RED);                      //toggle gas led state
    2e8c:	84 e0       	ldi	r24, 0x04	; 4
    2e8e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <H_LED_Void_LedTog>
	M_Timer_Void_TimerStop2();
    2e92:	0e 94 8e 08 	call	0x111c	; 0x111c <M_Timer_Void_TimerStop2>
	//M_Timer_Void_TimerStop(TIMER0_CHANNEL);
	flag = 0;
    2e96:	10 92 23 02 	sts	0x0223, r1
	if (sys_state == Sys_On) {
    2e9a:	80 91 24 02 	lds	r24, 0x0224
    2e9e:	81 30       	cpi	r24, 0x01	; 1
    2ea0:	81 f4       	brne	.+32     	; 0x2ec2 <test_timer+0x36>

		sys_state = Sys_Off;                      //sys  off
    2ea2:	10 92 24 02 	sts	0x0224, r1
		H_Lcd_Void_LCDGoTo(0, 12);
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	6c e0       	ldi	r22, 0x0C	; 12
    2eaa:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("  off   ");
    2eae:	85 ed       	ldi	r24, 0xD5	; 213
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
		H_EEPROM_Void_EEPROMWrite(0, 1, Sys_off_EEPROM);
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	61 e0       	ldi	r22, 0x01	; 1
    2eba:	4c e3       	ldi	r20, 0x3C	; 60
    2ebc:	0e 94 1c 13 	call	0x2638	; 0x2638 <H_EEPROM_Void_EEPROMWrite>
    2ec0:	08 95       	ret

	} else if (sys_state == Sys_Off) {
    2ec2:	80 91 24 02 	lds	r24, 0x0224
    2ec6:	88 23       	and	r24, r24
    2ec8:	81 f4       	brne	.+32     	; 0x2eea <test_timer+0x5e>
		sys_state = Sys_On;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	80 93 24 02 	sts	0x0224, r24
			H_Lcd_Void_LCDGoTo(0, 12);             //sys on
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	6c e0       	ldi	r22, 0x0C	; 12
    2ed4:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("   on   ");
    2ed8:	89 e6       	ldi	r24, 0x69	; 105
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	0e 94 ee 11 	call	0x23dc	; 0x23dc <H_Lcd_Void_LCDWriteString>
		H_EEPROM_Void_EEPROMWrite(0, 1, Sys_on_EEPROM);
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	61 e0       	ldi	r22, 0x01	; 1
    2ee4:	4c e2       	ldi	r20, 0x2C	; 44
    2ee6:	0e 94 1c 13 	call	0x2638	; 0x2638 <H_EEPROM_Void_EEPROMWrite>
    2eea:	08 95       	ret

00002eec <__mulsi3>:
    2eec:	62 9f       	mul	r22, r18
    2eee:	d0 01       	movw	r26, r0
    2ef0:	73 9f       	mul	r23, r19
    2ef2:	f0 01       	movw	r30, r0
    2ef4:	82 9f       	mul	r24, r18
    2ef6:	e0 0d       	add	r30, r0
    2ef8:	f1 1d       	adc	r31, r1
    2efa:	64 9f       	mul	r22, r20
    2efc:	e0 0d       	add	r30, r0
    2efe:	f1 1d       	adc	r31, r1
    2f00:	92 9f       	mul	r25, r18
    2f02:	f0 0d       	add	r31, r0
    2f04:	83 9f       	mul	r24, r19
    2f06:	f0 0d       	add	r31, r0
    2f08:	74 9f       	mul	r23, r20
    2f0a:	f0 0d       	add	r31, r0
    2f0c:	65 9f       	mul	r22, r21
    2f0e:	f0 0d       	add	r31, r0
    2f10:	99 27       	eor	r25, r25
    2f12:	72 9f       	mul	r23, r18
    2f14:	b0 0d       	add	r27, r0
    2f16:	e1 1d       	adc	r30, r1
    2f18:	f9 1f       	adc	r31, r25
    2f1a:	63 9f       	mul	r22, r19
    2f1c:	b0 0d       	add	r27, r0
    2f1e:	e1 1d       	adc	r30, r1
    2f20:	f9 1f       	adc	r31, r25
    2f22:	bd 01       	movw	r22, r26
    2f24:	cf 01       	movw	r24, r30
    2f26:	11 24       	eor	r1, r1
    2f28:	08 95       	ret

00002f2a <__udivmodqi4>:
    2f2a:	99 1b       	sub	r25, r25
    2f2c:	79 e0       	ldi	r23, 0x09	; 9
    2f2e:	04 c0       	rjmp	.+8      	; 0x2f38 <__udivmodqi4_ep>

00002f30 <__udivmodqi4_loop>:
    2f30:	99 1f       	adc	r25, r25
    2f32:	96 17       	cp	r25, r22
    2f34:	08 f0       	brcs	.+2      	; 0x2f38 <__udivmodqi4_ep>
    2f36:	96 1b       	sub	r25, r22

00002f38 <__udivmodqi4_ep>:
    2f38:	88 1f       	adc	r24, r24
    2f3a:	7a 95       	dec	r23
    2f3c:	c9 f7       	brne	.-14     	; 0x2f30 <__udivmodqi4_loop>
    2f3e:	80 95       	com	r24
    2f40:	08 95       	ret

00002f42 <__udivmodsi4>:
    2f42:	a1 e2       	ldi	r26, 0x21	; 33
    2f44:	1a 2e       	mov	r1, r26
    2f46:	aa 1b       	sub	r26, r26
    2f48:	bb 1b       	sub	r27, r27
    2f4a:	fd 01       	movw	r30, r26
    2f4c:	0d c0       	rjmp	.+26     	; 0x2f68 <__udivmodsi4_ep>

00002f4e <__udivmodsi4_loop>:
    2f4e:	aa 1f       	adc	r26, r26
    2f50:	bb 1f       	adc	r27, r27
    2f52:	ee 1f       	adc	r30, r30
    2f54:	ff 1f       	adc	r31, r31
    2f56:	a2 17       	cp	r26, r18
    2f58:	b3 07       	cpc	r27, r19
    2f5a:	e4 07       	cpc	r30, r20
    2f5c:	f5 07       	cpc	r31, r21
    2f5e:	20 f0       	brcs	.+8      	; 0x2f68 <__udivmodsi4_ep>
    2f60:	a2 1b       	sub	r26, r18
    2f62:	b3 0b       	sbc	r27, r19
    2f64:	e4 0b       	sbc	r30, r20
    2f66:	f5 0b       	sbc	r31, r21

00002f68 <__udivmodsi4_ep>:
    2f68:	66 1f       	adc	r22, r22
    2f6a:	77 1f       	adc	r23, r23
    2f6c:	88 1f       	adc	r24, r24
    2f6e:	99 1f       	adc	r25, r25
    2f70:	1a 94       	dec	r1
    2f72:	69 f7       	brne	.-38     	; 0x2f4e <__udivmodsi4_loop>
    2f74:	60 95       	com	r22
    2f76:	70 95       	com	r23
    2f78:	80 95       	com	r24
    2f7a:	90 95       	com	r25
    2f7c:	9b 01       	movw	r18, r22
    2f7e:	ac 01       	movw	r20, r24
    2f80:	bd 01       	movw	r22, r26
    2f82:	cf 01       	movw	r24, r30
    2f84:	08 95       	ret

00002f86 <__divmodsi4>:
    2f86:	97 fb       	bst	r25, 7
    2f88:	09 2e       	mov	r0, r25
    2f8a:	05 26       	eor	r0, r21
    2f8c:	0e d0       	rcall	.+28     	; 0x2faa <__divmodsi4_neg1>
    2f8e:	57 fd       	sbrc	r21, 7
    2f90:	04 d0       	rcall	.+8      	; 0x2f9a <__divmodsi4_neg2>
    2f92:	d7 df       	rcall	.-82     	; 0x2f42 <__udivmodsi4>
    2f94:	0a d0       	rcall	.+20     	; 0x2faa <__divmodsi4_neg1>
    2f96:	00 1c       	adc	r0, r0
    2f98:	38 f4       	brcc	.+14     	; 0x2fa8 <__divmodsi4_exit>

00002f9a <__divmodsi4_neg2>:
    2f9a:	50 95       	com	r21
    2f9c:	40 95       	com	r20
    2f9e:	30 95       	com	r19
    2fa0:	21 95       	neg	r18
    2fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa4:	4f 4f       	sbci	r20, 0xFF	; 255
    2fa6:	5f 4f       	sbci	r21, 0xFF	; 255

00002fa8 <__divmodsi4_exit>:
    2fa8:	08 95       	ret

00002faa <__divmodsi4_neg1>:
    2faa:	f6 f7       	brtc	.-4      	; 0x2fa8 <__divmodsi4_exit>
    2fac:	90 95       	com	r25
    2fae:	80 95       	com	r24
    2fb0:	70 95       	com	r23
    2fb2:	61 95       	neg	r22
    2fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fba:	08 95       	ret

00002fbc <__prologue_saves__>:
    2fbc:	2f 92       	push	r2
    2fbe:	3f 92       	push	r3
    2fc0:	4f 92       	push	r4
    2fc2:	5f 92       	push	r5
    2fc4:	6f 92       	push	r6
    2fc6:	7f 92       	push	r7
    2fc8:	8f 92       	push	r8
    2fca:	9f 92       	push	r9
    2fcc:	af 92       	push	r10
    2fce:	bf 92       	push	r11
    2fd0:	cf 92       	push	r12
    2fd2:	df 92       	push	r13
    2fd4:	ef 92       	push	r14
    2fd6:	ff 92       	push	r15
    2fd8:	0f 93       	push	r16
    2fda:	1f 93       	push	r17
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	ca 1b       	sub	r28, r26
    2fe6:	db 0b       	sbc	r29, r27
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	09 94       	ijmp

00002ff4 <__epilogue_restores__>:
    2ff4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ff6:	39 88       	ldd	r3, Y+17	; 0x11
    2ff8:	48 88       	ldd	r4, Y+16	; 0x10
    2ffa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ffc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ffe:	7d 84       	ldd	r7, Y+13	; 0x0d
    3000:	8c 84       	ldd	r8, Y+12	; 0x0c
    3002:	9b 84       	ldd	r9, Y+11	; 0x0b
    3004:	aa 84       	ldd	r10, Y+10	; 0x0a
    3006:	b9 84       	ldd	r11, Y+9	; 0x09
    3008:	c8 84       	ldd	r12, Y+8	; 0x08
    300a:	df 80       	ldd	r13, Y+7	; 0x07
    300c:	ee 80       	ldd	r14, Y+6	; 0x06
    300e:	fd 80       	ldd	r15, Y+5	; 0x05
    3010:	0c 81       	ldd	r16, Y+4	; 0x04
    3012:	1b 81       	ldd	r17, Y+3	; 0x03
    3014:	aa 81       	ldd	r26, Y+2	; 0x02
    3016:	b9 81       	ldd	r27, Y+1	; 0x01
    3018:	ce 0f       	add	r28, r30
    301a:	d1 1d       	adc	r29, r1
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	ed 01       	movw	r28, r26
    3028:	08 95       	ret

0000302a <dtostrf>:
    302a:	ef 92       	push	r14
    302c:	ff 92       	push	r15
    302e:	0f 93       	push	r16
    3030:	1f 93       	push	r17
    3032:	f2 2f       	mov	r31, r18
    3034:	f0 2e       	mov	r15, r16
    3036:	47 fd       	sbrc	r20, 7
    3038:	02 c0       	rjmp	.+4      	; 0x303e <dtostrf+0x14>
    303a:	e4 e0       	ldi	r30, 0x04	; 4
    303c:	01 c0       	rjmp	.+2      	; 0x3040 <dtostrf+0x16>
    303e:	e4 e1       	ldi	r30, 0x14	; 20
    3040:	24 2f       	mov	r18, r20
    3042:	33 27       	eor	r19, r19
    3044:	27 fd       	sbrc	r18, 7
    3046:	30 95       	com	r19
    3048:	37 ff       	sbrs	r19, 7
    304a:	03 c0       	rjmp	.+6      	; 0x3052 <dtostrf+0x28>
    304c:	30 95       	com	r19
    304e:	21 95       	neg	r18
    3050:	3f 4f       	sbci	r19, 0xFF	; 255
    3052:	4f 2d       	mov	r20, r15
    3054:	51 2f       	mov	r21, r17
    3056:	0f 2f       	mov	r16, r31
    3058:	ee 2e       	mov	r14, r30
    305a:	0e 94 36 18 	call	0x306c	; 0x306c <dtoa_prf>
    305e:	8f 2d       	mov	r24, r15
    3060:	91 2f       	mov	r25, r17
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	ff 90       	pop	r15
    3068:	ef 90       	pop	r14
    306a:	08 95       	ret

0000306c <dtoa_prf>:
    306c:	a9 e0       	ldi	r26, 0x09	; 9
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	ec e3       	ldi	r30, 0x3C	; 60
    3072:	f8 e1       	ldi	r31, 0x18	; 24
    3074:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__prologue_saves__+0x8>
    3078:	6a 01       	movw	r12, r20
    307a:	12 2f       	mov	r17, r18
    307c:	a0 2e       	mov	r10, r16
    307e:	be 2c       	mov	r11, r14
    3080:	2b e3       	ldi	r18, 0x3B	; 59
    3082:	20 17       	cp	r18, r16
    3084:	18 f4       	brcc	.+6      	; 0x308c <dtoa_prf+0x20>
    3086:	2c e3       	ldi	r18, 0x3C	; 60
    3088:	92 2e       	mov	r9, r18
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <dtoa_prf+0x24>
    308c:	90 2e       	mov	r9, r16
    308e:	93 94       	inc	r9
    3090:	ae 01       	movw	r20, r28
    3092:	4f 5f       	subi	r20, 0xFF	; 255
    3094:	5f 4f       	sbci	r21, 0xFF	; 255
    3096:	27 e0       	ldi	r18, 0x07	; 7
    3098:	09 2d       	mov	r16, r9
    309a:	0e 94 98 19 	call	0x3330	; 0x3330 <__ftoa_engine>
    309e:	bc 01       	movw	r22, r24
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	e8 2e       	mov	r14, r24
    30a4:	ff 24       	eor	r15, r15
    30a6:	c7 01       	movw	r24, r14
    30a8:	89 70       	andi	r24, 0x09	; 9
    30aa:	90 70       	andi	r25, 0x00	; 0
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	11 f4       	brne	.+4      	; 0x30b4 <dtoa_prf+0x48>
    30b0:	ad e2       	ldi	r26, 0x2D	; 45
    30b2:	09 c0       	rjmp	.+18     	; 0x30c6 <dtoa_prf+0x5a>
    30b4:	b1 fe       	sbrs	r11, 1
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <dtoa_prf+0x50>
    30b8:	ab e2       	ldi	r26, 0x2B	; 43
    30ba:	05 c0       	rjmp	.+10     	; 0x30c6 <dtoa_prf+0x5a>
    30bc:	b0 fc       	sbrc	r11, 0
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <dtoa_prf+0x58>
    30c0:	a0 e0       	ldi	r26, 0x00	; 0
    30c2:	01 c0       	rjmp	.+2      	; 0x30c6 <dtoa_prf+0x5a>
    30c4:	a0 e2       	ldi	r26, 0x20	; 32
    30c6:	e3 fe       	sbrs	r14, 3
    30c8:	3b c0       	rjmp	.+118    	; 0x3140 <dtoa_prf+0xd4>
    30ca:	aa 23       	and	r26, r26
    30cc:	11 f4       	brne	.+4      	; 0x30d2 <dtoa_prf+0x66>
    30ce:	23 e0       	ldi	r18, 0x03	; 3
    30d0:	01 c0       	rjmp	.+2      	; 0x30d4 <dtoa_prf+0x68>
    30d2:	24 e0       	ldi	r18, 0x04	; 4
    30d4:	21 17       	cp	r18, r17
    30d6:	10 f0       	brcs	.+4      	; 0x30dc <dtoa_prf+0x70>
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	02 c0       	rjmp	.+4      	; 0x30e0 <dtoa_prf+0x74>
    30dc:	12 1b       	sub	r17, r18
    30de:	21 2f       	mov	r18, r17
    30e0:	eb 2c       	mov	r14, r11
    30e2:	b4 fe       	sbrs	r11, 4
    30e4:	02 c0       	rjmp	.+4      	; 0x30ea <dtoa_prf+0x7e>
    30e6:	32 2f       	mov	r19, r18
    30e8:	0a c0       	rjmp	.+20     	; 0x30fe <dtoa_prf+0x92>
    30ea:	f6 01       	movw	r30, r12
    30ec:	32 2f       	mov	r19, r18
    30ee:	80 e2       	ldi	r24, 0x20	; 32
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <dtoa_prf+0x8a>
    30f2:	81 93       	st	Z+, r24
    30f4:	31 50       	subi	r19, 0x01	; 1
    30f6:	33 23       	and	r19, r19
    30f8:	e1 f7       	brne	.-8      	; 0x30f2 <dtoa_prf+0x86>
    30fa:	c2 0e       	add	r12, r18
    30fc:	d1 1c       	adc	r13, r1
    30fe:	aa 23       	and	r26, r26
    3100:	19 f0       	breq	.+6      	; 0x3108 <dtoa_prf+0x9c>
    3102:	f6 01       	movw	r30, r12
    3104:	a1 93       	st	Z+, r26
    3106:	6f 01       	movw	r12, r30
    3108:	f6 01       	movw	r30, r12
    310a:	31 96       	adiw	r30, 0x01	; 1
    310c:	e2 fe       	sbrs	r14, 2
    310e:	05 c0       	rjmp	.+10     	; 0x311a <dtoa_prf+0xae>
    3110:	9e e4       	ldi	r25, 0x4E	; 78
    3112:	d6 01       	movw	r26, r12
    3114:	9c 93       	st	X, r25
    3116:	81 e4       	ldi	r24, 0x41	; 65
    3118:	04 c0       	rjmp	.+8      	; 0x3122 <dtoa_prf+0xb6>
    311a:	9e e6       	ldi	r25, 0x6E	; 110
    311c:	d6 01       	movw	r26, r12
    311e:	9c 93       	st	X, r25
    3120:	81 e6       	ldi	r24, 0x61	; 97
    3122:	11 96       	adiw	r26, 0x01	; 1
    3124:	8c 93       	st	X, r24
    3126:	91 83       	std	Z+1, r25	; 0x01
    3128:	32 96       	adiw	r30, 0x02	; 2
    312a:	df 01       	movw	r26, r30
    312c:	83 2f       	mov	r24, r19
    312e:	90 e2       	ldi	r25, 0x20	; 32
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <dtoa_prf+0xca>
    3132:	9d 93       	st	X+, r25
    3134:	81 50       	subi	r24, 0x01	; 1
    3136:	88 23       	and	r24, r24
    3138:	e1 f7       	brne	.-8      	; 0x3132 <dtoa_prf+0xc6>
    313a:	e3 0f       	add	r30, r19
    313c:	f1 1d       	adc	r31, r1
    313e:	40 c0       	rjmp	.+128    	; 0x31c0 <dtoa_prf+0x154>
    3140:	e2 fe       	sbrs	r14, 2
    3142:	42 c0       	rjmp	.+132    	; 0x31c8 <dtoa_prf+0x15c>
    3144:	aa 23       	and	r26, r26
    3146:	11 f4       	brne	.+4      	; 0x314c <dtoa_prf+0xe0>
    3148:	23 e0       	ldi	r18, 0x03	; 3
    314a:	01 c0       	rjmp	.+2      	; 0x314e <dtoa_prf+0xe2>
    314c:	24 e0       	ldi	r18, 0x04	; 4
    314e:	21 17       	cp	r18, r17
    3150:	10 f0       	brcs	.+4      	; 0x3156 <dtoa_prf+0xea>
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	02 c0       	rjmp	.+4      	; 0x315a <dtoa_prf+0xee>
    3156:	12 1b       	sub	r17, r18
    3158:	21 2f       	mov	r18, r17
    315a:	eb 2c       	mov	r14, r11
    315c:	b4 fe       	sbrs	r11, 4
    315e:	02 c0       	rjmp	.+4      	; 0x3164 <dtoa_prf+0xf8>
    3160:	92 2f       	mov	r25, r18
    3162:	0a c0       	rjmp	.+20     	; 0x3178 <dtoa_prf+0x10c>
    3164:	f6 01       	movw	r30, r12
    3166:	92 2f       	mov	r25, r18
    3168:	80 e2       	ldi	r24, 0x20	; 32
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <dtoa_prf+0x104>
    316c:	81 93       	st	Z+, r24
    316e:	91 50       	subi	r25, 0x01	; 1
    3170:	99 23       	and	r25, r25
    3172:	e1 f7       	brne	.-8      	; 0x316c <dtoa_prf+0x100>
    3174:	c2 0e       	add	r12, r18
    3176:	d1 1c       	adc	r13, r1
    3178:	aa 23       	and	r26, r26
    317a:	19 f0       	breq	.+6      	; 0x3182 <dtoa_prf+0x116>
    317c:	f6 01       	movw	r30, r12
    317e:	a1 93       	st	Z+, r26
    3180:	6f 01       	movw	r12, r30
    3182:	f6 01       	movw	r30, r12
    3184:	31 96       	adiw	r30, 0x01	; 1
    3186:	e2 fe       	sbrs	r14, 2
    3188:	08 c0       	rjmp	.+16     	; 0x319a <dtoa_prf+0x12e>
    318a:	89 e4       	ldi	r24, 0x49	; 73
    318c:	d6 01       	movw	r26, r12
    318e:	8c 93       	st	X, r24
    3190:	8e e4       	ldi	r24, 0x4E	; 78
    3192:	11 96       	adiw	r26, 0x01	; 1
    3194:	8c 93       	st	X, r24
    3196:	86 e4       	ldi	r24, 0x46	; 70
    3198:	07 c0       	rjmp	.+14     	; 0x31a8 <dtoa_prf+0x13c>
    319a:	89 e6       	ldi	r24, 0x69	; 105
    319c:	d6 01       	movw	r26, r12
    319e:	8c 93       	st	X, r24
    31a0:	8e e6       	ldi	r24, 0x6E	; 110
    31a2:	11 96       	adiw	r26, 0x01	; 1
    31a4:	8c 93       	st	X, r24
    31a6:	86 e6       	ldi	r24, 0x66	; 102
    31a8:	81 83       	std	Z+1, r24	; 0x01
    31aa:	32 96       	adiw	r30, 0x02	; 2
    31ac:	df 01       	movw	r26, r30
    31ae:	89 2f       	mov	r24, r25
    31b0:	20 e2       	ldi	r18, 0x20	; 32
    31b2:	02 c0       	rjmp	.+4      	; 0x31b8 <dtoa_prf+0x14c>
    31b4:	2d 93       	st	X+, r18
    31b6:	81 50       	subi	r24, 0x01	; 1
    31b8:	88 23       	and	r24, r24
    31ba:	e1 f7       	brne	.-8      	; 0x31b4 <dtoa_prf+0x148>
    31bc:	e9 0f       	add	r30, r25
    31be:	f1 1d       	adc	r31, r1
    31c0:	10 82       	st	Z, r1
    31c2:	2e ef       	ldi	r18, 0xFE	; 254
    31c4:	3f ef       	ldi	r19, 0xFF	; 255
    31c6:	af c0       	rjmp	.+350    	; 0x3326 <dtoa_prf+0x2ba>
    31c8:	16 16       	cp	r1, r22
    31ca:	17 06       	cpc	r1, r23
    31cc:	1c f0       	brlt	.+6      	; 0x31d4 <dtoa_prf+0x168>
    31ce:	41 e0       	ldi	r20, 0x01	; 1
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	03 c0       	rjmp	.+6      	; 0x31da <dtoa_prf+0x16e>
    31d4:	ab 01       	movw	r20, r22
    31d6:	4f 5f       	subi	r20, 0xFF	; 255
    31d8:	5f 4f       	sbci	r21, 0xFF	; 255
    31da:	aa 20       	and	r10, r10
    31dc:	19 f4       	brne	.+6      	; 0x31e4 <dtoa_prf+0x178>
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	03 c0       	rjmp	.+6      	; 0x31ea <dtoa_prf+0x17e>
    31e4:	8a 2d       	mov	r24, r10
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	01 96       	adiw	r24, 0x01	; 1
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	aa 23       	and	r26, r26
    31f0:	11 f0       	breq	.+4      	; 0x31f6 <dtoa_prf+0x18a>
    31f2:	21 e0       	ldi	r18, 0x01	; 1
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	24 0f       	add	r18, r20
    31f8:	35 1f       	adc	r19, r21
    31fa:	28 0f       	add	r18, r24
    31fc:	39 1f       	adc	r19, r25
    31fe:	81 2f       	mov	r24, r17
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	28 17       	cp	r18, r24
    3204:	39 07       	cpc	r19, r25
    3206:	14 f0       	brlt	.+4      	; 0x320c <dtoa_prf+0x1a0>
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	02 c0       	rjmp	.+4      	; 0x3210 <dtoa_prf+0x1a4>
    320c:	12 1b       	sub	r17, r18
    320e:	21 2f       	mov	r18, r17
    3210:	4b 2d       	mov	r20, r11
    3212:	50 e0       	ldi	r21, 0x00	; 0
    3214:	ca 01       	movw	r24, r20
    3216:	80 71       	andi	r24, 0x10	; 16
    3218:	90 70       	andi	r25, 0x00	; 0
    321a:	b4 fc       	sbrc	r11, 4
    321c:	0d c0       	rjmp	.+26     	; 0x3238 <dtoa_prf+0x1cc>
    321e:	b3 fc       	sbrc	r11, 3
    3220:	0b c0       	rjmp	.+22     	; 0x3238 <dtoa_prf+0x1cc>
    3222:	f6 01       	movw	r30, r12
    3224:	32 2f       	mov	r19, r18
    3226:	40 e2       	ldi	r20, 0x20	; 32
    3228:	02 c0       	rjmp	.+4      	; 0x322e <dtoa_prf+0x1c2>
    322a:	41 93       	st	Z+, r20
    322c:	31 50       	subi	r19, 0x01	; 1
    322e:	33 23       	and	r19, r19
    3230:	e1 f7       	brne	.-8      	; 0x322a <dtoa_prf+0x1be>
    3232:	c2 0e       	add	r12, r18
    3234:	d1 1c       	adc	r13, r1
    3236:	01 c0       	rjmp	.+2      	; 0x323a <dtoa_prf+0x1ce>
    3238:	32 2f       	mov	r19, r18
    323a:	aa 23       	and	r26, r26
    323c:	19 f0       	breq	.+6      	; 0x3244 <dtoa_prf+0x1d8>
    323e:	f6 01       	movw	r30, r12
    3240:	a1 93       	st	Z+, r26
    3242:	6f 01       	movw	r12, r30
    3244:	89 2b       	or	r24, r25
    3246:	11 f0       	breq	.+4      	; 0x324c <dtoa_prf+0x1e0>
    3248:	13 2f       	mov	r17, r19
    324a:	0a c0       	rjmp	.+20     	; 0x3260 <dtoa_prf+0x1f4>
    324c:	f6 01       	movw	r30, r12
    324e:	13 2f       	mov	r17, r19
    3250:	80 e3       	ldi	r24, 0x30	; 48
    3252:	02 c0       	rjmp	.+4      	; 0x3258 <dtoa_prf+0x1ec>
    3254:	81 93       	st	Z+, r24
    3256:	11 50       	subi	r17, 0x01	; 1
    3258:	11 23       	and	r17, r17
    325a:	e1 f7       	brne	.-8      	; 0x3254 <dtoa_prf+0x1e8>
    325c:	c3 0e       	add	r12, r19
    325e:	d1 1c       	adc	r13, r1
    3260:	09 2d       	mov	r16, r9
    3262:	06 0f       	add	r16, r22
    3264:	ba 80       	ldd	r11, Y+2	; 0x02
    3266:	90 e1       	ldi	r25, 0x10	; 16
    3268:	89 2e       	mov	r8, r25
    326a:	91 2c       	mov	r9, r1
    326c:	8e 20       	and	r8, r14
    326e:	9f 20       	and	r9, r15
    3270:	e4 fe       	sbrs	r14, 4
    3272:	04 c0       	rjmp	.+8      	; 0x327c <dtoa_prf+0x210>
    3274:	f1 e3       	ldi	r31, 0x31	; 49
    3276:	bf 16       	cp	r11, r31
    3278:	09 f4       	brne	.+2      	; 0x327c <dtoa_prf+0x210>
    327a:	01 50       	subi	r16, 0x01	; 1
    327c:	10 16       	cp	r1, r16
    327e:	14 f0       	brlt	.+4      	; 0x3284 <dtoa_prf+0x218>
    3280:	01 e0       	ldi	r16, 0x01	; 1
    3282:	03 c0       	rjmp	.+6      	; 0x328a <dtoa_prf+0x21e>
    3284:	09 30       	cpi	r16, 0x09	; 9
    3286:	08 f0       	brcs	.+2      	; 0x328a <dtoa_prf+0x21e>
    3288:	08 e0       	ldi	r16, 0x08	; 8
    328a:	9b 01       	movw	r18, r22
    328c:	77 ff       	sbrs	r23, 7
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <dtoa_prf+0x228>
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	cb 01       	movw	r24, r22
    3296:	01 96       	adiw	r24, 0x01	; 1
    3298:	82 1b       	sub	r24, r18
    329a:	93 0b       	sbc	r25, r19
    329c:	fe 01       	movw	r30, r28
    329e:	31 96       	adiw	r30, 0x01	; 1
    32a0:	e8 0f       	add	r30, r24
    32a2:	f9 1f       	adc	r31, r25
    32a4:	8e e2       	ldi	r24, 0x2E	; 46
    32a6:	f8 2e       	mov	r15, r24
    32a8:	3b 01       	movw	r6, r22
    32aa:	60 1a       	sub	r6, r16
    32ac:	71 08       	sbc	r7, r1
    32ae:	8a 2d       	mov	r24, r10
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	44 27       	eor	r20, r20
    32b4:	55 27       	eor	r21, r21
    32b6:	48 1b       	sub	r20, r24
    32b8:	59 0b       	sbc	r21, r25
    32ba:	8f ef       	ldi	r24, 0xFF	; 255
    32bc:	2f 3f       	cpi	r18, 0xFF	; 255
    32be:	38 07       	cpc	r19, r24
    32c0:	19 f4       	brne	.+6      	; 0x32c8 <dtoa_prf+0x25c>
    32c2:	d6 01       	movw	r26, r12
    32c4:	fd 92       	st	X+, r15
    32c6:	6d 01       	movw	r12, r26
    32c8:	62 17       	cp	r22, r18
    32ca:	73 07       	cpc	r23, r19
    32cc:	2c f0       	brlt	.+10     	; 0x32d8 <dtoa_prf+0x26c>
    32ce:	62 16       	cp	r6, r18
    32d0:	73 06       	cpc	r7, r19
    32d2:	14 f4       	brge	.+4      	; 0x32d8 <dtoa_prf+0x26c>
    32d4:	80 81       	ld	r24, Z
    32d6:	01 c0       	rjmp	.+2      	; 0x32da <dtoa_prf+0x26e>
    32d8:	80 e3       	ldi	r24, 0x30	; 48
    32da:	21 50       	subi	r18, 0x01	; 1
    32dc:	30 40       	sbci	r19, 0x00	; 0
    32de:	31 96       	adiw	r30, 0x01	; 1
    32e0:	24 17       	cp	r18, r20
    32e2:	35 07       	cpc	r19, r21
    32e4:	24 f0       	brlt	.+8      	; 0x32ee <dtoa_prf+0x282>
    32e6:	d6 01       	movw	r26, r12
    32e8:	8d 93       	st	X+, r24
    32ea:	6d 01       	movw	r12, r26
    32ec:	e6 cf       	rjmp	.-52     	; 0x32ba <dtoa_prf+0x24e>
    32ee:	26 17       	cp	r18, r22
    32f0:	37 07       	cpc	r19, r23
    32f2:	49 f4       	brne	.+18     	; 0x3306 <dtoa_prf+0x29a>
    32f4:	b5 e3       	ldi	r27, 0x35	; 53
    32f6:	bb 15       	cp	r27, r11
    32f8:	28 f0       	brcs	.+10     	; 0x3304 <dtoa_prf+0x298>
    32fa:	bb 16       	cp	r11, r27
    32fc:	21 f4       	brne	.+8      	; 0x3306 <dtoa_prf+0x29a>
    32fe:	81 14       	cp	r8, r1
    3300:	91 04       	cpc	r9, r1
    3302:	09 f4       	brne	.+2      	; 0x3306 <dtoa_prf+0x29a>
    3304:	81 e3       	ldi	r24, 0x31	; 49
    3306:	f6 01       	movw	r30, r12
    3308:	81 93       	st	Z+, r24
    330a:	d6 01       	movw	r26, r12
    330c:	81 2f       	mov	r24, r17
    330e:	90 e2       	ldi	r25, 0x20	; 32
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <dtoa_prf+0x2aa>
    3312:	9c 93       	st	X, r25
    3314:	81 50       	subi	r24, 0x01	; 1
    3316:	11 96       	adiw	r26, 0x01	; 1
    3318:	88 23       	and	r24, r24
    331a:	d9 f7       	brne	.-10     	; 0x3312 <dtoa_prf+0x2a6>
    331c:	e1 0f       	add	r30, r17
    331e:	f1 1d       	adc	r31, r1
    3320:	10 82       	st	Z, r1
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	c9 01       	movw	r24, r18
    3328:	29 96       	adiw	r28, 0x09	; 9
    332a:	ee e0       	ldi	r30, 0x0E	; 14
    332c:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__epilogue_restores__+0x8>

00003330 <__ftoa_engine>:
    3330:	28 30       	cpi	r18, 0x08	; 8
    3332:	08 f0       	brcs	.+2      	; 0x3336 <__ftoa_engine+0x6>
    3334:	27 e0       	ldi	r18, 0x07	; 7
    3336:	33 27       	eor	r19, r19
    3338:	da 01       	movw	r26, r20
    333a:	99 0f       	add	r25, r25
    333c:	31 1d       	adc	r19, r1
    333e:	87 fd       	sbrc	r24, 7
    3340:	91 60       	ori	r25, 0x01	; 1
    3342:	00 96       	adiw	r24, 0x00	; 0
    3344:	61 05       	cpc	r22, r1
    3346:	71 05       	cpc	r23, r1
    3348:	39 f4       	brne	.+14     	; 0x3358 <__ftoa_engine+0x28>
    334a:	32 60       	ori	r19, 0x02	; 2
    334c:	2e 5f       	subi	r18, 0xFE	; 254
    334e:	3d 93       	st	X+, r19
    3350:	30 e3       	ldi	r19, 0x30	; 48
    3352:	2a 95       	dec	r18
    3354:	e1 f7       	brne	.-8      	; 0x334e <__ftoa_engine+0x1e>
    3356:	08 95       	ret
    3358:	9f 3f       	cpi	r25, 0xFF	; 255
    335a:	30 f0       	brcs	.+12     	; 0x3368 <__ftoa_engine+0x38>
    335c:	80 38       	cpi	r24, 0x80	; 128
    335e:	71 05       	cpc	r23, r1
    3360:	61 05       	cpc	r22, r1
    3362:	09 f0       	breq	.+2      	; 0x3366 <__ftoa_engine+0x36>
    3364:	3c 5f       	subi	r19, 0xFC	; 252
    3366:	3c 5f       	subi	r19, 0xFC	; 252
    3368:	3d 93       	st	X+, r19
    336a:	91 30       	cpi	r25, 0x01	; 1
    336c:	08 f0       	brcs	.+2      	; 0x3370 <__ftoa_engine+0x40>
    336e:	80 68       	ori	r24, 0x80	; 128
    3370:	91 1d       	adc	r25, r1
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	1f 93       	push	r17
    3378:	0f 93       	push	r16
    337a:	ff 92       	push	r15
    337c:	ef 92       	push	r14
    337e:	19 2f       	mov	r17, r25
    3380:	98 7f       	andi	r25, 0xF8	; 248
    3382:	96 95       	lsr	r25
    3384:	e9 2f       	mov	r30, r25
    3386:	96 95       	lsr	r25
    3388:	96 95       	lsr	r25
    338a:	e9 0f       	add	r30, r25
    338c:	ff 27       	eor	r31, r31
    338e:	e2 55       	subi	r30, 0x52	; 82
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	99 27       	eor	r25, r25
    3394:	33 27       	eor	r19, r19
    3396:	ee 24       	eor	r14, r14
    3398:	ff 24       	eor	r15, r15
    339a:	a7 01       	movw	r20, r14
    339c:	e7 01       	movw	r28, r14
    339e:	05 90       	lpm	r0, Z+
    33a0:	08 94       	sec
    33a2:	07 94       	ror	r0
    33a4:	28 f4       	brcc	.+10     	; 0x33b0 <__ftoa_engine+0x80>
    33a6:	36 0f       	add	r19, r22
    33a8:	e7 1e       	adc	r14, r23
    33aa:	f8 1e       	adc	r15, r24
    33ac:	49 1f       	adc	r20, r25
    33ae:	51 1d       	adc	r21, r1
    33b0:	66 0f       	add	r22, r22
    33b2:	77 1f       	adc	r23, r23
    33b4:	88 1f       	adc	r24, r24
    33b6:	99 1f       	adc	r25, r25
    33b8:	06 94       	lsr	r0
    33ba:	a1 f7       	brne	.-24     	; 0x33a4 <__ftoa_engine+0x74>
    33bc:	05 90       	lpm	r0, Z+
    33be:	07 94       	ror	r0
    33c0:	28 f4       	brcc	.+10     	; 0x33cc <__ftoa_engine+0x9c>
    33c2:	e7 0e       	add	r14, r23
    33c4:	f8 1e       	adc	r15, r24
    33c6:	49 1f       	adc	r20, r25
    33c8:	56 1f       	adc	r21, r22
    33ca:	c1 1d       	adc	r28, r1
    33cc:	77 0f       	add	r23, r23
    33ce:	88 1f       	adc	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	66 1f       	adc	r22, r22
    33d4:	06 94       	lsr	r0
    33d6:	a1 f7       	brne	.-24     	; 0x33c0 <__ftoa_engine+0x90>
    33d8:	05 90       	lpm	r0, Z+
    33da:	07 94       	ror	r0
    33dc:	28 f4       	brcc	.+10     	; 0x33e8 <__ftoa_engine+0xb8>
    33de:	f8 0e       	add	r15, r24
    33e0:	49 1f       	adc	r20, r25
    33e2:	56 1f       	adc	r21, r22
    33e4:	c7 1f       	adc	r28, r23
    33e6:	d1 1d       	adc	r29, r1
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	66 1f       	adc	r22, r22
    33ee:	77 1f       	adc	r23, r23
    33f0:	06 94       	lsr	r0
    33f2:	a1 f7       	brne	.-24     	; 0x33dc <__ftoa_engine+0xac>
    33f4:	05 90       	lpm	r0, Z+
    33f6:	07 94       	ror	r0
    33f8:	20 f4       	brcc	.+8      	; 0x3402 <__ftoa_engine+0xd2>
    33fa:	49 0f       	add	r20, r25
    33fc:	56 1f       	adc	r21, r22
    33fe:	c7 1f       	adc	r28, r23
    3400:	d8 1f       	adc	r29, r24
    3402:	99 0f       	add	r25, r25
    3404:	66 1f       	adc	r22, r22
    3406:	77 1f       	adc	r23, r23
    3408:	88 1f       	adc	r24, r24
    340a:	06 94       	lsr	r0
    340c:	a9 f7       	brne	.-22     	; 0x33f8 <__ftoa_engine+0xc8>
    340e:	84 91       	lpm	r24, Z+
    3410:	10 95       	com	r17
    3412:	17 70       	andi	r17, 0x07	; 7
    3414:	41 f0       	breq	.+16     	; 0x3426 <__ftoa_engine+0xf6>
    3416:	d6 95       	lsr	r29
    3418:	c7 95       	ror	r28
    341a:	57 95       	ror	r21
    341c:	47 95       	ror	r20
    341e:	f7 94       	ror	r15
    3420:	e7 94       	ror	r14
    3422:	1a 95       	dec	r17
    3424:	c1 f7       	brne	.-16     	; 0x3416 <__ftoa_engine+0xe6>
    3426:	e4 e5       	ldi	r30, 0x54	; 84
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	68 94       	set
    342c:	15 90       	lpm	r1, Z+
    342e:	15 91       	lpm	r17, Z+
    3430:	35 91       	lpm	r19, Z+
    3432:	65 91       	lpm	r22, Z+
    3434:	95 91       	lpm	r25, Z+
    3436:	05 90       	lpm	r0, Z+
    3438:	7f e2       	ldi	r23, 0x2F	; 47
    343a:	73 95       	inc	r23
    343c:	e1 18       	sub	r14, r1
    343e:	f1 0a       	sbc	r15, r17
    3440:	43 0b       	sbc	r20, r19
    3442:	56 0b       	sbc	r21, r22
    3444:	c9 0b       	sbc	r28, r25
    3446:	d0 09       	sbc	r29, r0
    3448:	c0 f7       	brcc	.-16     	; 0x343a <__ftoa_engine+0x10a>
    344a:	e1 0c       	add	r14, r1
    344c:	f1 1e       	adc	r15, r17
    344e:	43 1f       	adc	r20, r19
    3450:	56 1f       	adc	r21, r22
    3452:	c9 1f       	adc	r28, r25
    3454:	d0 1d       	adc	r29, r0
    3456:	7e f4       	brtc	.+30     	; 0x3476 <__ftoa_engine+0x146>
    3458:	70 33       	cpi	r23, 0x30	; 48
    345a:	11 f4       	brne	.+4      	; 0x3460 <__ftoa_engine+0x130>
    345c:	8a 95       	dec	r24
    345e:	e6 cf       	rjmp	.-52     	; 0x342c <__ftoa_engine+0xfc>
    3460:	e8 94       	clt
    3462:	01 50       	subi	r16, 0x01	; 1
    3464:	30 f0       	brcs	.+12     	; 0x3472 <__ftoa_engine+0x142>
    3466:	08 0f       	add	r16, r24
    3468:	0a f4       	brpl	.+2      	; 0x346c <__ftoa_engine+0x13c>
    346a:	00 27       	eor	r16, r16
    346c:	02 17       	cp	r16, r18
    346e:	08 f4       	brcc	.+2      	; 0x3472 <__ftoa_engine+0x142>
    3470:	20 2f       	mov	r18, r16
    3472:	23 95       	inc	r18
    3474:	02 2f       	mov	r16, r18
    3476:	7a 33       	cpi	r23, 0x3A	; 58
    3478:	28 f0       	brcs	.+10     	; 0x3484 <__ftoa_engine+0x154>
    347a:	79 e3       	ldi	r23, 0x39	; 57
    347c:	7d 93       	st	X+, r23
    347e:	2a 95       	dec	r18
    3480:	e9 f7       	brne	.-6      	; 0x347c <__ftoa_engine+0x14c>
    3482:	10 c0       	rjmp	.+32     	; 0x34a4 <__ftoa_engine+0x174>
    3484:	7d 93       	st	X+, r23
    3486:	2a 95       	dec	r18
    3488:	89 f6       	brne	.-94     	; 0x342c <__ftoa_engine+0xfc>
    348a:	06 94       	lsr	r0
    348c:	97 95       	ror	r25
    348e:	67 95       	ror	r22
    3490:	37 95       	ror	r19
    3492:	17 95       	ror	r17
    3494:	17 94       	ror	r1
    3496:	e1 18       	sub	r14, r1
    3498:	f1 0a       	sbc	r15, r17
    349a:	43 0b       	sbc	r20, r19
    349c:	56 0b       	sbc	r21, r22
    349e:	c9 0b       	sbc	r28, r25
    34a0:	d0 09       	sbc	r29, r0
    34a2:	98 f0       	brcs	.+38     	; 0x34ca <__ftoa_engine+0x19a>
    34a4:	23 95       	inc	r18
    34a6:	7e 91       	ld	r23, -X
    34a8:	73 95       	inc	r23
    34aa:	7a 33       	cpi	r23, 0x3A	; 58
    34ac:	08 f0       	brcs	.+2      	; 0x34b0 <__ftoa_engine+0x180>
    34ae:	70 e3       	ldi	r23, 0x30	; 48
    34b0:	7c 93       	st	X, r23
    34b2:	20 13       	cpse	r18, r16
    34b4:	b8 f7       	brcc	.-18     	; 0x34a4 <__ftoa_engine+0x174>
    34b6:	7e 91       	ld	r23, -X
    34b8:	70 61       	ori	r23, 0x10	; 16
    34ba:	7d 93       	st	X+, r23
    34bc:	30 f0       	brcs	.+12     	; 0x34ca <__ftoa_engine+0x19a>
    34be:	83 95       	inc	r24
    34c0:	71 e3       	ldi	r23, 0x31	; 49
    34c2:	7d 93       	st	X+, r23
    34c4:	70 e3       	ldi	r23, 0x30	; 48
    34c6:	2a 95       	dec	r18
    34c8:	e1 f7       	brne	.-8      	; 0x34c2 <__ftoa_engine+0x192>
    34ca:	11 24       	eor	r1, r1
    34cc:	ef 90       	pop	r14
    34ce:	ff 90       	pop	r15
    34d0:	0f 91       	pop	r16
    34d2:	1f 91       	pop	r17
    34d4:	cf 91       	pop	r28
    34d6:	df 91       	pop	r29
    34d8:	99 27       	eor	r25, r25
    34da:	87 fd       	sbrc	r24, 7
    34dc:	90 95       	com	r25
    34de:	08 95       	ret

000034e0 <_exit>:
    34e0:	f8 94       	cli

000034e2 <__stop_program>:
    34e2:	ff cf       	rjmp	.-2      	; 0x34e2 <__stop_program>
